'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports Microsoft.VisualBasic
Imports NextGen.Application.BusinessObject
Imports NextGen.Framework.Managers.ApplicationMgr
Imports NextGen.Framework.Managers.CacheMgr
Imports NextGen.Framework.Managers.ConfigurationMgr
Imports NextGen.Framework.Managers.LogMgr
Imports NextGen.Framework.Managers.MessageMgr
Imports NextGen.Framework.Managers.ObjectMgr
Imports NextGen.Framework.Managers.ObjectMgr.Query
Imports NextGen.Framework.Managers.QueryMgr
Imports NextGen.Framework.Managers.UserMgr
Imports NextGen.Framework.OQL
Imports System
<Assembly: System.Reflection.AssemblyVersionAttribute("2.7.0.0"),  _
 Assembly: System.Reflection.AssemblyFileVersionAttribute("2.7.2.79"),  _
 Assembly: System.Reflection.AssemblyInformationalVersionAttribute("2.7.0.0")> 

Namespace NextGen.Application.MetricArchetype
    
    Public Class WC_MxARDaysOldByInvoice
        Inherits NextGen.Framework.Managers.ObjectMgr.Archetype.NxMetricArchetype
        
        <ComponentModel.EditorBrowsableAttribute(ComponentModel.EditorBrowsableState.Advanced)>  _
        Private __query As NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice
        
        <ComponentModel.EditorBrowsableAttribute(ComponentModel.EditorBrowsableState.Advanced)>  _
        Private Shared __CaptionID As System.Guid = New System.Guid("f86d6e82-05a9-4e6e-8fa3-21d2cebd17d1")
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Overrides ReadOnly Property ParamObjectID() As String
            Get
                Return "WC_MxARDaysOldByInvoice"
            End Get
        End Property
        
        Public Overrides ReadOnly Property QueryInterface() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            Get
                Return Me.Query
            End Get
        End Property
        
        Public Shadows ReadOnly Property Query() As NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice
            Get
                If (Me.__query Is Nothing) Then
                    Me.Initialize
                    Me.__query = NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice.Create(Me)
                End If
                Return Me.__query
            End Get
        End Property
        
        Public Overrides ReadOnly Property ID() As String
            Get
                Return "WC_MxARDaysOldByInvoice"
            End Get
        End Property
        
        Protected Overrides ReadOnly Property RunArchetypeGeneric() As NextGen.Framework.Managers.ObjectMgr.Archetype.IArchetype
            Get
                Return Me.RunArchetype
            End Get
        End Property
        
        Public Shadows ReadOnly Property RunArchetype() As NextGen.Application.Archetype.WC_MxARDaysOldByInvoiceRun
            Get
                Return NextGen.Application.Archetype.WC_MxARDaysOldByInvoiceRun.Current
            End Get
        End Property
        
        Public Overrides ReadOnly Property CaptionID() As System.Guid
            Get
                Return WC_MxARDaysOldByInvoice.__CaptionID
            End Get
        End Property
        
        Public ReadOnly Property ClntDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 100)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property MattDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 99)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property AgingBucket() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 98)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property LastPaymentDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 97)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARFees() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 96)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARHardCosts() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 95)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARSoftCosts() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 94)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ArTax() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 93)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARInterest() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 92)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property AROnAcct() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 91)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property AROther() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 90)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARUnallocated() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 89)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARTotal() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 88)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ArCosts() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 87)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARCharges() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 86)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property BillTkpr() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 85)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property Matter() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 84)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARDoubtFul() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 83)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property Currency() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxCurrencyCodeMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 82)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxCurrencyCodeMetric)
            End Get
        End Property
        
        Public ReadOnly Property Aging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 81)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property Aging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 80)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property Aging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 79)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property Aging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 78)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property Aging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 77)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 76)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 75)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 74)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 73)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 72)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 71)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 70)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 69)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 68)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 67)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 66)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 65)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 64)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 63)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 62)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 61)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 60)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 59)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 58)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 57)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property IntAging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 56)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property IntAging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 55)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property IntAging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 54)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property IntAging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 53)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property IntAging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 52)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 51)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 50)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 49)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 48)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 47)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property OthAging1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 46)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property OthAging2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 45)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property OthAging3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 44)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property OthAging4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 43)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property OthAging5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 42)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property MultiTimekeeper() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 41)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property WC_MxARDaysOldByInvoiceID() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 40)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidMetric)
            End Get
        End Property
        
        Public ReadOnly Property LastPaymentNxDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 39)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property TranType() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 38)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property WorkType() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 37)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property TimeType() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 36)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property CostType() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 35)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property ChrgType() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 34)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property WorkOffice() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 33)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property BillOffice() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 32)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property WorkTkpr() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 31)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property CurrFactor() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 30)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric)
            End Get
        End Property
        
        Public ReadOnly Property IsRounding() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 29)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARType() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 28)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property LastBillNxDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 27)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property BillThruDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 26)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric)
            End Get
        End Property
        
        Public ReadOnly Property DaysOld() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 25)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerMetric)
            End Get
        End Property
        
        Public ReadOnly Property ChkDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 24)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 23)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode2() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 22)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode3() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 21)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode4() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 20)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode5() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 19)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property ReportOnDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 18)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property BillsThruEndDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 17)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric)
            End Get
        End Property
        
        Public ReadOnly Property PaymentsThruEndDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 16)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric)
            End Get
        End Property
        
        Public ReadOnly Property DateOfAging() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 15)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric)
            End Get
        End Property
        
        Public ReadOnly Property ReportCurrency() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 14)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property CurrencyDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 13)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric)
            End Get
        End Property
        
        Public ReadOnly Property CurrencyType() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 12)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric)
            End Get
        End Property
        
        Public ReadOnly Property RepTitle() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 11)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property RepTitle1() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 10)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property BillTkprDate() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 9)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property OrigInvAmt() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 8)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric)
            End Get
        End Property
        
        Public ReadOnly Property MattBillContact() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 7)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property ARMaster() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 6)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property InvMaster() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 5)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric)
            End Get
        End Property
        
        Public ReadOnly Property UnpaidBOAFees() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 4)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric)
            End Get
        End Property
        
        Public ReadOnly Property UnpaidBOACosts() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 3)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric)
            End Get
        End Property
        
        Public ReadOnly Property UnappliedBOAFees() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 2)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric)
            End Get
        End Property
        
        Public ReadOnly Property UnappliedBOACosts() As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric
            Get
                Return CType(Me.Attributes((Me.Attributes.Count - 1)),NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric)
            End Get
        End Property
        
        <ComponentModel.EditorBrowsableAttribute(ComponentModel.EditorBrowsableState.Advanced)>  _
        Protected Overrides Sub InitializeAttributes()
            MyBase.InitializeAttributes
            Me.Attributes.Add(Me.CreateClntDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateMattDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAgingBucket(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateLastPaymentDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARFees(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARHardCosts(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARSoftCosts(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateArTax(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARInterest(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAROnAcct(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAROther(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARUnallocated(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARTotal(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateArCosts(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARCharges(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBillTkpr(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateMatter(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARDoubtFul(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateCurrency(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateFeeAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateFeeAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateFeeAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateFeeAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateFeeAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateHCoAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateHCoAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateHCoAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateHCoAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateHCoAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateSCoAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateSCoAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateSCoAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateSCoAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateSCoAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateTaxAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateTaxAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateTaxAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateTaxAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateTaxAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateIntAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateIntAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateIntAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateIntAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateIntAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBOAAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBOAAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBOAAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBOAAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBOAAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateOthAging1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateOthAging2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateOthAging3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateOthAging4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateOthAging5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateMultiTimekeeper(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateWC_MxARDaysOldByInvoiceID(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateLastPaymentNxDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateTranType(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateWorkType(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateTimeType(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateCostType(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateChrgType(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateWorkOffice(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBillOffice(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateWorkTkpr(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateCurrFactor(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateIsRounding(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARType(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateLastBillNxDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBillThruDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateDaysOld(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateChkDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAgingCode1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAgingCode2(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAgingCode3(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAgingCode4(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateAgingCode5(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateReportOnDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBillsThruEndDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreatePaymentsThruEndDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateDateOfAging(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateReportCurrency(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateCurrencyDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateCurrencyType(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateRepTitle(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateRepTitle1(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateBillTkprDate(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateOrigInvAmt(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateMattBillContact(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateARMaster(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateInvMaster(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateUnpaidBOAFees(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateUnpaidBOACosts(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateUnappliedBOAFees(Me.Attributes.Count))
            Me.Attributes.Add(Me.CreateUnappliedBOACosts(Me.Attributes.Count))
        End Sub
        
        Public Overrides Function CreateMetricObject(ByVal appMgr As IAppMgr) As NextGen.Framework.Managers.ObjectMgr.IMetricObject
            Return New NextGen.Application.MetricObject.WC_MxARDaysOldByInvoice(appMgr, Me)
        End Function
        
        Protected Overrides Function CreateBindingData() As NextGen.Framework.Managers.QueryMgr.PersistentObject
            Return New NextGen.Application.MetricData.WC_MxARDaysOldByInvoice(Me.QueryInterface)
        End Function
        
        Protected Overridable Function CreateClntDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "ClntDate", ordinal, New System.Guid("d078d8b8-4f01-40e3-9ab3-dfd637aa614c"), "Client.CliDate", "ClntDateRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateMattDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "MattDate", ordinal, New System.Guid("ceb40eb1-8e45-452c-aa2a-e113654a3f6b"), "Matter.MattDate", "MattDateRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateAgingBucket(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "AgingBucket", ordinal, New System.Guid("ddfd1d1f-a2c0-4327-9aee-8df3211c59e5"), "AgingSchemeBuckets", "AgingBucketRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateLastPaymentDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric(Me, "LastPaymentDate", ordinal, New System.Guid("3713d73f-6a53-43c8-b030-3d297f7b2e8e"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateARFees(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARFees", ordinal, New System.Guid("c65afdb0-a3ea-4b97-a1e9-547513e4bb2f"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateARHardCosts(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARHardCosts", ordinal, New System.Guid("90dfdad0-a4e4-4412-b040-650b00e8ae9b"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateARSoftCosts(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARSoftCosts", ordinal, New System.Guid("f71d9d4e-30f5-4f8d-b9c6-6bd44ffc3bd3"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateArTax(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ArTax", ordinal, New System.Guid("b0bca49e-5875-49ba-b42c-90043b008800"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateARInterest(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARInterest", ordinal, New System.Guid("cfd8f2df-732b-4c04-91f4-8bee2b418e5f"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAROnAcct(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "AROnAcct", ordinal, New System.Guid("790f3edf-2d2c-406a-9740-9f549cd97999"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAROther(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "AROther", ordinal, New System.Guid("8ef3c81f-165b-4b78-bde2-053893fc26d6"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateARUnallocated(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARUnallocated", ordinal, New System.Guid("4446dda3-8f84-4239-a990-5081a68ed98b"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateARTotal(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARTotal", ordinal, New System.Guid("e59f64be-c655-4154-aab7-f351b9d97aad"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateArCosts(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ArCosts", ordinal, New System.Guid("3846224c-0664-48e3-b265-6b6066c51c9c"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateARCharges(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARCharges", ordinal, New System.Guid("c621e668-2f5a-49d0-badf-d473ab362b87"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBillTkpr(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric(Me, "BillTkpr", ordinal, New System.Guid("d694ef69-2504-468a-872d-14e8af94d0c4"), "Timekeeper", "BillTkprRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateMatter(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric(Me, "Matter", ordinal, New System.Guid("e3132075-b2a3-490c-a751-a0633fedbd7e"), "Matter", "MatterRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateARDoubtFul(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "ARDoubtFul", ordinal, New System.Guid("c3207345-9978-47f9-835b-a7b4de5b8f66"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateCurrency(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxCurrencyCodeMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxCurrencyCodeMetric(Me, "Currency", ordinal, New System.Guid("4eb23507-5035-4dfe-bfb1-55ef343614cd"), "NxCurrencyCode", "CurrencyRel")
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "Aging1", ordinal, New System.Guid("cbac8f12-b9fc-4a63-8dcf-1d0de753eb7a"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "Aging2", ordinal, New System.Guid("5212cbe2-6618-457c-861c-6b300268c52a"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "Aging3", ordinal, New System.Guid("478b5950-7a47-43d3-8338-1aae94677588"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "Aging4", ordinal, New System.Guid("0aa2057e-d2fd-4c8d-bdfd-92ecfef0f2a4"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "Aging5", ordinal, New System.Guid("3e314fb7-d38b-4890-a3a7-a6a9ed8811ab"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateFeeAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "FeeAging1", ordinal, New System.Guid("ac4ba6d8-bc7c-4ad6-9d44-8aebe9637838"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateFeeAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "FeeAging2", ordinal, New System.Guid("5262d267-1c08-42f8-994f-dbfe87e6dd05"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateFeeAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "FeeAging3", ordinal, New System.Guid("5a5aa2f8-c2d3-4609-a2b1-17f26bdac197"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateFeeAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "FeeAging4", ordinal, New System.Guid("7a544d87-c1a6-4b5f-b65f-6170816e0920"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateFeeAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "FeeAging5", ordinal, New System.Guid("c8e9a524-879d-4753-a7d3-52ce1cbb5355"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateHCoAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "HCoAging1", ordinal, New System.Guid("d69869d9-7056-4a2c-9b4b-5e6feb49d7b7"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateHCoAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "HCoAging2", ordinal, New System.Guid("6c4c19a2-6041-4ca6-bd1d-5b7a235878db"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateHCoAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "HCoAging3", ordinal, New System.Guid("d0283bf6-4401-4f23-ab2d-9aea9b597716"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateHCoAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "HCoAging4", ordinal, New System.Guid("68c108f2-c303-4aff-929c-90189de4111b"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateHCoAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "HCoAging5", ordinal, New System.Guid("45c36b51-78bf-4d20-b8c8-91a601016369"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateSCoAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "SCoAging1", ordinal, New System.Guid("fef997e1-8447-4c2e-815f-9c06e9a5294e"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateSCoAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "SCoAging2", ordinal, New System.Guid("1153a004-4b50-445e-bb25-8f809fe0c9f6"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateSCoAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "SCoAging3", ordinal, New System.Guid("a3fe6ccf-6ad3-4a09-ad01-ccf890340940"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateSCoAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "SCoAging4", ordinal, New System.Guid("a94979f9-17e0-444f-97da-9e73295da439"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateSCoAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "SCoAging5", ordinal, New System.Guid("18533c29-36ee-49b5-a56a-ad4fb854d003"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateTaxAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "TaxAging1", ordinal, New System.Guid("0a9071a8-9230-4090-b6ba-de616887291c"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateTaxAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "TaxAging2", ordinal, New System.Guid("4c54a9cc-c57b-42e1-aea0-7798e2ed2c0a"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateTaxAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "TaxAging3", ordinal, New System.Guid("13004fb4-f1f2-4ec9-9e13-742146617c2e"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateTaxAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "TaxAging4", ordinal, New System.Guid("1f482b9d-a439-4258-bd9c-66eab460f99f"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateTaxAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "TaxAging5", ordinal, New System.Guid("15ddbe0c-f1cc-4486-a11d-9da044bed46a"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateIntAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "IntAging1", ordinal, New System.Guid("143246af-e2e0-46c1-9707-3d5ac1991a9f"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateIntAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "IntAging2", ordinal, New System.Guid("27b34bae-9121-467b-8604-86fe4f47b19e"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateIntAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "IntAging3", ordinal, New System.Guid("041a7ed4-2667-484a-9f78-14a7fb99eb65"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateIntAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "IntAging4", ordinal, New System.Guid("f2a52a2a-10d9-471a-a3a1-251cd5526d17"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateIntAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "IntAging5", ordinal, New System.Guid("aa08dd90-7843-4bd6-9c2e-c887ba6d4663"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBOAAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "BOAAging1", ordinal, New System.Guid("50afe169-2a47-4a82-9b9c-b5a2f4af58e9"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBOAAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "BOAAging2", ordinal, New System.Guid("34e2f9c1-f766-48c0-a626-bcd326920e96"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBOAAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "BOAAging3", ordinal, New System.Guid("994a8871-33a8-4767-abdb-96e42d9b9bb1"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBOAAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "BOAAging4", ordinal, New System.Guid("a4420342-19ef-4558-9b4c-f44dc4b981d3"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBOAAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "BOAAging5", ordinal, New System.Guid("f1afc3ca-0330-4f91-9d46-67ee1ba5212a"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateOthAging1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "OthAging1", ordinal, New System.Guid("6ca67320-6855-473c-9aa2-5bea5856830e"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateOthAging2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "OthAging2", ordinal, New System.Guid("ce692200-64e2-44a2-98fb-1683d14b8e60"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateOthAging3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "OthAging3", ordinal, New System.Guid("308756c9-bc5a-46d4-8081-c006814e8b5e"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateOthAging4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "OthAging4", ordinal, New System.Guid("a4c679e3-ac03-49f5-b8a9-75a6236af949"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateOthAging5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "OthAging5", ordinal, New System.Guid("c37f3492-425e-4a72-a570-baf0920b1c60"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateMultiTimekeeper(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric(Me, "MultiTimekeeper", ordinal, New System.Guid("743b1126-eb06-4c6e-ac8a-2f355fad1479"), "Timekeeper", "MultiTimekeeperRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateWC_MxARDaysOldByInvoiceID(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidMetric(Me, "WC_MxARDaysOldByInvoiceID", ordinal, New System.Guid("02b416db-8ed1-4d60-87b8-e2be70f901fa"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateLastPaymentNxDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric(Me, "LastPaymentNxDate", ordinal, New System.Guid("42741694-dc3b-4139-9df2-00f263f264ac"), "NxDate", "LastPaymentNxDateRel")
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateTranType(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "TranType", ordinal, New System.Guid("bcaf6d5c-68c4-4f46-9192-f580c28db8cd"), "TransactionType", "TranTypeRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateWorkType(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "WorkType", ordinal, New System.Guid("27281205-2908-44bb-ab10-0e7fe341ef6d"), "WorkType", "WorkTypeRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateTimeType(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "TimeType", ordinal, New System.Guid("b2ef131e-2e7a-4f67-a5f2-1840c4c01afc"), "TimeType", "TimeTypeRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateCostType(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "CostType", ordinal, New System.Guid("58cb400a-efb6-4682-be2c-a3baa3511070"), "CostType", "CostTypeRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateChrgType(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "ChrgType", ordinal, New System.Guid("1a59ff9b-0af8-4635-9524-df3ed9114af1"), "ChrgType", "ChrgTypeRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateWorkOffice(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "WorkOffice", ordinal, New System.Guid("e80913c0-887c-4893-a69a-943dde535d50"), "Office", "WorkOfficeRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateBillOffice(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "BillOffice", ordinal, New System.Guid("92dbe7b5-c682-4bf4-98c4-755159304a06"), "Office", "BillOfficeRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateWorkTkpr(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "WorkTkpr", ordinal, New System.Guid("add832d9-7a43-4205-ac2e-2ebd01f1479d"), "Timekeeper.TkprDate", "WorkTkprRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateCurrFactor(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric(Me, "CurrFactor", ordinal, New System.Guid("cfbd6990-dc76-48cf-afdf-1c706f26a27d"))
            attribute.SetPrecision(20)
            attribute.SetScale(14)
            Return attribute
        End Function
        
        Protected Overridable Function CreateIsRounding(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "IsRounding", ordinal, New System.Guid("a99e0276-ef40-4c56-807e-f16ce6609d0a"), "MxTrueFalse", "IsRoundingRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateARType(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringRelationshipMetric(Me, "ARType", ordinal, New System.Guid("e7f8ca52-4b48-46dc-a6b0-e3ffd177922a"), "ARTypeList", "ARTypeRel")
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateLastBillNxDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateRelationshipMetric(Me, "LastBillNxDate", ordinal, New System.Guid("922a524c-f5e8-41c7-8600-c82f90242078"), "NxDate", "LastBillNxDateRel")
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBillThruDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric(Me, "BillThruDate", ordinal, New System.Guid("651c891d-9844-4cb8-b242-4aa8ea03e9c3"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateDaysOld(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerMetric(Me, "DaysOld", ordinal, New System.Guid("bf38eaef-fe36-476c-a363-b3b080cfae56"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateChkDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric(Me, "ChkDate", ordinal, New System.Guid("a6a5d35d-7afa-42da-8b27-267cab732c04"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateAgingCode1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "AgingCode1", ordinal, New System.Guid("bc716c9e-2579-4697-b615-f679d2ba4a5f"))
            attribute.SetLength(64)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAgingCode2(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "AgingCode2", ordinal, New System.Guid("8825aea6-d953-45c0-8d54-91cba379fa59"))
            attribute.SetLength(64)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAgingCode3(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "AgingCode3", ordinal, New System.Guid("04927ba7-11b0-4e44-b350-6114efc0efb1"))
            attribute.SetLength(64)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAgingCode4(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "AgingCode4", ordinal, New System.Guid("83c3f1f3-5dc5-4582-9a57-6a8122533e45"))
            attribute.SetLength(64)
            Return attribute
        End Function
        
        Protected Overridable Function CreateAgingCode5(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "AgingCode5", ordinal, New System.Guid("56654e50-4e7e-4fbb-b957-73531c6da557"))
            attribute.SetLength(64)
            Return attribute
        End Function
        
        Protected Overridable Function CreateReportOnDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "ReportOnDate", ordinal, New System.Guid("ea6240ec-6ddf-49f9-8a1a-b0d38932e90c"))
            attribute.SetLength(64)
            Return attribute
        End Function
        
        Protected Overridable Function CreateBillsThruEndDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric(Me, "BillsThruEndDate", ordinal, New System.Guid("17e55ddd-f783-40c9-9318-252b1b7ece4e"))
            Return attribute
        End Function
        
        Protected Overridable Function CreatePaymentsThruEndDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric(Me, "PaymentsThruEndDate", ordinal, New System.Guid("49675213-b3db-4c61-8a8e-fe9f951265ab"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateDateOfAging(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric(Me, "DateOfAging", ordinal, New System.Guid("e099019e-613e-4c0c-84ec-88409a723f22"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateReportCurrency(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "ReportCurrency", ordinal, New System.Guid("16eba4e3-e5aa-45e4-b397-4ae91ca5f6e2"))
            attribute.SetLength(64)
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateCurrencyDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDateMetric(Me, "CurrencyDate", ordinal, New System.Guid("713cc926-fcd9-40c6-a815-d8cde3e86ab2"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateCurrencyType(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxStringMetric(Me, "CurrencyType", ordinal, New System.Guid("7e0bca59-434b-466d-a19d-dfd47b3f9611"))
            attribute.SetLength(64)
            attribute.SetIsMultiline(true)
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateRepTitle(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "RepTitle", ordinal, New System.Guid("a675cab6-f8be-4601-aa77-74f028b29aa0"), "WC_MxMatterAgedARPH", "RepTitleRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateRepTitle1(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "RepTitle1", ordinal, New System.Guid("9e2c4221-8b3e-494b-a7cc-61f5947aed30"), "WC_MxMatterAgedARRH", "RepTitle1Rel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateBillTkprDate(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "BillTkprDate", ordinal, New System.Guid("55726cd7-00ef-489e-a292-cc0011f252d7"), "Timekeeper.TkprDate", "BillTkprDateRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateOrigInvAmt(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxMoneyMetric(Me, "OrigInvAmt", ordinal, New System.Guid("a67ec4cb-8945-4866-bbf3-36e9739f4788"))
            attribute.SetAllowAggregation(true)
            Return attribute
        End Function
        
        Protected Overridable Function CreateMattBillContact(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxGuidRelationshipMetric(Me, "MattBillContact", ordinal, New System.Guid("1ab93631-20f8-4434-9c2e-610c0b33df18"), "MattBillingContact", "MattBillContactRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateARMaster(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric(Me, "ARMaster", ordinal, New System.Guid("a1a0d364-e005-4535-b2df-0fc037a5a03c"), "ARMaster", "ARMasterRel1")
            Return attribute
        End Function
        
        Protected Overridable Function CreateInvMaster(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxIntegerRelationshipMetric(Me, "InvMaster", ordinal, New System.Guid("d987e203-22c8-42ab-9717-dd469194d7cd"), "InvMaster", "InvMasterRel")
            Return attribute
        End Function
        
        Protected Overridable Function CreateUnpaidBOAFees(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric(Me, "UnpaidBOAFees", ordinal, New System.Guid("45d516f9-1bdd-4fb0-bbc6-8bb69878a6f4"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateUnpaidBOACosts(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric(Me, "UnpaidBOACosts", ordinal, New System.Guid("50080654-a19d-43a1-94d0-8b2a2a96cb05"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateUnappliedBOAFees(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric(Me, "UnappliedBOAFees", ordinal, New System.Guid("347b6367-8c06-4b68-bdde-3aa1d2819b40"))
            Return attribute
        End Function
        
        Protected Overridable Function CreateUnappliedBOACosts(ByVal ordinal As Integer) As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute
            Dim attribute As NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric = New NextGen.Framework.Managers.ObjectMgr.Archetype.NxDecimalMetric(Me, "UnappliedBOACosts", ordinal, New System.Guid("b4fa2e68-95ba-47fb-9aca-e1fb3d1fcd97"))
            Return attribute
        End Function
    End Class
End Namespace

Namespace NextGen.Application.MetricQuery
    
    Public Class WC_MxARDaysOldByInvoice
        Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxMetricQuery
        
        Protected Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal arch As NextGen.Framework.Managers.ObjectMgr.Archetype.ISimpleArchetype)
            MyBase.New(parent, arch)
        End Sub
        
        Public ReadOnly Property ClntDate() As NxClntDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ClntDate.Ordinal),NxClntDate)
            End Get
        End Property
        
        Public ReadOnly Property MattDate() As NxMattDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).MattDate.Ordinal),NxMattDate)
            End Get
        End Property
        
        Public ReadOnly Property AgingBucket() As NxAgingBucket
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingBucket.Ordinal),NxAgingBucket)
            End Get
        End Property
        
        Public ReadOnly Property LastPaymentDate() As NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).LastPaymentDate.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDate)
            End Get
        End Property
        
        Public ReadOnly Property ARFees() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARFees.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ARHardCosts() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARHardCosts.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ARSoftCosts() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARSoftCosts.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ArTax() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ArTax.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ARInterest() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARInterest.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property AROnAcct() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AROnAcct.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property AROther() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AROther.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ARUnallocated() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARUnallocated.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ARTotal() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARTotal.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ArCosts() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ArCosts.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property ARCharges() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARCharges.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property BillTkpr() As NxBillTkpr
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillTkpr.Ordinal),NxBillTkpr)
            End Get
        End Property
        
        Public ReadOnly Property Matter() As NxMatter
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Matter.Ordinal),NxMatter)
            End Get
        End Property
        
        Public ReadOnly Property ARDoubtFul() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARDoubtFul.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property Currency() As NxCurrency
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Currency.Ordinal),NxCurrency)
            End Get
        End Property
        
        Public ReadOnly Property Aging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property Aging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property Aging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property Aging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property Aging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property FeeAging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property HCoAging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property SCoAging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property TaxAging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property IntAging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property IntAging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property IntAging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property IntAging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property IntAging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property BOAAging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property OthAging1() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property OthAging2() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property OthAging3() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property OthAging4() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property OthAging5() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property MultiTimekeeper() As NxMultiTimekeeper
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).MultiTimekeeper.Ordinal),NxMultiTimekeeper)
            End Get
        End Property
        
        Public ReadOnly Property WC_MxARDaysOldByInvoiceID() As NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WC_MxARDaysOldByInvoiceID.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxGuid)
            End Get
        End Property
        
        Public ReadOnly Property LastPaymentNxDate() As NxLastPaymentNxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).LastPaymentNxDate.Ordinal),NxLastPaymentNxDate)
            End Get
        End Property
        
        Public ReadOnly Property TranType() As NxTranType
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TranType.Ordinal),NxTranType)
            End Get
        End Property
        
        Public ReadOnly Property WorkType() As NxWorkType
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WorkType.Ordinal),NxWorkType)
            End Get
        End Property
        
        Public ReadOnly Property TimeType() As NxTimeType
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TimeType.Ordinal),NxTimeType)
            End Get
        End Property
        
        Public ReadOnly Property CostType() As NxCostType
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CostType.Ordinal),NxCostType)
            End Get
        End Property
        
        Public ReadOnly Property ChrgType() As NxChrgType
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ChrgType.Ordinal),NxChrgType)
            End Get
        End Property
        
        Public ReadOnly Property WorkOffice() As NxWorkOffice
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WorkOffice.Ordinal),NxWorkOffice)
            End Get
        End Property
        
        Public ReadOnly Property BillOffice() As NxBillOffice
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillOffice.Ordinal),NxBillOffice)
            End Get
        End Property
        
        Public ReadOnly Property WorkTkpr() As NxWorkTkpr
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WorkTkpr.Ordinal),NxWorkTkpr)
            End Get
        End Property
        
        Public ReadOnly Property CurrFactor() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CurrFactor.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property IsRounding() As NxIsRounding
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IsRounding.Ordinal),NxIsRounding)
            End Get
        End Property
        
        Public ReadOnly Property ARType() As NxARType
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARType.Ordinal),NxARType)
            End Get
        End Property
        
        Public ReadOnly Property LastBillNxDate() As NxLastBillNxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).LastBillNxDate.Ordinal),NxLastBillNxDate)
            End Get
        End Property
        
        Public ReadOnly Property BillThruDate() As NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillThruDate.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDate)
            End Get
        End Property
        
        Public ReadOnly Property DaysOld() As NextGen.Framework.Managers.ObjectMgr.Query.NxInteger
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).DaysOld.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxInteger)
            End Get
        End Property
        
        Public ReadOnly Property ChkDate() As NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ChkDate.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDate)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode1() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode1.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode2() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode2.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode3() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode3.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode4() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode4.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property AgingCode5() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode5.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property ReportOnDate() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ReportOnDate.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property BillsThruEndDate() As NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillsThruEndDate.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDate)
            End Get
        End Property
        
        Public ReadOnly Property PaymentsThruEndDate() As NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).PaymentsThruEndDate.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDate)
            End Get
        End Property
        
        Public ReadOnly Property DateOfAging() As NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).DateOfAging.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDate)
            End Get
        End Property
        
        Public ReadOnly Property ReportCurrency() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ReportCurrency.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property CurrencyDate() As NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CurrencyDate.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDate)
            End Get
        End Property
        
        Public ReadOnly Property CurrencyType() As NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CurrencyType.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxString)
            End Get
        End Property
        
        Public ReadOnly Property RepTitle() As NxRepTitle
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).RepTitle.Ordinal),NxRepTitle)
            End Get
        End Property
        
        Public ReadOnly Property RepTitle1() As NxRepTitle1
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).RepTitle1.Ordinal),NxRepTitle1)
            End Get
        End Property
        
        Public ReadOnly Property BillTkprDate() As NxBillTkprDate
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillTkprDate.Ordinal),NxBillTkprDate)
            End Get
        End Property
        
        Public ReadOnly Property OrigInvAmt() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OrigInvAmt.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property MattBillContact() As NxMattBillContact
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).MattBillContact.Ordinal),NxMattBillContact)
            End Get
        End Property
        
        Public ReadOnly Property ARMaster() As NxARMaster
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARMaster.Ordinal),NxARMaster)
            End Get
        End Property
        
        Public ReadOnly Property InvMaster() As NxInvMaster
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).InvMaster.Ordinal),NxInvMaster)
            End Get
        End Property
        
        Public ReadOnly Property UnpaidBOAFees() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnpaidBOAFees.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property UnpaidBOACosts() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnpaidBOACosts.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property UnappliedBOAFees() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnappliedBOAFees.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public ReadOnly Property UnappliedBOACosts() As NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal
            Get
                Return CType(Me.Attributes(CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnappliedBOACosts.Ordinal),NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal)
            End Get
        End Property
        
        Public Shadows ReadOnly Property ClntDateRel() As NextGen.Application.Query.CliDate
            Get
                Return CType(Me.ClntDate.RelatedQuery,NextGen.Application.Query.CliDate)
            End Get
        End Property
        
        Public Shadows ReadOnly Property MattDateRel() As NextGen.Application.Query.MattDate
            Get
                Return CType(Me.MattDate.RelatedQuery,NextGen.Application.Query.MattDate)
            End Get
        End Property
        
        Public Shadows ReadOnly Property AgingBucketRel() As NextGen.Application.Query.AgingSchemeBuckets
            Get
                Return CType(Me.AgingBucket.RelatedQuery,NextGen.Application.Query.AgingSchemeBuckets)
            End Get
        End Property
        
        Public Shadows ReadOnly Property BillTkprRel() As NextGen.Application.Query.Timekeeper
            Get
                Return CType(Me.BillTkpr.RelatedQuery,NextGen.Application.Query.Timekeeper)
            End Get
        End Property
        
        Public Shadows ReadOnly Property MatterRel() As NextGen.Application.Query.Matter
            Get
                Return CType(Me.Matter.RelatedQuery,NextGen.Application.Query.Matter)
            End Get
        End Property
        
        Public Shadows ReadOnly Property CurrencyRel() As NextGen.Application.Query.NxCurrencyCode
            Get
                Return CType(Me.Currency.RelatedQuery,NextGen.Application.Query.NxCurrencyCode)
            End Get
        End Property
        
        Public Shadows ReadOnly Property MultiTimekeeperRel() As NextGen.Application.Query.Timekeeper
            Get
                Return CType(Me.MultiTimekeeper.RelatedQuery,NextGen.Application.Query.Timekeeper)
            End Get
        End Property
        
        Public Shadows ReadOnly Property LastPaymentNxDateRel() As NextGen.Application.Query.NxDate
            Get
                Return CType(Me.LastPaymentNxDate.RelatedQuery,NextGen.Application.Query.NxDate)
            End Get
        End Property
        
        Public Shadows ReadOnly Property TranTypeRel() As NextGen.Application.Query.TransactionType
            Get
                Return CType(Me.TranType.RelatedQuery,NextGen.Application.Query.TransactionType)
            End Get
        End Property
        
        Public Shadows ReadOnly Property WorkTypeRel() As NextGen.Application.Query.WorkType
            Get
                Return CType(Me.WorkType.RelatedQuery,NextGen.Application.Query.WorkType)
            End Get
        End Property
        
        Public Shadows ReadOnly Property TimeTypeRel() As NextGen.Application.Query.TimeType
            Get
                Return CType(Me.TimeType.RelatedQuery,NextGen.Application.Query.TimeType)
            End Get
        End Property
        
        Public Shadows ReadOnly Property CostTypeRel() As NextGen.Application.Query.CostType
            Get
                Return CType(Me.CostType.RelatedQuery,NextGen.Application.Query.CostType)
            End Get
        End Property
        
        Public Shadows ReadOnly Property ChrgTypeRel() As NextGen.Application.Query.ChrgType
            Get
                Return CType(Me.ChrgType.RelatedQuery,NextGen.Application.Query.ChrgType)
            End Get
        End Property
        
        Public Shadows ReadOnly Property WorkOfficeRel() As NextGen.Application.Query.Office
            Get
                Return CType(Me.WorkOffice.RelatedQuery,NextGen.Application.Query.Office)
            End Get
        End Property
        
        Public Shadows ReadOnly Property BillOfficeRel() As NextGen.Application.Query.Office
            Get
                Return CType(Me.BillOffice.RelatedQuery,NextGen.Application.Query.Office)
            End Get
        End Property
        
        Public Shadows ReadOnly Property WorkTkprRel() As NextGen.Application.Query.TkprDate
            Get
                Return CType(Me.WorkTkpr.RelatedQuery,NextGen.Application.Query.TkprDate)
            End Get
        End Property
        
        Public Shadows ReadOnly Property IsRoundingRel() As NextGen.Application.Query.MxTrueFalse
            Get
                Return CType(Me.IsRounding.RelatedQuery,NextGen.Application.Query.MxTrueFalse)
            End Get
        End Property
        
        Public Shadows ReadOnly Property ARTypeRel() As NextGen.Application.Query.ARTypeList
            Get
                Return CType(Me.ARType.RelatedQuery,NextGen.Application.Query.ARTypeList)
            End Get
        End Property
        
        Public Shadows ReadOnly Property LastBillNxDateRel() As NextGen.Application.Query.NxDate
            Get
                Return CType(Me.LastBillNxDate.RelatedQuery,NextGen.Application.Query.NxDate)
            End Get
        End Property
        
        Public Shadows ReadOnly Property RepTitleRel() As NextGen.Application.Query.WC_MxMatterAgedARPH
            Get
                Return CType(Me.RepTitle.RelatedQuery,NextGen.Application.Query.WC_MxMatterAgedARPH)
            End Get
        End Property
        
        Public Shadows ReadOnly Property RepTitle1Rel() As NextGen.Application.Query.WC_MxMatterAgedARRH
            Get
                Return CType(Me.RepTitle1.RelatedQuery,NextGen.Application.Query.WC_MxMatterAgedARRH)
            End Get
        End Property
        
        Public Shadows ReadOnly Property BillTkprDateRel() As NextGen.Application.Query.TkprDate
            Get
                Return CType(Me.BillTkprDate.RelatedQuery,NextGen.Application.Query.TkprDate)
            End Get
        End Property
        
        Public Shadows ReadOnly Property MattBillContactRel() As NextGen.Application.Query.MattBillingContact
            Get
                Return CType(Me.MattBillContact.RelatedQuery,NextGen.Application.Query.MattBillingContact)
            End Get
        End Property
        
        Public Shadows ReadOnly Property ARMasterRel1() As NextGen.Application.Query.ARMaster
            Get
                Return CType(Me.ARMaster.RelatedQuery,NextGen.Application.Query.ARMaster)
            End Get
        End Property
        
        Public Shadows ReadOnly Property InvMasterRel() As NextGen.Application.Query.InvMaster
            Get
                Return CType(Me.InvMaster.RelatedQuery,NextGen.Application.Query.InvMaster)
            End Get
        End Property
        
        <ComponentModel.EditorBrowsableAttribute(ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend Shared Function Create(ByVal arch As NextGen.Framework.Managers.ObjectMgr.Archetype.ISimpleArchetype) As NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice
            Dim qry As NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice = New NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice(Nothing, arch)
            qry.Initialize
            Return qry
        End Function
        
        <ComponentModel.EditorBrowsableAttribute(ComponentModel.EditorBrowsableState.Advanced)>  _
        Protected Overrides Function NewInstance() As OQLObject
            Dim qry As NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice = New NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice(Nothing, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice))
            qry.Initialize
            Return qry
        End Function
        
        Protected Overrides Sub Initialize()
            MyBase.Initialize
            Me.Attributes.Add(Me.CreateClntDate)
            Me.Attributes.Add(Me.CreateMattDate)
            Me.Attributes.Add(Me.CreateAgingBucket)
            Me.Attributes.Add(Me.CreateLastPaymentDate)
            Me.Attributes.Add(Me.CreateARFees)
            Me.Attributes.Add(Me.CreateARHardCosts)
            Me.Attributes.Add(Me.CreateARSoftCosts)
            Me.Attributes.Add(Me.CreateArTax)
            Me.Attributes.Add(Me.CreateARInterest)
            Me.Attributes.Add(Me.CreateAROnAcct)
            Me.Attributes.Add(Me.CreateAROther)
            Me.Attributes.Add(Me.CreateARUnallocated)
            Me.Attributes.Add(Me.CreateARTotal)
            Me.Attributes.Add(Me.CreateArCosts)
            Me.Attributes.Add(Me.CreateARCharges)
            Me.Attributes.Add(Me.CreateBillTkpr)
            Me.Attributes.Add(Me.CreateMatter)
            Me.Attributes.Add(Me.CreateARDoubtFul)
            Me.Attributes.Add(Me.CreateCurrency)
            Me.Attributes.Add(Me.CreateAging1)
            Me.Attributes.Add(Me.CreateAging2)
            Me.Attributes.Add(Me.CreateAging3)
            Me.Attributes.Add(Me.CreateAging4)
            Me.Attributes.Add(Me.CreateAging5)
            Me.Attributes.Add(Me.CreateFeeAging1)
            Me.Attributes.Add(Me.CreateFeeAging2)
            Me.Attributes.Add(Me.CreateFeeAging3)
            Me.Attributes.Add(Me.CreateFeeAging4)
            Me.Attributes.Add(Me.CreateFeeAging5)
            Me.Attributes.Add(Me.CreateHCoAging1)
            Me.Attributes.Add(Me.CreateHCoAging2)
            Me.Attributes.Add(Me.CreateHCoAging3)
            Me.Attributes.Add(Me.CreateHCoAging4)
            Me.Attributes.Add(Me.CreateHCoAging5)
            Me.Attributes.Add(Me.CreateSCoAging1)
            Me.Attributes.Add(Me.CreateSCoAging2)
            Me.Attributes.Add(Me.CreateSCoAging3)
            Me.Attributes.Add(Me.CreateSCoAging4)
            Me.Attributes.Add(Me.CreateSCoAging5)
            Me.Attributes.Add(Me.CreateTaxAging1)
            Me.Attributes.Add(Me.CreateTaxAging2)
            Me.Attributes.Add(Me.CreateTaxAging3)
            Me.Attributes.Add(Me.CreateTaxAging4)
            Me.Attributes.Add(Me.CreateTaxAging5)
            Me.Attributes.Add(Me.CreateIntAging1)
            Me.Attributes.Add(Me.CreateIntAging2)
            Me.Attributes.Add(Me.CreateIntAging3)
            Me.Attributes.Add(Me.CreateIntAging4)
            Me.Attributes.Add(Me.CreateIntAging5)
            Me.Attributes.Add(Me.CreateBOAAging1)
            Me.Attributes.Add(Me.CreateBOAAging2)
            Me.Attributes.Add(Me.CreateBOAAging3)
            Me.Attributes.Add(Me.CreateBOAAging4)
            Me.Attributes.Add(Me.CreateBOAAging5)
            Me.Attributes.Add(Me.CreateOthAging1)
            Me.Attributes.Add(Me.CreateOthAging2)
            Me.Attributes.Add(Me.CreateOthAging3)
            Me.Attributes.Add(Me.CreateOthAging4)
            Me.Attributes.Add(Me.CreateOthAging5)
            Me.Attributes.Add(Me.CreateMultiTimekeeper)
            Me.Attributes.Add(Me.CreateWC_MxARDaysOldByInvoiceID)
            Me.Attributes.Add(Me.CreateLastPaymentNxDate)
            Me.Attributes.Add(Me.CreateTranType)
            Me.Attributes.Add(Me.CreateWorkType)
            Me.Attributes.Add(Me.CreateTimeType)
            Me.Attributes.Add(Me.CreateCostType)
            Me.Attributes.Add(Me.CreateChrgType)
            Me.Attributes.Add(Me.CreateWorkOffice)
            Me.Attributes.Add(Me.CreateBillOffice)
            Me.Attributes.Add(Me.CreateWorkTkpr)
            Me.Attributes.Add(Me.CreateCurrFactor)
            Me.Attributes.Add(Me.CreateIsRounding)
            Me.Attributes.Add(Me.CreateARType)
            Me.Attributes.Add(Me.CreateLastBillNxDate)
            Me.Attributes.Add(Me.CreateBillThruDate)
            Me.Attributes.Add(Me.CreateDaysOld)
            Me.Attributes.Add(Me.CreateChkDate)
            Me.Attributes.Add(Me.CreateAgingCode1)
            Me.Attributes.Add(Me.CreateAgingCode2)
            Me.Attributes.Add(Me.CreateAgingCode3)
            Me.Attributes.Add(Me.CreateAgingCode4)
            Me.Attributes.Add(Me.CreateAgingCode5)
            Me.Attributes.Add(Me.CreateReportOnDate)
            Me.Attributes.Add(Me.CreateBillsThruEndDate)
            Me.Attributes.Add(Me.CreatePaymentsThruEndDate)
            Me.Attributes.Add(Me.CreateDateOfAging)
            Me.Attributes.Add(Me.CreateReportCurrency)
            Me.Attributes.Add(Me.CreateCurrencyDate)
            Me.Attributes.Add(Me.CreateCurrencyType)
            Me.Attributes.Add(Me.CreateRepTitle)
            Me.Attributes.Add(Me.CreateRepTitle1)
            Me.Attributes.Add(Me.CreateBillTkprDate)
            Me.Attributes.Add(Me.CreateOrigInvAmt)
            Me.Attributes.Add(Me.CreateMattBillContact)
            Me.Attributes.Add(Me.CreateARMaster)
            Me.Attributes.Add(Me.CreateInvMaster)
            Me.Attributes.Add(Me.CreateUnpaidBOAFees)
            Me.Attributes.Add(Me.CreateUnpaidBOACosts)
            Me.Attributes.Add(Me.CreateUnappliedBOAFees)
            Me.Attributes.Add(Me.CreateUnappliedBOACosts)
        End Sub
        
        Protected Overridable Function CreateClntDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxClntDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ClntDate)
        End Function
        
        Protected Overridable Function CreateMattDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxMattDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).MattDate)
        End Function
        
        Protected Overridable Function CreateAgingBucket() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxAgingBucket(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingBucket)
        End Function
        
        Protected Overridable Function CreateLastPaymentDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).LastPaymentDate)
        End Function
        
        Protected Overridable Function CreateARFees() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARFees)
        End Function
        
        Protected Overridable Function CreateARHardCosts() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARHardCosts)
        End Function
        
        Protected Overridable Function CreateARSoftCosts() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARSoftCosts)
        End Function
        
        Protected Overridable Function CreateArTax() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ArTax)
        End Function
        
        Protected Overridable Function CreateARInterest() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARInterest)
        End Function
        
        Protected Overridable Function CreateAROnAcct() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AROnAcct)
        End Function
        
        Protected Overridable Function CreateAROther() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AROther)
        End Function
        
        Protected Overridable Function CreateARUnallocated() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARUnallocated)
        End Function
        
        Protected Overridable Function CreateARTotal() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARTotal)
        End Function
        
        Protected Overridable Function CreateArCosts() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ArCosts)
        End Function
        
        Protected Overridable Function CreateARCharges() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARCharges)
        End Function
        
        Protected Overridable Function CreateBillTkpr() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxBillTkpr(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillTkpr)
        End Function
        
        Protected Overridable Function CreateMatter() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxMatter(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Matter)
        End Function
        
        Protected Overridable Function CreateARDoubtFul() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARDoubtFul)
        End Function
        
        Protected Overridable Function CreateCurrency() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxCurrency(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Currency)
        End Function
        
        Protected Overridable Function CreateAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging1)
        End Function
        
        Protected Overridable Function CreateAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging2)
        End Function
        
        Protected Overridable Function CreateAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging3)
        End Function
        
        Protected Overridable Function CreateAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging4)
        End Function
        
        Protected Overridable Function CreateAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).Aging5)
        End Function
        
        Protected Overridable Function CreateFeeAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging1)
        End Function
        
        Protected Overridable Function CreateFeeAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging2)
        End Function
        
        Protected Overridable Function CreateFeeAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging3)
        End Function
        
        Protected Overridable Function CreateFeeAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging4)
        End Function
        
        Protected Overridable Function CreateFeeAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).FeeAging5)
        End Function
        
        Protected Overridable Function CreateHCoAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging1)
        End Function
        
        Protected Overridable Function CreateHCoAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging2)
        End Function
        
        Protected Overridable Function CreateHCoAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging3)
        End Function
        
        Protected Overridable Function CreateHCoAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging4)
        End Function
        
        Protected Overridable Function CreateHCoAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).HCoAging5)
        End Function
        
        Protected Overridable Function CreateSCoAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging1)
        End Function
        
        Protected Overridable Function CreateSCoAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging2)
        End Function
        
        Protected Overridable Function CreateSCoAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging3)
        End Function
        
        Protected Overridable Function CreateSCoAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging4)
        End Function
        
        Protected Overridable Function CreateSCoAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).SCoAging5)
        End Function
        
        Protected Overridable Function CreateTaxAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging1)
        End Function
        
        Protected Overridable Function CreateTaxAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging2)
        End Function
        
        Protected Overridable Function CreateTaxAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging3)
        End Function
        
        Protected Overridable Function CreateTaxAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging4)
        End Function
        
        Protected Overridable Function CreateTaxAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TaxAging5)
        End Function
        
        Protected Overridable Function CreateIntAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging1)
        End Function
        
        Protected Overridable Function CreateIntAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging2)
        End Function
        
        Protected Overridable Function CreateIntAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging3)
        End Function
        
        Protected Overridable Function CreateIntAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging4)
        End Function
        
        Protected Overridable Function CreateIntAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IntAging5)
        End Function
        
        Protected Overridable Function CreateBOAAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging1)
        End Function
        
        Protected Overridable Function CreateBOAAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging2)
        End Function
        
        Protected Overridable Function CreateBOAAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging3)
        End Function
        
        Protected Overridable Function CreateBOAAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging4)
        End Function
        
        Protected Overridable Function CreateBOAAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BOAAging5)
        End Function
        
        Protected Overridable Function CreateOthAging1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging1)
        End Function
        
        Protected Overridable Function CreateOthAging2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging2)
        End Function
        
        Protected Overridable Function CreateOthAging3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging3)
        End Function
        
        Protected Overridable Function CreateOthAging4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging4)
        End Function
        
        Protected Overridable Function CreateOthAging5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OthAging5)
        End Function
        
        Protected Overridable Function CreateMultiTimekeeper() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxMultiTimekeeper(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).MultiTimekeeper)
        End Function
        
        Protected Overridable Function CreateWC_MxARDaysOldByInvoiceID() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxGuid(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WC_MxARDaysOldByInvoiceID)
        End Function
        
        Protected Overridable Function CreateLastPaymentNxDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxLastPaymentNxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).LastPaymentNxDate)
        End Function
        
        Protected Overridable Function CreateTranType() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxTranType(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TranType)
        End Function
        
        Protected Overridable Function CreateWorkType() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxWorkType(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WorkType)
        End Function
        
        Protected Overridable Function CreateTimeType() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxTimeType(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).TimeType)
        End Function
        
        Protected Overridable Function CreateCostType() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxCostType(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CostType)
        End Function
        
        Protected Overridable Function CreateChrgType() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxChrgType(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ChrgType)
        End Function
        
        Protected Overridable Function CreateWorkOffice() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxWorkOffice(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WorkOffice)
        End Function
        
        Protected Overridable Function CreateBillOffice() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxBillOffice(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillOffice)
        End Function
        
        Protected Overridable Function CreateWorkTkpr() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxWorkTkpr(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).WorkTkpr)
        End Function
        
        Protected Overridable Function CreateCurrFactor() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CurrFactor)
        End Function
        
        Protected Overridable Function CreateIsRounding() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxIsRounding(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).IsRounding)
        End Function
        
        Protected Overridable Function CreateARType() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxARType(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARType)
        End Function
        
        Protected Overridable Function CreateLastBillNxDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxLastBillNxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).LastBillNxDate)
        End Function
        
        Protected Overridable Function CreateBillThruDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillThruDate)
        End Function
        
        Protected Overridable Function CreateDaysOld() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxInteger(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).DaysOld)
        End Function
        
        Protected Overridable Function CreateChkDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ChkDate)
        End Function
        
        Protected Overridable Function CreateAgingCode1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode1)
        End Function
        
        Protected Overridable Function CreateAgingCode2() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode2)
        End Function
        
        Protected Overridable Function CreateAgingCode3() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode3)
        End Function
        
        Protected Overridable Function CreateAgingCode4() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode4)
        End Function
        
        Protected Overridable Function CreateAgingCode5() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).AgingCode5)
        End Function
        
        Protected Overridable Function CreateReportOnDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ReportOnDate)
        End Function
        
        Protected Overridable Function CreateBillsThruEndDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillsThruEndDate)
        End Function
        
        Protected Overridable Function CreatePaymentsThruEndDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).PaymentsThruEndDate)
        End Function
        
        Protected Overridable Function CreateDateOfAging() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).DateOfAging)
        End Function
        
        Protected Overridable Function CreateReportCurrency() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ReportCurrency)
        End Function
        
        Protected Overridable Function CreateCurrencyDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CurrencyDate)
        End Function
        
        Protected Overridable Function CreateCurrencyType() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxString(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).CurrencyType)
        End Function
        
        Protected Overridable Function CreateRepTitle() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxRepTitle(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).RepTitle)
        End Function
        
        Protected Overridable Function CreateRepTitle1() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxRepTitle1(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).RepTitle1)
        End Function
        
        Protected Overridable Function CreateBillTkprDate() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxBillTkprDate(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).BillTkprDate)
        End Function
        
        Protected Overridable Function CreateOrigInvAmt() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).OrigInvAmt)
        End Function
        
        Protected Overridable Function CreateMattBillContact() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxMattBillContact(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).MattBillContact)
        End Function
        
        Protected Overridable Function CreateARMaster() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxARMaster(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).ARMaster)
        End Function
        
        Protected Overridable Function CreateInvMaster() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NxInvMaster(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).InvMaster)
        End Function
        
        Protected Overridable Function CreateUnpaidBOAFees() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnpaidBOAFees)
        End Function
        
        Protected Overridable Function CreateUnpaidBOACosts() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnpaidBOACosts)
        End Function
        
        Protected Overridable Function CreateUnappliedBOAFees() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnappliedBOAFees)
        End Function
        
        Protected Overridable Function CreateUnappliedBOACosts() As NextGen.Framework.Managers.ObjectMgr.Query.IAttribute
            Return New NextGen.Framework.Managers.ObjectMgr.Query.NxDecimal(Me, CType(Me.GetArchetype,NextGen.Application.MetricArchetype.WC_MxARDaysOldByInvoice).UnappliedBOACosts)
        End Function
        
        Public Class NxClntDate
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Client.CliDate", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxMattDate
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Matter.MattDate", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxAgingBucket
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("AgingSchemeBuckets", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxBillTkpr
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxInteger
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Timekeeper", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxMatter
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxInteger
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Matter", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxCurrency
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("NxCurrencyCode", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxMultiTimekeeper
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxInteger
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Timekeeper", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxLastPaymentNxDate
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("NxDate", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxTranType
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("TransactionType", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxWorkType
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("WorkType", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxTimeType
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("TimeType", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxCostType
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("CostType", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxChrgType
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("ChrgType", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxWorkOffice
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Office", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxBillOffice
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Office", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxWorkTkpr
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Timekeeper.TkprDate", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxIsRounding
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("MxTrueFalse", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxARType
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxString
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("ARTypeList", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxLastBillNxDate
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxDate
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("NxDate", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxRepTitle
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("WC_MxMatterAgedARPH", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxRepTitle1
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("WC_MxMatterAgedARRH", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxBillTkprDate
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("Timekeeper.TkprDate", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxMattBillContact
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxGuid
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("MattBillingContact", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxARMaster
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxInteger
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("ARMaster", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
        
        Public Class NxInvMaster
            Inherits NextGen.Framework.Managers.ObjectMgr.Query.NxInteger
            Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute
            
            Private __relatedQuery As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            
            Public Sub New(ByVal parent As NextGen.Framework.Managers.ObjectMgr.Query.IQuery, ByVal attrib As NextGen.Framework.Managers.ObjectMgr.Archetype.IAttribute)
                MyBase.New(parent, attrib)
            End Sub
            
            Public ReadOnly Property RelatedQuery() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery Implements NextGen.Framework.Managers.ObjectMgr.Query.IRelationshipAttribute.RelatedQuery
                Get
                    If (Me.__relatedQuery Is Nothing) Then
                        System.Threading.Monitor.Enter(Me)
                        Try 
                            If (Me.__relatedQuery Is Nothing) Then
                                Me.__relatedQuery = NextGen.Framework.Managers.AssemblyMgr.NxAssemblyMgr.GetQueryInterface("InvMaster", Me)
                            End If
                        Finally
                            System.Threading.Monitor.Exit(Me)
                        End Try
                    End If
                    Return Me.__relatedQuery
                End Get
            End Property
        End Class
    End Class
End Namespace

Namespace NextGen.Application.MetricData
    
    Public Class WC_MxARDaysOldByInvoice
        Inherits NextGen.Framework.Managers.ObjectMgr.NxQueryData
        
        Private __query As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
        
        Public ClntDate As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public MattDate As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public AgingBucket As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public LastPaymentDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public ARFees As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ARHardCosts As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ARSoftCosts As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ArTax As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ARInterest As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public AROnAcct As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public AROther As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ARUnallocated As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ARTotal As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ArCosts As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public ARCharges As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public BillTkpr As NextGen.Framework.Managers.ObjectMgr.NxIntegerValue = New NextGen.Framework.Managers.ObjectMgr.NxIntegerValue(Nothing)
        
        Public Matter As NextGen.Framework.Managers.ObjectMgr.NxIntegerValue = New NextGen.Framework.Managers.ObjectMgr.NxIntegerValue(Nothing)
        
        Public ARDoubtFul As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public Currency As NextGen.Framework.Managers.ObjectMgr.NxCurrencyCodeValue = New NextGen.Framework.Managers.ObjectMgr.NxCurrencyCodeValue(Nothing)
        
        Public Aging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public Aging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public Aging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public Aging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public Aging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public FeeAging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public FeeAging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public FeeAging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public FeeAging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public FeeAging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public HCoAging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public HCoAging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public HCoAging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public HCoAging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public HCoAging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public SCoAging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public SCoAging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public SCoAging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public SCoAging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public SCoAging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public TaxAging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public TaxAging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public TaxAging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public TaxAging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public TaxAging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public IntAging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public IntAging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public IntAging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public IntAging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public IntAging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public BOAAging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public BOAAging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public BOAAging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public BOAAging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public BOAAging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public OthAging1 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public OthAging2 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public OthAging3 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public OthAging4 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public OthAging5 As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public MultiTimekeeper As NextGen.Framework.Managers.ObjectMgr.NxIntegerValue = New NextGen.Framework.Managers.ObjectMgr.NxIntegerValue(Nothing)
        
        Public WC_MxARDaysOldByInvoiceID As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public LastPaymentNxDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public TranType As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public WorkType As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public TimeType As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public CostType As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public ChrgType As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public WorkOffice As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public BillOffice As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public WorkTkpr As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public CurrFactor As NextGen.Framework.Managers.ObjectMgr.NxDecimalValue = New NextGen.Framework.Managers.ObjectMgr.NxDecimalValue(Nothing)
        
        Public IsRounding As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public ARType As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public LastBillNxDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public BillThruDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public DaysOld As NextGen.Framework.Managers.ObjectMgr.NxIntegerValue = New NextGen.Framework.Managers.ObjectMgr.NxIntegerValue(Nothing)
        
        Public ChkDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public AgingCode1 As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public AgingCode2 As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public AgingCode3 As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public AgingCode4 As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public AgingCode5 As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public ReportOnDate As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public BillsThruEndDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public PaymentsThruEndDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public DateOfAging As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public ReportCurrency As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public CurrencyDate As NextGen.Framework.Managers.ObjectMgr.NxDateValue = New NextGen.Framework.Managers.ObjectMgr.NxDateValue(Nothing)
        
        Public CurrencyType As NextGen.Framework.Managers.ObjectMgr.NxStringValue = New NextGen.Framework.Managers.ObjectMgr.NxStringValue(Nothing)
        
        Public RepTitle As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public RepTitle1 As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public BillTkprDate As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public OrigInvAmt As NextGen.Framework.Managers.ObjectMgr.NxMoneyValue = New NextGen.Framework.Managers.ObjectMgr.NxMoneyValue(Nothing)
        
        Public MattBillContact As NextGen.Framework.Managers.ObjectMgr.NxGuidValue = New NextGen.Framework.Managers.ObjectMgr.NxGuidValue(Nothing)
        
        Public ARMaster As NextGen.Framework.Managers.ObjectMgr.NxIntegerValue = New NextGen.Framework.Managers.ObjectMgr.NxIntegerValue(Nothing)
        
        Public InvMaster As NextGen.Framework.Managers.ObjectMgr.NxIntegerValue = New NextGen.Framework.Managers.ObjectMgr.NxIntegerValue(Nothing)
        
        Public UnpaidBOAFees As NextGen.Framework.Managers.ObjectMgr.NxDecimalValue = New NextGen.Framework.Managers.ObjectMgr.NxDecimalValue(Nothing)
        
        Public UnpaidBOACosts As NextGen.Framework.Managers.ObjectMgr.NxDecimalValue = New NextGen.Framework.Managers.ObjectMgr.NxDecimalValue(Nothing)
        
        Public UnappliedBOAFees As NextGen.Framework.Managers.ObjectMgr.NxDecimalValue = New NextGen.Framework.Managers.ObjectMgr.NxDecimalValue(Nothing)
        
        Public UnappliedBOACosts As NextGen.Framework.Managers.ObjectMgr.NxDecimalValue = New NextGen.Framework.Managers.ObjectMgr.NxDecimalValue(Nothing)
        
        Public ClntDateRel As NextGen.Application.Data.CliDate = Nothing
        
        Public MattDateRel As NextGen.Application.Data.MattDate = Nothing
        
        Public AgingBucketRel As NextGen.Application.Data.AgingSchemeBuckets = Nothing
        
        Public BillTkprRel As NextGen.Application.Data.Timekeeper = Nothing
        
        Public MatterRel As NextGen.Application.Data.Matter = Nothing
        
        Public CurrencyRel As NextGen.Application.Data.NxCurrencyCode = Nothing
        
        Public MultiTimekeeperRel As NextGen.Application.Data.Timekeeper = Nothing
        
        Public LastPaymentNxDateRel As NextGen.Application.Data.NxDate = Nothing
        
        Public TranTypeRel As NextGen.Application.Data.TransactionType = Nothing
        
        Public WorkTypeRel As NextGen.Application.Data.WorkType = Nothing
        
        Public TimeTypeRel As NextGen.Application.Data.TimeType = Nothing
        
        Public CostTypeRel As NextGen.Application.Data.CostType = Nothing
        
        Public ChrgTypeRel As NextGen.Application.Data.ChrgType = Nothing
        
        Public WorkOfficeRel As NextGen.Application.Data.Office = Nothing
        
        Public BillOfficeRel As NextGen.Application.Data.Office = Nothing
        
        Public WorkTkprRel As NextGen.Application.Data.TkprDate = Nothing
        
        Public IsRoundingRel As NextGen.Application.Data.MxTrueFalse = Nothing
        
        Public ARTypeRel As NextGen.Application.Data.ARTypeList = Nothing
        
        Public LastBillNxDateRel As NextGen.Application.Data.NxDate = Nothing
        
        Public RepTitleRel As NextGen.Application.Data.WC_MxMatterAgedARPH = Nothing
        
        Public RepTitle1Rel As NextGen.Application.Data.WC_MxMatterAgedARRH = Nothing
        
        Public BillTkprDateRel As NextGen.Application.Data.TkprDate = Nothing
        
        Public MattBillContactRel As NextGen.Application.Data.MattBillingContact = Nothing
        
        Public ARMasterRel1 As NextGen.Application.Data.ARMaster = Nothing
        
        Public InvMasterRel As NextGen.Application.Data.InvMaster = Nothing
        
        Public Sub New(ByVal queryNode As NextGen.Framework.Managers.ObjectMgr.Query.IQuery)
            MyBase.New
            Me.__query = queryNode
            Dim node As NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice = CType(Me.QueryNode,NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice)
            Me.SetField(node.ClntDate, Me.ClntDate)
            Me.SetField(node.MattDate, Me.MattDate)
            Me.SetField(node.AgingBucket, Me.AgingBucket)
            Me.SetField(node.LastPaymentDate, Me.LastPaymentDate)
            Me.SetField(node.ARFees, Me.ARFees)
            Me.SetField(node.ARHardCosts, Me.ARHardCosts)
            Me.SetField(node.ARSoftCosts, Me.ARSoftCosts)
            Me.SetField(node.ArTax, Me.ArTax)
            Me.SetField(node.ARInterest, Me.ARInterest)
            Me.SetField(node.AROnAcct, Me.AROnAcct)
            Me.SetField(node.AROther, Me.AROther)
            Me.SetField(node.ARUnallocated, Me.ARUnallocated)
            Me.SetField(node.ARTotal, Me.ARTotal)
            Me.SetField(node.ArCosts, Me.ArCosts)
            Me.SetField(node.ARCharges, Me.ARCharges)
            Me.SetField(node.BillTkpr, Me.BillTkpr)
            Me.SetField(node.Matter, Me.Matter)
            Me.SetField(node.ARDoubtFul, Me.ARDoubtFul)
            Me.SetField(node.Currency, Me.Currency)
            Me.SetField(node.Aging1, Me.Aging1)
            Me.SetField(node.Aging2, Me.Aging2)
            Me.SetField(node.Aging3, Me.Aging3)
            Me.SetField(node.Aging4, Me.Aging4)
            Me.SetField(node.Aging5, Me.Aging5)
            Me.SetField(node.FeeAging1, Me.FeeAging1)
            Me.SetField(node.FeeAging2, Me.FeeAging2)
            Me.SetField(node.FeeAging3, Me.FeeAging3)
            Me.SetField(node.FeeAging4, Me.FeeAging4)
            Me.SetField(node.FeeAging5, Me.FeeAging5)
            Me.SetField(node.HCoAging1, Me.HCoAging1)
            Me.SetField(node.HCoAging2, Me.HCoAging2)
            Me.SetField(node.HCoAging3, Me.HCoAging3)
            Me.SetField(node.HCoAging4, Me.HCoAging4)
            Me.SetField(node.HCoAging5, Me.HCoAging5)
            Me.SetField(node.SCoAging1, Me.SCoAging1)
            Me.SetField(node.SCoAging2, Me.SCoAging2)
            Me.SetField(node.SCoAging3, Me.SCoAging3)
            Me.SetField(node.SCoAging4, Me.SCoAging4)
            Me.SetField(node.SCoAging5, Me.SCoAging5)
            Me.SetField(node.TaxAging1, Me.TaxAging1)
            Me.SetField(node.TaxAging2, Me.TaxAging2)
            Me.SetField(node.TaxAging3, Me.TaxAging3)
            Me.SetField(node.TaxAging4, Me.TaxAging4)
            Me.SetField(node.TaxAging5, Me.TaxAging5)
            Me.SetField(node.IntAging1, Me.IntAging1)
            Me.SetField(node.IntAging2, Me.IntAging2)
            Me.SetField(node.IntAging3, Me.IntAging3)
            Me.SetField(node.IntAging4, Me.IntAging4)
            Me.SetField(node.IntAging5, Me.IntAging5)
            Me.SetField(node.BOAAging1, Me.BOAAging1)
            Me.SetField(node.BOAAging2, Me.BOAAging2)
            Me.SetField(node.BOAAging3, Me.BOAAging3)
            Me.SetField(node.BOAAging4, Me.BOAAging4)
            Me.SetField(node.BOAAging5, Me.BOAAging5)
            Me.SetField(node.OthAging1, Me.OthAging1)
            Me.SetField(node.OthAging2, Me.OthAging2)
            Me.SetField(node.OthAging3, Me.OthAging3)
            Me.SetField(node.OthAging4, Me.OthAging4)
            Me.SetField(node.OthAging5, Me.OthAging5)
            Me.SetField(node.MultiTimekeeper, Me.MultiTimekeeper)
            Me.SetField(node.WC_MxARDaysOldByInvoiceID, Me.WC_MxARDaysOldByInvoiceID)
            Me.SetField(node.LastPaymentNxDate, Me.LastPaymentNxDate)
            Me.SetField(node.TranType, Me.TranType)
            Me.SetField(node.WorkType, Me.WorkType)
            Me.SetField(node.TimeType, Me.TimeType)
            Me.SetField(node.CostType, Me.CostType)
            Me.SetField(node.ChrgType, Me.ChrgType)
            Me.SetField(node.WorkOffice, Me.WorkOffice)
            Me.SetField(node.BillOffice, Me.BillOffice)
            Me.SetField(node.WorkTkpr, Me.WorkTkpr)
            Me.SetField(node.CurrFactor, Me.CurrFactor)
            Me.SetField(node.IsRounding, Me.IsRounding)
            Me.SetField(node.ARType, Me.ARType)
            Me.SetField(node.LastBillNxDate, Me.LastBillNxDate)
            Me.SetField(node.BillThruDate, Me.BillThruDate)
            Me.SetField(node.DaysOld, Me.DaysOld)
            Me.SetField(node.ChkDate, Me.ChkDate)
            Me.SetField(node.AgingCode1, Me.AgingCode1)
            Me.SetField(node.AgingCode2, Me.AgingCode2)
            Me.SetField(node.AgingCode3, Me.AgingCode3)
            Me.SetField(node.AgingCode4, Me.AgingCode4)
            Me.SetField(node.AgingCode5, Me.AgingCode5)
            Me.SetField(node.ReportOnDate, Me.ReportOnDate)
            Me.SetField(node.BillsThruEndDate, Me.BillsThruEndDate)
            Me.SetField(node.PaymentsThruEndDate, Me.PaymentsThruEndDate)
            Me.SetField(node.DateOfAging, Me.DateOfAging)
            Me.SetField(node.ReportCurrency, Me.ReportCurrency)
            Me.SetField(node.CurrencyDate, Me.CurrencyDate)
            Me.SetField(node.CurrencyType, Me.CurrencyType)
            Me.SetField(node.RepTitle, Me.RepTitle)
            Me.SetField(node.RepTitle1, Me.RepTitle1)
            Me.SetField(node.BillTkprDate, Me.BillTkprDate)
            Me.SetField(node.OrigInvAmt, Me.OrigInvAmt)
            Me.SetField(node.MattBillContact, Me.MattBillContact)
            Me.SetField(node.ARMaster, Me.ARMaster)
            Me.SetField(node.InvMaster, Me.InvMaster)
            Me.SetField(node.UnpaidBOAFees, Me.UnpaidBOAFees)
            Me.SetField(node.UnpaidBOACosts, Me.UnpaidBOACosts)
            Me.SetField(node.UnappliedBOAFees, Me.UnappliedBOAFees)
            Me.SetField(node.UnappliedBOACosts, Me.UnappliedBOACosts)
        End Sub
        
        Protected Overrides ReadOnly Property QueryNode() As NextGen.Framework.Managers.ObjectMgr.Query.IQuery
            Get
                Return Me.__query
            End Get
        End Property
    End Class
End Namespace

Namespace NextGen.Application.MetricObject
    
    Partial Public Class WC_MxARDaysOldByInvoice
        Inherits NextGen.Framework.Managers.ObjectMgr.NxMetricObject
        
        Public Sub New(ByVal appMgr As IAppMgr, ByVal arch As NextGen.Framework.Managers.ObjectMgr.Archetype.IMetricArchetype)
            MyBase.New(appMgr, arch)
        End Sub
        
        Public Shadows ReadOnly Property QueryNode() As NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice
            Get
                Return CType(Me.Archetype.QueryInterface,NextGen.Application.MetricQuery.WC_MxARDaysOldByInvoice)
            End Get
        End Property
        
        Public Shadows ReadOnly Property RunArchetype() As NextGen.Application.Archetype.WC_MxARDaysOldByInvoiceRun
            Get
                Return CType(MyBase.RunArchetype,NextGen.Application.Archetype.WC_MxARDaysOldByInvoiceRun)
            End Get
        End Property
        
        Public Shadows ReadOnly Property RunParameters() As NextGen.Application.Data.WC_MxARDaysOldByInvoiceRun
            Get
                Return CType(MyBase.RunParameters,NextGen.Application.Data.WC_MxARDaysOldByInvoiceRun)
            End Get
        End Property
        
        Public Shadows ReadOnly Property Parameters() As NextGen.Application.DataObject.WC_MxARDaysOldByInvoice
            Get
                Return CType(MyBase.Parameters,NextGen.Application.DataObject.WC_MxARDaysOldByInvoice)
            End Get
        End Property
    End Class
End Namespace

Namespace NextGen.Application.MetricObject

	Partial Public Class WC_MxARDaysOldByInvoice
	' ***
	' *** This Class declaration is generated automatically.
	' *** Please DO NOT change the class declaration or DO NOT write any code outside it.
	' ***


Protected Overrides Sub Run()
	
    Dim scheduler As New NxMetric(Me.Framework.AppMgr)
        ' start scheduledprocess updating
        scheduler.StartUp(Me.Parameters.ItemID.Value, Me.Parameters.Description.Value)
		 ' tables used
        Dim qryInvMaster As NextGen.Application.Query.InvMaster = Query.InvMaster.Current
		Dim qryARMaster As NextGen.Application.Query.ARMaster = Query.ARMaster.Current
        Dim qryMatter As NextGen.Application.Query.Matter = Query.Matter.Current
        Dim qryClntDate As NextGen.Application.Query.CliDate = query.CliDate.Current
        Dim qryMattDate As NextGen.Application.Query.MattDate = query.MattDate.Current
		Dim qryTkprDate As NextGen.Application.Query.TkprDate = Query.TkprDate.Current
        Dim qryAR As NextGen.Application.Query.ARDetail = Query.ARDetail.Current
        Dim qryAgingBuckets As Query.AgingSchemeBuckets = Query.AgingSchemeBuckets.Current
		Dim qryCurrency As Query.NxCurrencyCode = Query.NxCurrencyCode.Current	
		Dim qryCurrencyRate As Query.CurrencyTypeDailyRate = Query.CurrencyTypeDailyRate.Current
		Dim qryCurrencyRate2 As Query.CurrencyTypeDailyRate = CType(qryCurrencyRate.MakeAlias, Query.CurrencyTypeDailyRate)
		Dim qryNxDate As Query.NxDate = Query.NxDate.Current
		Dim qryRcptMaster As Query.RcptMaster = Query.RcptMaster.Current
		Dim qMBC As NextGen.Application.Query.MattBillingContact = Query.MattBillingContact.Current
		Dim qryChrgBill As Query.ChrgBill = Query.ChrgBill.Current
		Dim qryChrgRcpt As NextGen.Application.Query.ChrgRcpt = Query.ChrgRcpt.Current
		
		Dim qrySession As ISession = Me.Framework.QuerySession
		qrySession.BeginWork()

		' Update CurrencyTypeDailyRate if necessary
		Dim reqDailyRate As New CurrencyTypeDailyRate(Me.Framework.AppMgr)
		reqDailyRate.CheckDailyRates()
		
		' calculate dates
        Dim dateOptions As New DateOptions(Me.Framework.AppMgr)

        If Me.Parameters.AgingDateOption.Value.ToLower <> "asentered" Then
            ' set aging date based on requested option
            If Me.Parameters.AgingDateOption.Value.ToLower = "enddate" Then
                Me.Parameters.AgingDate.Value = qrySession.Info.CurrentTime.Today
            Else
                dateOptions.SetDate(Me.Parameters.AgingDateOption.Value)

                Me.Parameters.AgingDate.Value = dateOptions.ReqDate
            End If
        End If

        If Me.Parameters.BillsThruDateOption.Value.ToLower <> "asentered" Then
            ' set bills thru date based on requested option
            If Me.Parameters.BillsThruDateOption.Value.ToLower = "enddate" Then
                Me.Parameters.BillsThruDate.Value = qrySession.Info.CurrentTime.Today
            Else
                dateOptions.SetDate(Me.Parameters.BillsThruDateOption.Value)

                Me.Parameters.BillsThruDate.Value = dateOptions.ReqDate
            End If
        End If

        If Me.Parameters.PaymentsThruDateOption.Value.ToLower <> "asentered" Then
            ' set payments thru date based on requested option
            If Me.Parameters.PaymentsThruDateOption.Value.ToLower = "enddate" Then
                Me.Parameters.PaymentsThruDate.Value = qrySession.Info.CurrentTime.Today
            Else
                dateOptions.SetDate(Me.Parameters.PaymentsThruDateOption.Value)

                Me.Parameters.PaymentsThruDate.Value = dateOptions.ReqDate
            End If
        End If

		Me.Parameters.IsCurrentValues.Value = False

		SaveRunParameters()

		' HAS 1/3/08 For currency conversion options - all references to Me.Parameters.CurrencyCode.Value changed to reqCurrency
		' test for currency conversion to be done
		Dim reqCurrency As IExpression
		Dim reqBOACurrency As IExpression
		Dim reqcurrencystring As String
		Dim currencyCursor As ICursor
		Dim currencyFactor As IExpression
		Dim currencyFactorUnall As IExpression
		Dim currencyRate As String = Me.Parameters.CurrencyRate.Value

		If Me.Parameters.IsNoCurrencyConversion.Value Then
			reqCurrency = qryAR.Currency
			reqBOACurrency = qryInvMaster.Currency
			reqcurrencystring = "xxx"
			currencyFactor = Exp.Value(1)
			currencyFactorUnall = Exp.Value(1)
			currencyRate = "Tran"
		ElseIf Me.Parameters.IsUseReportingCurrencies.Value Then
			Dim currencySelect As ISelect = QueryBuilder.SelectFrom(qryCurrency)
			currencySelect.Values( _
				qryCurrency.CurrCode)
			currencySelect.Where( _
				qryCurrency.IsReporting.IsTrue)
		
			currencyCursor = qrySession.OpenCursor(currencySelect)
			currencyCursor.MoveFirst()
	
			reqCurrency = Exp.Value(currencyCursor.GetString(qryCurrency.CurrCode))
			reqBOACurrency = Exp.Value(currencyCursor.GetString(qryCurrency.CurrCode))
			reqcurrencystring = currencycursor.GetString(qrycurrency.CurrCode)
		Else
			reqCurrency = Exp.Value(Me.Parameters.CurrencyCode.Value)
			reqBOACurrency = Exp.Value(Me.Parameters.CurrencyCode.Value)
			reqcurrencystring = Me.Parameters.CurrencyCode.Value
		End If

		Dim bucketsSelect As ISelect = QueryBuilder.SelectFrom(qryAgingBuckets)
		bucketsSelect.Values( _
			qryAgingBuckets.AgingSchemeBucketsID, _
			qryAgingBuckets.BucketStart, _
			qryAgingBuckets.BucketEnd)
		bucketsSelect.Where(qryAgingBuckets.AgingSchemeID.IsEqualTo(Me.Parameters.AgingCode.Value))
		bucketsSelect.OrderBy(qryAgingBuckets.BucketStart)

		Dim bucketsCursor As ICursor = qrySession.OpenCursor(bucketsSelect)

		Dim numBuckets As Integer = bucketsCursor.RowCount
		Dim bucketID(numBuckets) As Guid
		Dim bucketStart(numBuckets) As Integer
		Dim bucketEnd(numBuckets) As Integer
		Dim agingColumn(5) As IExpression
		Dim feeAgingColumn(5) As IExpression
		Dim hcoAgingColumn(5) As IExpression
		Dim scoAgingColumn(5) As IExpression
		Dim taxAgingColumn(5) As IExpression
		Dim intAgingColumn(5) As IExpression
		Dim boaAgingColumn(5) As IExpression
		Dim othAgingColumn(5) As IExpression
		
		With bucketsCursor
			Dim i As Integer = 1

			Do While .Read And i <= 5
				bucketID(i) = .GetGUID(qryAgingBuckets.AgingSchemeBucketsID)
				If i = 1 Then
					bucketStart(i) = -9999
				Else
					bucketStart(i) = .GetInteger(qryAgingBuckets.BucketStart)
				End If
				If i = numBuckets Then
					bucketEnd(i) = 99999
				Else
					bucketEnd(i) = .GetInteger(qryAgingBuckets.BucketEnd)
				End If
				i += 1
			Loop
			.Close()
		End With

		' put open invoices in temp table
		Dim openInvoices As New openInvoiceDef
		openInvoices.CreateTable(qrySession)
		
		' create temp table for output when run for work tkpr detail
		Dim tempOutput As New TempOutputDef
		tempOutput.CreateTable(Me.Framework.QuerySession)

		' expressions
		Dim billsThruDate As Date = Me.Parameters.BillsThruDate.Value
		Dim paymentsThruDate As Date = Me.Parameters.PaymentsThruDate.Value
		
		Dim calcDate As IExpression
		Dim calcDateRcpt As IExpression
		Dim calcDateInv As IExpression
		Dim calcDateRev As IExpression
		
		Select Case Me.Parameters.ReportOnDate.Value.ToLower()
			Case "transaction"
				calcDate = qryAR.InvDate
				calcDateRcpt = qryAR.RcptDate
				calcDateRev = qryInvMaster.ReversedDate
			Case "post"
				calcDate = qryAR.PostDate
				calcDateRcpt = qryAR.PostDate
			Case "ckdate"
				calcDate = qryAR.RcptMaster1.ChkDate
				calcDateRcpt = qryAR.RcptMaster1.ChkDate
			Case Else
				calcDate = qryAR.GLDate
				calcDateRcpt = qryAR.GLDate
		End Select

		Dim leadMatter0 As IExpression
		With Exp.Case
			.When(qryAR.InvMaster1.LeadMatter.IsNULL, qryAR.Matter)
			.Else(qryAR.InvMaster1.LeadMatter)
			leadMatter0 = .End
		End With	

		Dim selOpenInv As ISelect = qrySession.Select(qryAR)
		selOpenInv.Distinct.Values(qryAR.AppInvMaster)
		selOpenInv.InnerJoin(qryAR, qryInvMaster, qryAR.InvMaster.IsEqualTo(qryInvMaster.InvIndex))
		selOpenInv.Where((qryAR.RcptMaster.IsNULL.And(calcDate.IsLessOrEqualTo(billsThruDate))).Or _
						 (qryAR.RcptMaster.IsNotNull.And(calcDateRcpt.IsLessOrEqualTo(paymentsThruDate))))
	' requested matters
		If Not Me.Parameters.ReqMatters.IsNull Then
			If Me.Parameters.ARMatterCode.Value = "Lead" Then
				selOpenInv.InnerJoin(qryInvMaster, qryMatter, qryInvMaster.LeadMatter.IsEqualTo(qryMatter.MattIndex))
			Else
				selOpenInv.InnerJoin(qryAR.Matter.IsEqualTo(qryMatter.MattIndex))
			End If
			selOpenInv.Where(Me.Parameters.ReqMatters.Value)
		End If

	' requested mattdate
		If Not Me.Parameters.ReqMattDate.IsNull Then
			If Me.Parameters.ARMatterCode.Value = "Lead" Then
				If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
					selOpenInv.InnerJoin(qryInvMaster, qryMattDate, qryInvMaster.LeadMatter.IsEqualTo(qryMattDate.MatterLkUp).And( _
										(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate))))
					'selOpenInv.InnerJoin(qryAR, qryMattDate, leadMatter0.IsEqualTo(qryMattDate.MatterLkUp).And _
					'					(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate)))
				Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
					selOpenInv.InnerJoin(qryInvMaster, qryMattDate, qryInvMaster.LeadMatter.IsEqualTo(qryMattDate.MatterLkUp).And( _
										(qryAR.GLDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate))))
					'selOpenInv.InnerJoin(qryAR, qryMattDate, leadMatter0.IsEqualTo(qryMattDate.MatterLkUp).And _
					'					(qryAR.GLDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate)))
				Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then
					selOpenInv.InnerJoin(qryInvMaster, qryMattDate, qryInvMaster.LeadMatter.IsEqualTo(qryMattDate.MatterLkUp).And( _
										(qryAR.InvDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate))))
					'selOpenInv.InnerJoin(qryAR, qryMattdate, leadMatter0.IsEqualTo(qryMattDate.MatterLkUp).And _
					'					(qryAR.InvDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate)))
				End If						
			Else
				If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
					selOpenInv.InnerJoin(qryAR.Matter.IsEqualTo(qryMattdate.MatterLkUp).And _
										(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate)))
				Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
					selOpenInv.InnerJoin(qryAR.Matter.IsEqualTo(qryMattdate.MatterLkUp).And _
										(qryAR.GLDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate)))
				Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then						
					selOpenInv.InnerJoin(qryAR.Matter.IsEqualTo(qryMattdate.MatterLkUp).And _
										(qryAR.InvDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate)))
				End If
			End If
			selOpenInv.Where(Me.Parameters.ReqMattDate.Value)
		End If
	
	' requested invoices
		If Not Me.Parameters.ReqInvoices.IsNull Then
			selOpenInv.Where(Me.Parameters.ReqInvoices.Value)
		End If
		
	'include invoices reversed after the bill cutoff date - EL 9/6/2009
		If Me.Parameters.IsIncludeReverse.Value Then
			If Me.Parameters.ReportOnDate.Value = "Transaction" Then
				selOpenInv.Where(qryAR.IsReverse.IsEqualTo(0).Or _
					(calcDateRev.IsGreaterThan(billsthrudate).And _
						(qryAR.ARMaster.IsEqualTo(qryAR.APPARMaster))))
			End If
		Else
			selOpenInv.Where(qryInvMaster.IsReversed.IsEqualTo(0))
		End If

		selOpenInv.GroupBy(qryAR.APPInvMaster)
		selOpenInv.Having(Exp.SUM(qryAR.ARAmt).IsNotEqualTo(0).Or _
				(Exp.SUM(qryAR.ARFee).IsNotEqualTo(0)).Or _
				(Exp.SUM(qryAR.ARHCo).IsNotEqualTo(0)).Or _
				(Exp.SUM(qryAR.ARSCo).IsNotEqualTo(0)).Or _
				(Exp.SUM(qryAR.ARTax).IsNotEqualTo(0)).Or _
				(Exp.SUM(qryAR.ARInt).IsNotEqualTo(0)).Or _
				(Exp.SUM(qryAR.ARBOA).IsNotEqualTo(0)).Or _
				(Exp.SUM(qryAR.AROth).IsNotEqualTo(0)))
				
Me.LogMgr.Error("Open Invoices: " & Me.QuerySession.TranslateFormatted(selopeninv))

		With qrySession.Insert(openInvoices).Immediate
			.Into(openInvoices.invIndex)
			.From(selOpenInv)
		End With

	'Add index to temp output table	
		openInvoices.CreateIndex(Me.Framework.QuerySession)

		Do
			Dim ageByValue As IExpression
			If Me.Parameters.IsAgeByDueDate.Value(False) Then
				ageByValue = qryInvMaster.DueDate
			Else
				ageByValue = qryInvMaster.InvDate
			End If
			
			Dim daysOld As IExpression = exp.Value(Me.Parameters.AgingDate.Value).minus(agebyvalue,datepart.Day)
				
			If currencyRate = "UNIT" Then
				currencyFactor = Exp.Value(1).DividedBy(qryInvMaster.UnitCurrRate)
				currencyFactorUnall = Exp.Value(1).DividedBy(qryARMaster.UnitCurrRate)
			ElseIf currencyRate = "FIRM" Then
				currencyFactor = Exp.Value(1).DividedBy(qryInvMaster.FirmCurrRate)
				currencyFactorUnall = Exp.Value(1).DividedBy(qryARMaster.FirmCurrRate)
			ElseIf Not Me.Parameters.IsNoCurrencyConversion.Value Then
				currencyfactor = qrycurrencyrate2.rate.dividedby(qrycurrencyrate.rate)
				currencyfactorUnall = qrycurrencyrate2.rate.dividedby(qrycurrencyrate.rate)
			End If
	
			Dim fees As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARFee.MultBy(currencyFactor))
				.Else(0)
				fees = .End
			End With
			Dim hardCosts As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARHCo.MultBy(currencyFactor))
				.Else(0)
				hardCosts = .End
			End With
			Dim softCosts As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARSCo.MultBy(currencyFactor))
				.Else(0)
				softCosts = .End
			End With
			Dim tax As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARTax.MultBy(currencyFactor))
				.Else(0)
				tax = .End
			End With
			Dim interest As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARInt.MultBy(currencyFactor))
				.Else(0)
				interest = .End
			End With
	
			Dim chrgBal As New chrgBalDef
			chrgBal.CreateTable(qrySession)

			Dim selChrgBal As ISelect = qrySession.Select(qryChrgBill)
			With selChrgBal
				.Values(qryChrgBill.ARMaster, Exp.SUM(qryChrgBill.BillAmtBal))
				.OuterJoin(qryARMaster, qryChrgBill, qryChrgBill.ARMaster.IsEqualTo(qryARMaster.armindex))
				.Where(qryChrgBill.ChrgCard1.ChrgType1.ChrgCatList.IsEqualTo("BOA"))
				.GroupBy(qryChrgBill.ARMaster)
			End With
			
			With qrySession.Insert(chrgBal).Immediate
				.Into(chrgBal.ARMAster, chrgBal.chrgBalance)
				.From(selChrgBal)
			End With
			'jsc 9/15/2015 - can't use chrbBalance = 0 since some receipting procedures end up making this amount a negative value
			Dim onAcct As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARBOA.MultBy(currencyFactor))
				'.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd).And(chrgBal.chrgBalance.IsEqualTo(0.00)), qryAR.ARBOA.MultBy(currencyFactor))
				.Else(0)
				onAcct = .End
			End With
			
			Dim AppliedonAcct As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARBOA.MultBy(currencyFactor))
				'.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd).And(chrgBal.chrgBalance.IsGreaterThan(0.00)), qryAR.ARBOA.MultBy(currencyFactor))
				.Else(0)
				AppliedonAcct = .End
			End With
			
			Dim other As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.AROth.MultBy(currencyFactor))
				.Else(0)
				other = .End
			End With
	
			Dim unall As IExpression
			unall = Exp.Value(0)
	
			Dim total As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARAmt.MultBy(currencyFactor))
				.Else(0)
				total = .End
			End With

			' set each aging column
			For i As Integer = 1 To 5
				agingColumn(i) = Exp.Value(0)
				feeAgingColumn(i) = Exp.Value(0)
				hcoAgingColumn(i) = Exp.Value(0)
				scoAgingColumn(i) = Exp.Value(0)
				taxAgingColumn(i) = Exp.Value(0)
				intAgingColumn(i) = Exp.Value(0)
				boaAgingColumn(i) = Exp.Value(0)
				othAgingColumn(i) = Exp.Value(0)
				
				If i <= numBuckets Then
					With Exp.Case
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), total)
						.Else(0)	
						agingColumn(i) = .End
					End With
					With Exp.Case
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), fees)
						.Else(0)	
						feeAgingColumn(i) = .End
					End With
					With Exp.Case
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), hardCosts)
						.Else(0)	
						hcoAgingColumn(i) = .End
					End With
					With Exp.Case
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), softCosts)
						.Else(0)	
						scoAgingColumn(i) = .End
					End With
					With Exp.Case
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), tax)
						.Else(0)	
						taxAgingColumn(i) = .End
					End With
					With Exp.Case
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), interest)
						.Else(0)	
						intAgingColumn(i) = .End
					End With
					With Exp.Case
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), onAcct)
						.Else(0)	
						boaAgingColumn(i) = .End
					End With
					With Exp.Case
						'jsc 9/15/2015 - probably needs more testing, but trying to add other to applied on account often does not work due to negative BOA values
						.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), other)
						'.When(Exp.Value(daysOld).IsBetween(bucketStart(i), bucketEnd(i)), other.Plus(AppliedonAcct))
						.Else(0)	
						othAgingColumn(i) = .End
					End With
				End If
			Next i
			
			Dim doubtfulAmt As IExpression
			With Exp.Case
				.When(Exp.Value(daysOld).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.DoubtfulAmt.MultBy(currencyFactor))
				.Else(0)
				doubtfulAmt = .End
			End With 
						
			Dim expCurrencyDate As IExpression
			Dim expCurrDateFlag As Boolean = False
			Dim IsInvDate As Boolean = False
			Select Case Me.Parameters.CurrencyCalcDate.Value
				Case Is = "Transaction"
					expCurrencyDate = qryInvMaster.InvDate
					IsInvDate = True
				Case Is = "Post"
					expCurrencyDate = qryInvMaster.PostDate
				Case Is = "Currency"
					expCurrencyDate = qryInvMaster.CurDate
				Case Is = "Current"
					expCurrencyDate = Exp.Value(Me.Framework.QuerySession.Info.CurrentTime.Today)
					expCurrDateFlag = True
				Case Is = "AsOf"
					If Me.Parameters.CurrencyAsOfDate.IsNull Then
						expCurrencyDate = Exp.Value(Me.Framework.QuerySession.Info.CurrentTime.Today)
						expCurrDateFlag = True
					Else
						expCurrencyDate = Exp.Value(Me.Parameters.CurrencyAsOfDate.Value)
						expCurrDateFlag = True
					End If
			End Select
			
			Dim leadMatter As IExpression
			With Exp.Case
				.When(qryInvMaster.LeadMatter.IsNULL, qryAR.Matter)
				.Else(qryInvMaster.LeadMatter)
				leadMatter = .End
			End With
			
			Dim OrigInvTotal As IExpression
			OrigInvTotal = qryAR.InvMaster2.OrgAmt.MultBy(currencyFactor)
	
			' build SELECTs
			Dim selAR As ISelect = qrySession.Select(qryAR)
			selAR.InnerJoin(qryAR.InvMaster.IsEqualTo(qryInvMaster.InvIndex))
			selAR.OuterJoin(qryAR, qryRcptMaster, qryAR.RcptMaster.IsEqualTo(qryRcptMaster.RcptIndex))

			If Me.Parameters.ARMatterCode.Value = "Lead" Then
				selAR.InnerJoin(qryAR, qryMatter, leadMatter.IsEqualTo(qryMatter.MattIndex))
			Else
				selAR.InnerJoin(qryAR.Matter.IsEqualTo(qryMatter.MattIndex))
			End If
			selAR.InnerJoin(qryAR, qryClntDate, qryMatter.Client.IsEqualTo(qryClntDate.ClientLkUp))
			selAR.InnerJoin(qryAR, qryMattDate, qryMatter.MattIndex.IsEqualTo(qryMattDate.MatterLkUp))

			If Not Me.Parameters.IsNoCurrencyConversion.Value AndAlso currencyRate = "TRAN" Then
				selAR.InnerJoin(qryAR.Currency.IsEqualTo(qrycurrencyrate.currencycode).And _
					(expcurrencyDate.IsEqualTo(qrycurrencyrate.currencyDate)).and _
					(qrycurrencyrate.currencytype.isequalto(Me.parameters.CurrencyType.Value)))
				selAR.InnerJoin(qryAR, qryCurrencyRate2, qryCurrencyRate2.currencyCode.IsEqualTo(reqCurrency).And _
					(qryCurrencyRate2.currencyDate.IsEqualTo(expcurrencyDate)).And _
					(qryCurrencyRate2.currencyType.isEqualTo(Me.parameters.CurrencyType.Value)))
			End If
			
			selAR.InnerJoin(qryAgingBuckets.AgingSchemeID.IsEqualTo(Exp.Value(Me.Parameters.AgingCode.Value)))
			selAR.InnerJoin(qryAR.appinvmaster.IsEqualTo(openInvoices.invIndex))
			selAR.OuterJoin(qryAR, chrgBal, qryAR.ARMaster.IsEqualTo(chrgBal.ARMaster))
			selAR.OuterJoin(qryAR, qryNxDate, qryAR.RcptDate.IsEqualTo(qryNxDate.Date))
			selAR.Values( _
				reqCurrency, _
				qryMattDate.BillTkpr, _
				qryMattDate.MatterLkUp, _
				qryClntDate.CliDateID, _
				qryMattDate.MattDateID, _
				qryAR.ARMaster, _
				exp.Coalesce(Exp.MAX(qryAR.RcptDate), #1/1/1800#), _
				exp.Coalesce(Exp.MAX(qryNxDate.Date), #1/1/1800#), _
				qryAgingBuckets.AgingSchemeBucketsID, _
				currencyfactor, _
				Exp.Coalesce(Exp.SUM(fees),0), _
				Exp.Coalesce(Exp.SUM(hardCosts),0), _
				Exp.Coalesce(Exp.SUM(softCosts),0), _
				Exp.Coalesce(Exp.SUM(hardCosts.Plus(softCosts)),0), _
				Exp.Coalesce(Exp.SUM(tax),0), _
				Exp.Coalesce(Exp.SUM(interest),0), _
				Exp.Coalesce(Exp.SUM(onAcct),0),
				Exp.Coalesce(Exp.SUM(other.Plus(AppliedOnAcct)),0), _
				Exp.Coalesce(Exp.SUM(tax.Plus(interest).Plus(onAcct)),0), _
				Exp.Coalesce(Exp.SUM(unall),0), _
				Exp.Coalesce(Exp.SUM(total),0), _
				Exp.Coalesce(Exp.SUM(doubtfulAmt),0), _
				Exp.Coalesce(Exp.MAX(OrigInvTotal),0))
				
			' set each aging column
			For i As Integer = 1 To 5
				selAR.Values(Exp.Coalesce(exp.SUM(agingColumn(i)),0))
				selAR.Values(Exp.Coalesce(exp.SUM(feeAgingColumn(i)),0))
				selAR.Values(Exp.Coalesce(exp.SUM(hcoAgingColumn(i)),0))
				selAR.Values(Exp.Coalesce(exp.SUM(scoAgingColumn(i)),0))
				selAR.Values(Exp.Coalesce(exp.SUM(taxAgingColumn(i)),0))
				selAR.Values(Exp.Coalesce(exp.SUM(intAgingColumn(i)),0))
				selAR.Values(Exp.Coalesce(exp.SUM(boaAgingColumn(i)),0))
				selAR.Values(Exp.Coalesce(exp.SUM(othAgingColumn(i)),0))
			Next i
			
			If Me.Parameters.IsNoCurrencyConversion.Value Then
				selAR.GroupBy(reqCurrency)
			End If
			If expCurrDateFlag = False Then
				selAR.GroupBy(expCurrencyDate)
			End If
			If IsInvDate = False Then
				selAR.GroupBy(qryInvMaster.InvDate)
			End If
			selAR.GroupBy(qryRcptMaster.ChkDate)		
			selAR.GroupBy( _
				qryMattDate.BillTkpr, _
				qryMattDate.MatterLkUp, _
				qryClntDate.CliDateID, _
				qryMattDate.MattDateID, _
				qryAR.ARMaster, _
				qryAgingBuckets.AgingSchemeBucketsID)
			If Not Me.Parameters.IsNoCurrencyConversion.Value Then
				selAR.GroupBy(currencyfactor)
			End If
			selAR.Having( _
				Exp.SUM(fees).IsNotEqualTo(0).Or _
				(Exp.SUM(hardCosts).IsNotEqualTo(0)).Or _
				(Exp.SUM(softCosts).IsNotEqualTo(0)).Or _
				(Exp.SUM(tax).IsNotEqualTo(0)).Or _
				(Exp.SUM(interest).IsNotEqualTo(0)).Or _
				(Exp.SUM(onAcct).IsNotEqualTo(0)).Or _
				(Exp.SUM(other).IsNotEqualTo(0)))
			selAR.Where(calcDate.IsLessOrEqualTo(billsThruDate).And _
				(qryAR.RcptMaster.IsNULL.Or _
				(calcDateRcpt.IsLessOrEqualTo(paymentsThruDate))))
		
			If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
				selAR.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate,qryClntDate.NxEndDate))
				selAR.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate))
			Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
				selAR.Where(qryAR.GLDate.IsBetween(qryClntDate.NxStartDate,qryClntDate.NxEndDate))
				selAR.Where(qryAR.GLDate.IsBetween(qryMattDate.NxStartDate,qryMattDate.NxEndDate))
			Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then						
				selAR.Where(qryAR.InvDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))
				selAR.Where(qryAR.InvDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))
			End If			
	
			' include reversals ?
			If Not Me.Parameters.IsIncludeReverse.Value Then
				selAR.Where(qryAR.IsReverse.IsEqualTo(0))
			End If
			' exclude doubtful
			If Me.Parameters.IsExcludeDoubtful.Value Then
				Dim qryreceipttype As Query.ReceiptType = query.ReceiptType.Current
				selar.OuterJoin(qryreceipttype,qryar.RcptMaster1.ReceiptType.IsEqualTo(qryreceipttype.Code))
				selAR.Where(qryreceipttype.IsDoubtful.IsFalse.Or(qryreceipttype.IsDoubtful.IsNULL))
			End If
			If Not Me.Parameters.ReqMatters.IsNull Then
				' requested matters
				selAR.Where(Me.Parameters.ReqMatters.Value)
			End If
			If Not Me.Parameters.ReqMattDate.IsNull Then
				' requested mattdate
				selar.InnerJoin(qryar,qrymattdate,qryar.Matter.IsEqualTo(qrymattdate.MatterLkUp).And(qryar.InvDate.isbetween(qrymattdate.NxStartDate,qrymattdate.NxEndDate)))
				selAR.Where(Me.Parameters.ReqMattDate.Value)
			End If
			If Not Me.Parameters.ReqInvoices.IsNull Then
				' requested invoices
				selAR.Where(Me.Parameters.ReqInvoices.Value)
			End If
			If Not Me.Parameters.IsIncWorkTkpr.Value Then 
				selAR.Values(0)
				selAR.Values(expCurrencyDate)
				selAR.Values(daysOld)
				selAR.Values(qryRcptMaster.ChkDate)
				selAR.Values(Exp.Value("F/C/C"))    'ARType
				
				With qrySession.Insert(tempOutput).Immediate
					.Into( _
						tempOutput.Currency, _
						tempOutput.BillTkpr, _
						tempOutput.Matter, _
						tempOutput.ClntDate, _
						tempOutput.MattDate, _
						tempOutput.ArMaster, _
						tempOutput.LastPaymentDate, _
						tempOutput.LastPaymentNxDate, _
						tempOutput.AgingBucket, _
						tempOutput.CurrFactor, _
						tempOutput.ARFees, _
						tempOutput.ARHardCosts, _
						tempOutput.ARSoftCosts, _
						tempOutput.ArCosts, _
						tempOutput.ARTax, _
						tempOutput.ARInterest, _
						tempOutput.AROnAcct, _
						tempOutput.AROther, _
						tempOutput.ARCharges, _
						tempOutput.ARUnallocated, _
						tempOutput.ARTotal, _
						tempOutput.ARDoubtFul, _
						tempOutput.OrigInvAmt, _
						tempOutput.Aging1, _
						tempOutput.feeAging1, _
						tempOutput.hcoAging1, _
						tempOutput.scoAging1, _
						tempOutput.taxAging1, _
						tempOutput.intAging1, _
						tempOutput.boaAging1, _
						tempOutput.othAging1, _
						tempOutput.Aging2, _
						tempOutput.feeAging2, _
						tempOutput.hcoAging2, _
						tempOutput.scoAging2, _
						tempOutput.taxAging2, _
						tempOutput.intAging2, _
						tempOutput.boaAging2, _
						tempOutput.othAging2, _
						tempOutput.Aging3, _
						tempOutput.feeAging3, _
						tempOutput.hcoAging3, _
						tempOutput.scoAging3, _
						tempOutput.taxAging3, _
						tempOutput.intAging3, _
						tempOutput.boaAging3, _
						tempOutput.othAging3, _
						tempOutput.Aging4, _
						tempOutput.feeAging4, _
						tempOutput.hcoAging4, _
						tempOutput.scoAging4, _
						tempOutput.taxAging4, _
						tempOutput.intAging4, _
						tempOutput.boaAging4, _
						tempOutput.othAging4, _
						tempOutput.Aging5, _
						tempOutput.feeAging5, _
						tempOutput.hcoAging5, _
						tempOutput.scoAging5, _
						tempOutput.taxAging5, _
						tempOutput.intAging5, _
						tempOutput.boaAging5, _
						tempOutput.othAging5, _
						tempOutput.IsRounding, _
						tempOutput.CurrencyDate, _
						tempOutput.DaysOld, _
						tempOutput.ChkDate, _
						tempOutput.ARType)
					.From(selAR)
				End With
				
			End If
Me.logmgr.Info("selAR: " & Me.Querysession.TranslateFormatted(selAR))			
			' include unallocated ?
			' Unallocated can not be selected if Working Timekeeper Detail is selected
			If Me.Parameters.IsIncludeUnallocated.Value Then
				' force to current bucket
				With Exp.Case
					.When(Exp.Value(0).IsBetween(qryAgingBuckets.BucketStart, qryAgingBuckets.BucketEnd), qryAR.ARAmt.MultBy(currencyFactorUnall))
					.Else(0)
					unall = .End
				End With
				
				Dim expCurrDateFlag2 As Boolean = False
				Dim IsInvDate2 As Boolean = False
				Select Case Me.Parameters.CurrencyCalcDate.Value
					Case Is = "Transaction"
						expCurrencyDate = qryAR.InvDate
						IsInvDate2 = True
					Case Is = "Post"
						expCurrencyDate = qryAR.PostDate
					Case Is = "Currency"
						expCurrencyDate = qryAR.CurrDate
					Case Is = "Current"
						expCurrencyDate = Exp.Value(Me.Framework.QuerySession.Info.CurrentTime.Today)
						expCurrDateFlag2 = True
					Case Is = "AsOf"
						If Me.Parameters.CurrencyAsOfDate.IsNull Then
							expCurrencyDate = Exp.Value(Me.Framework.QuerySession.Info.CurrentTime.Today)
							expCurrDateFlag2 = True
						Else
							expCurrencyDate = Exp.Value(Me.Parameters.CurrencyAsOfDate.Value)
							expCurrDateFlag2 = True
						End If
				End Select
			
				Dim daysOld2 As IExpression = exp.Value(Me.Parameters.AgingDate.Value).minus(qryAR.InvDate,datepart.Day)
				
				selAR = qrySession.Select(qryAR)
				selAR.InnerJoin(qryAR.Matter.IsEqualTo(qryMatter.MattIndex))
				selAR.InnerJoin(qryAR, qryClntDate, qryMatter.Client.IsEqualTo(qryClntDate.ClientLkUp))
				selAR.InnerJoin(qryAR, qryMattDate, qryMatter.MattIndex.IsEqualTo(qryMattDate.MatterLkUp))
				selar.InnerJoin(qryAR, qryARMaster, qryar.ARMaster.IsEqualTo(qryARmaster.ARMIndex))
				selAR.OuterJoin(qryAR, qryRcptMaster, qryAR.RcptMaster.IsEqualTo(qryRcptMaster.RcptIndex))
				selAR.InnerJoin(qryAgingBuckets.AgingSchemeID.IsEqualTo(Exp.Value(Me.Parameters.AgingCode.Value)))
				' HAS 1/3/08 For currency conversion options
				If Not Me.Parameters.IsNoCurrencyConversion.Value AndAlso currencyRate = "TRAN" Then
					selAR.InnerJoin(qryAR.Currency.IsEqualTo(qrycurrencyrate.currencycode).And _
						(expcurrencyDate.IsEqualTo(qrycurrencyrate.currencyDate)).and _
						(qrycurrencyrate.currencytype.isequalto(Me.parameters.CurrencyType.Value)))
					selAR.InnerJoin(qryAR, qryCurrencyRate2, qryCurrencyRate2.currencyCode.IsEqualTo(reqCurrency).And _
						(qryCurrencyRate2.currencyDate.IsEqualTo(expcurrencyDate)).And _
						(qryCurrencyRate2.currencyType.isEqualTo(Me.parameters.CurrencyType.Value)))
				End If
				
				selAR.Where(qryAR.ARUnall.IsNotEqualTo(0))
			
				selAR.Values( _
					reqCurrency, _
					qryMattDate.BillTkpr, _
					qryMattDate.MatterLkUp, _
					qryClntDate.CliDateID, _
					qryMattDate.MattDateID, _
					qryAgingBuckets.AgingSchemeBucketsID, _
					qryAR.ARMaster, _
					currencyfactorunall, _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(unall.Negate), _
					Exp.SUM(unall), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _     
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					Exp.SUM(Exp.Value(0)), _
					0, _
					expCurrencyDate, _
					DaysOld2, _
					exp.Max(qryRcptMaster.ChkDate))
				
				If Me.Parameters.IsNoCurrencyConversion.Value Then
					selAR.GroupBy(reqCurrency)
				End If
				If expCurrDateFlag2 = False Then
					selAR.GroupBy(expCurrencyDate)
				End If				
				If IsInvDate2 = False Then
					selAR.GroupBy(qryAR.InvDate)
				End If
				selAR.GroupBy( _
					qryMattDate.BillTkpr, _
					qryMattDate.MatterLkUp, _
					qryClntDate.CliDateID, _
					qryMattDate.MattDateID, _
					qryAgingBuckets.AgingSchemeBucketsID, _
					qryAR.ARMaster)
				If Not Me.Parameters.IsNoCurrencyConversion.Value Then
					selAR.GroupBy(currencyfactorunall)
				End If
				
				selAR.Having(Exp.SUM(unall).IsNotEqualTo(0))
	
				' test parameter values
				selAR.Where(calcDateRcpt.IsLessOrEqualTo(paymentsThruDate))
				
				' include reversals
				If Not Me.Parameters.IsIncludeReverse.Value Then
					selAR.Where(qryAR.IsReverse.IsEqualTo(0))
				End If
	
				selAR.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))
				selAR.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))
	
				If Not Me.Parameters.ReqMatters.IsNull Then
					' requested matters
					selAR.Where(Me.Parameters.ReqMatters.Value)
				End If
				
				If Not Me.Parameters.ReqMattDate.IsNull Then
					' requested matters
					selar.InnerJoin(qryar,qrymattdate,qryar.Matter.IsEqualTo(qrymattdate.MatterLkUp).And(qryar.InvDate.isbetween(qrymattdate.NxStartDate,qrymattdate.NxEndDate)))
					selAR.Where(Me.Parameters.ReqMattDate.Value)
				End If
				
				If Not Me.Parameters.ReqInvoices.IsNull Then
					' requested invoices
					selAR.InnerJoin(qryAr, qryInvMaster, qryAR.InvMaster.IsEqualTo(qryInvMaster.InvIndex))
					selAR.Where(Me.Parameters.ReqInvoices.Value)
				End If
				
Me.LogMgr.Error("Unallocated SelAr Sql " & Me.QuerySession.TranslateFormatted(selAR))

				With qrySession.Insert(tempOutput).Immediate
					.Into( _
						tempOutput.Currency, _
						tempOutput.BillTkpr, _
						tempOutput.Matter, _
						tempOutput.ClntDate, _
						tempOutput.MattDate, _
						tempOutput.AgingBucket,
						tempOutput.ARMaster, _
						tempOutput.CurrFactor, _
						tempOutput.ARFees, _
						tempOutput.ARHardCosts, _
						tempOutput.ARSoftCosts, _
						tempOutput.ArCosts, _
						tempOutput.ARTax, _
						tempOutput.ARInterest, _
						tempOutput.AROnAcct, _
						tempOutput.AROther, _
						tempOutput.ARCharges, _
						tempOutput.ARUnallocated, _
						tempOutput.ARTotal, _
						tempOutput.ARDoubtFul, _
						tempOutput.OrigInvAmt, _
						tempOutput.Aging1, _
						tempOutput.Aging2, _
						tempOutput.Aging3, _
						tempOutput.Aging4, _
						tempOutput.Aging5, _
						tempOutput.IsRounding, _
						tempOutput.CurrencyDate, _
						tempOutput.DaysOld, _
						tempOutput.ChkDate)
					.From(selAR)
				End With
			End If
			
			' only matters over $x ?
			If Me.Parameters.MatterSelectionCode.Value <> "All" Then
				Dim selOver As ISelect = qrySession.Select(tempOutput)
				selOver.Values(tempOutput.Matter)
				selOver.GroupBy(tempOutput.Matter)
				selOver.Having(Exp.SUM(tempOutput.ARTotal).IsLessOrEqualTo(Me.Parameters.OverAmount.Value))
				
				Dim del As IDelete = QueryBuilder.Delete(tempOutput)
				del.Where(tempOutput.Matter.IsIn(selOver))
				qrySession.Execute(del)
			End If
	
			' HAS 1/3/08 For currency conversion options
			If Me.Parameters.IsUseReportingCurrencies.Value Then
				If currencyCursor.Read()
					reqCurrencyString = currencyCursor.GetString(qryCurrency.CurrCode)
					reqCurrency = Exp.Value(reqCurrencyString)
					
					Continue Do
				End If
			End If
			
			Exit Do
		Loop
		
		GetDetail(Me.Parameters, tempOutput)
		
		GetBOA(tempOutput, reqBOACurrency)
		
		InsertIntoMetricTable(tempOutput, qrySession) 'inserts 1 row per invoice
		
		'RM FLS 11th July 2014 Populate billtkprdate - expected to be able to get to this via the BillTkpr on the softgroup but FWK says not
		Dim iUpd As IUpdate = QueryBuilder.Update(Me.QueryNode)
		iUpd.Into(Me.QueryNode.BillTkprDate)
		iUpd.Values(qryTkprDate.TkprDateID)

		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
			iUpd.InnerJoin(Me.QueryNode, qryTkprDate, qryTkprDate.TimekeeperLkUp.IsEqualTo(Me.QueryNode.BillTkpr).And _
							(Exp.CurrentDate.IsBetween(qryTkprDate.NxStartDate,qryTkprDate.NxEndDate)))
		Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
			iUpd.InnerJoin(Me.QueryNode, qryTkprDate, qryTkprDate.TimekeeperLkUp.IsEqualTo(Me.QueryNode.BillTkpr))
			iUpd.InnerJoin(Me.QueryNode, qryAr, qryAr.ARMaster.IsEqualTo(Me.QueryNode.ArMaster).And(qryAr.GLDate.IsBetween(qryTkprDate.NxStartDate,qryTkprDate.NxEndDate)))
		Else If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then						
			iUpd.InnerJoin(Me.QueryNode, qryTkprDate, qryTkprDate.TimekeeperLkUp.IsEqualTo(Me.QueryNode.BillTkpr))
						'had to change as Quernode armaster is detail
			iUpd.InnerJoin(Me.QueryNode, qryAr, qryAr.ARMaster.IsEqualTo(Me.QueryNode.ArMaster).And(qryAr.InvDate.IsBetween(qryTkprDate.NxStartDate,qryTkprDate.NxEndDate)))
		End If

		QuerySession.Execute(iUpd)
		
		'As days old used in a number of places the safest approach is a post update once all other calculations complete
'		Dim iUpdDO As IUpdate = QueryBuilder.Update(Me.QueryNode)
'		iUpdDO.Into(Me.QueryNode.DaysOld)
'		iUpdDO.Values(Exp.Value(0))
'		iUpdDO.Where(Me.QueryNode.ArMasterRel1.RcptMaster.IsNotNULL)
		
'		QuerySession.Execute(iUpdDO)
		
		Dim qryProfMaster As Query.ProfMaster = Query.ProfMaster.Current
		Dim tmpTimeEnd As New tmpTimeEndDef
		tmpTimeEnd.CreateTable(qrySession)

		Dim selTimeEnd As ISelect = QueryBuilder.SelectFrom(Me.QueryNode)
		selTimeEnd.Values(qryProfMaster.InvMaster, EXP.MAX(qryProfMaster.TimeEnd).As("TimeEnd"))
		selTimeEnd.InnerJoin(Me.QueryNode, qryProfMaster, Me.QueryNode.InvMaster.IsEqualTo(qryProfMaster.InvMaster))
		'selTimeEnd.InnerJoin(Me.QueryNode, qryAR, Me.QueryNode.ArMaster.IsEqualTo(qryAR.ARDIndex))
		'selTimeEnd.InnerJoin(qryAR, qryProfMaster, qryAR.AppInvMaster.IsEqualTo(qryProfMaster.InvMaster))
		selTimeEnd.GroupBy(qryProfMaster.InvMaster)

	Me.LogMgr.Error("selTimeEnd: " & Me.QuerySession.TranslateFormatted(seltimeend))
		
		Dim insTimeEnd As IInsert = QueryBuilder.Insert(tmpTimeEnd)
		insTimeEnd.Into(tmpTimeEnd.InvMaster, tmpTimeEnd.TimeEnd)
		insTimeEnd.Values(tmpTimeEnd.InvMaster, tmpTimeEnd.TimeEnd)
		insTimeEnd.From(selTimeEnd)
		Me.QuerySession.Execute(insTimeEnd)

		Dim iUpdTimeEnd As IUpdate = Me.QuerySession.Update(Me.QueryNode)
		iUpdTimeEnd.Into(Me.QueryNode.BillThruDate, Me.QueryNode.LastBillNxDate)
		iUpdTimeEnd.Values(tmpTimeEnd.TimeEnd, tmpTimeEnd.TimeEnd)
		'jsc 9/15/2015 - need to join directly to tmpTimeEnd
		iUpdTimeEnd.InnerJoin(Me.QueryNode, tmpTimeEnd, Me.QueryNode.InvMaster.IsEqualTo(tmpTimeEnd.InvMaster))
		'iUpdTimeEnd.InnerJoin(Me.QueryNode, qryAR, Me.QueryNode.ArMaster.IsEqualTo(qryAR.ARDIndex))
		'iUpdTimeEnd.InnerJoin(qryAR, tmpTimeEnd, qryAR.AppInvMaster.IsEqualTo(tmpTimeEnd.InvMaster))
		
		QuerySession.Execute(iUpdTimeEnd)
		
		Dim tmpBillThru As New tmpBillThruDef
		tmpBillThru.CreateTable(qrySession)
		
		Dim qthrunull As ISelect = QueryBuilder.SelectFrom(Me.QueryNode)
		
		qthrunull.Values(Me.QueryNode.ArMaster, Me.QueryNode.ArMasterRel1.InvMaster2.InvNumber)
		qthrunull.Where(Me.QueryNode.BillThruDate.IsNULL)
		
		Dim iThru As IInsert = QueryBuilder.Insert(tmpBillThru)
		iThru.Into(tmpBillThru.armaster, tmpBillThru.invNum)
		iThru.From(qthrunull)
		
		Me.QuerySession.Execute(iThru)
		
		Dim uthru As IUpdate = QueryBuilder.Update(tmpBillThru)
		uthru.Into(tmpBillThru.ThruDate)
		uthru.Values(Me.QueryNode.BillThruDate)
		uthru.innerJoin(tmpBillThru, Me.QueryNode, tmpBillthru.invNum.IsEqualTo(Me.QueryNode.ArMasterRel1.InvMaster2.InvNumber))
		uthru.Where(Me.QueryNode.BillThruDate.IsNotNULL)
		
		Me.QuerySession.Execute(uthru)

		Dim UpdBillThru As IUpdate = QueryBuilder.Update(Me.QueryNode)
		With UpdBillThru
			.Into(Me.QueryNode.BillThruDate)
			.Values(tmpBillThru.ThruDate)
			.InnerJoin(Me.QueryNode, tmpBillThru, Me.QueryNode.ArMaster.IsEqualTo(tmpBillThru.ArMaster))
			.Where(Me.QueryNode.BillThruDate.IsNull)
		End With
		
		Me.QuerySession.Execute(UpdBillThru)
				
		'multitimekeeper test logic
		' Multitimekeepers can not be selected if Working Timekeeper Detail is selected
		If Not Me.parameters.metrictkprsplitlist.isnull Then

			Dim upd As IUpdate = querybuilder.Update(Me.QueryNode)
    			upd.Into(Me.QueryNode.WC_MxARDaysOldByInvoiceID).Values(exp.NewGUID)
    			QuerySession.Execute(upd)
		
			Dim Splitter As New MetricTkprSplitter(Me.AppMgr)
			Select Case Me.parameters.metrictkprsplitlist.Value
				Case "MattOrg"
					Splitter.Execute(Me.archetype,MetricTkprSplitter.SplitTypes.MattOrgTkpr)
				Case "MattPrlf"
					Splitter.Execute(Me.archetype,MetricTkprSplitter.SplitTypes.MattPrlfTkpr)
				Case "ClientOrg"
					Splitter.Execute(Me.archetype,MetricTkprSplitter.SplitTypes.CliOrgTkpr)
				Case "ClientPrlf"
					Splitter.Execute(Me.archetype,MetricTkprSplitter.SplitTypes.CliPrlfTkpr)
			End Select
		End If

	'Building dynamic aging schema report labels and parameter strings 		
	Dim agingBuckets As Query.AgingSchemeBuckets = CType(qryAgingBuckets.MakeAlias(), Query.AgingSchemeBuckets)
	
	Dim bucketsSel As ISelect = QueryBuilder.SelectFrom(agingBuckets)
		bucketsSel.Values(agingBuckets.Code)
		bucketsSel.Where(agingBuckets.AgingSchemeID.IsEqualTo(Me.Parameters.AgingCode.Value))
		bucketsSel.OrderBy(agingBuckets.BucketStart)
		
		Dim bucketsCur As ICursor = Me.QuerySession.OpenCursor(bucketsSel)
	
        Dim numBucket As Integer = bucketsCur.RowCount
        If numBucket > 5 Then
            numbucket = 5
        End If
	
		Dim bucketCode(numBucket) As String
				
		With bucketsCur
			Dim i As Integer = 1
	
			Do While .Read
				bucketCode(i) = .GetString(agingBuckets.Code)
				i += 1
			Loop
	
			.Close()
		End With
		
		With Me.QuerySession.Update(Me.QueryNode)
			
			If numBucket > 0 Then
				.Into(Me.QueryNode.AgingCode1)
			End If
			If numBucket > 1 Then
				.Into(Me.QueryNode.AgingCode2)
			End If
			If numBucket > 2 Then
				.Into(Me.QueryNode.AgingCode3)
			End If
			If numBucket > 3 Then
				.Into(Me.QueryNode.AgingCode4)
			End If
			If numBucket > 4 Then
				.Into(Me.QueryNode.AgingCode5)
			End If
			.Into(Me.QueryNode.ReportOnDate, Me.QueryNode.BillsThruEndDate, Me.QueryNode.PaymentsThruEndDate, _
				  Me.QueryNode.DateOfAging, Me.QueryNode.ReportCurrency, Me.QueryNode.CurrencyType)   
			
			For i As Integer = 1 To numBucket
				.Values(bucketCode(i))
			Next i
			.Values(Me.Parameters.ReportOnDate.Value, _
						Me.Parameters.BillsThruDate.Value, _
						Me.Parameters.PaymentsThruDate.Value, _
						Me.Parameters.AgingDate.Value, _
						Me.Parameters.CurrencyCode.Value, _
						Me.Parameters.CurrencyType.Value)
					.Execute()
		End With

		Dim	uQN As IUpdate = QuerySession.Update(Me.QueryNode)
		uQN.Into(Me.QueryNode.MattBillContact)
		uQN.InnerJoin(Me.QueryNode, qMBC, Me.QueryNode.Matter.IsEqualTo(qMBC.Matter))
		uQN.Values(qMBC.MattBillingContactID)
		
		QuerySession.Execute(uQN)
		
		Dim qRH As Query.WC_MxMatterAgedARPH = Query.WC_MxMatterAgedARPH.Current
		Dim dRH As IDelete = QuerySession.Delete(qRH)
		QuerySession.Execute(dRH)
		
		'Set the headings
		Dim RepTitle1 As String = MessageMgr(New Guid("6508bb43-a539-40e4-bf1b-3557e34989b2"),Me.Parameters.WC_MxEffDateRel.Description.Value) 'AR Aged by Office By Billing Partner - {0}
		Dim repTitle2 As String = MessageMgr(New Guid("e15426d2-4150-4cc1-ba86-8bdcd6878414"), Format(Me.Parameters.BillsThruDate.Value(DateTime.Now), "d MMM yyyy"), _
		Format(Me.Parameters.PaymentsThruDate.Value(DateTime.Now), "d MMM yyyy"), Format(Me.Parameters.AgingDate.Value(DateTime.Now), "d MMM yyyy")) '(Bill thru Date {0}, Payments thru Date {1} and Aging Date {2}) 
		Dim repTitle3 As String
		
		If Me.Parameters.IsNoCurrencyConversion.Value Then
			'' Transaction currency
			repTitle3 = MessageMgr(New Guid("b07de16a-6804-4268-965f-1f21a1d845aa"), "Transaction") 'Currency Type: {0}
		Else If Me.Parameters.IsUseReportingCurrencies.Value Then
			repTitle3 = MessageMgr(New Guid("b07de16a-6804-4268-965f-1f21a1d845aa"), "Reporting") 'Currency Type: {0}
		Else
			repTitle3 = MessageMgr(New Guid("ce0422e0-6080-4fa2-a9d4-dd34257e8cd6"), Me.Parameters.CurrencyCode.Value(""), _
			Format(Me.RunParameters.CurrencyAsOfDate.Value(DateTime.Now), "d MMM yyyy"), Me.Parameters.CurrencyType.Value) 'Me.RunParameters.CurrencyRate.Value) 'Currency: {0} as of {1} (Currency Type: {2})
		End If
		
		Dim repTitle4 As String = MessageMgr(New Guid("841ee393-fff4-4d2c-b8cd-bed49adbe46b"), Me.Parameters.WC_MxEffDateRel.Description.Value) 'AR Aged by Invoice as of {0}
		Dim repTitle5 As String
		If Me.Parameters.IsFees.Value(True) And Me.Parameters.IsCosts.Value(True) And Me.Parameters.IsCharges.Value(True) Then
			repTitle5 = "Fees, Costs and Charges"
		Else If Not Me.Parameters.IsCharges.Value(True) And Me.Parameters.IsCosts.Value(True) And Me.Parameters.IsFees.Value(True) Then
			repTitle5 = "Fees and Costs"
		Else If Not Me.Parameters.IsCosts.Value(True) And Me.Parameters.IsCharges.Value(True) And Me.Parameters.IsFees.Value(True) Then
			repTitle5 = "Fees and Charges"
		Else If Not Me.Parameters.IsFees.Value(True) And Me.Parameters.IsCosts.Value(True) And Me.Parameters.IsCharges.Value(True)
			repTitle5 = "Costs and Charges"
		Else If Not Me.Parameters.IsFees.Value(True) And Not Me.Parameters.IsCharges.Value(True) Then
			repTitle5 = "Costs only"
		Else If Not Me.Parameters.IsFees.Value(True) And Not Me.Parameters.IsCosts.Value(True) Then	
			repTitle5 = "Charges only"
		Else
			repTitle5 = "Fees only"
		End If
		
		'set the aging column names
		Dim age1 As String
		Dim age2 As String
		Dim age3 As String
		Dim age4 As String
		Dim age5 As String
		
		Dim sQ As ISelect = QueryBuilder.SelectFrom(Me.QueryNode)
		sQ.TopRows(1)
		sQ.Values(Me.QueryNode.AgingCode1, Me.QueryNode.AgingCode2, Me.QueryNode.AgingCode3, Me.QueryNode.AgingCode4, Me.QueryNode.AgingCode5)
		Dim cQ As ICursor = QuerySession.OpenCursor(sQ)
		If cQ.Read() Then
			age1 = cQ.GetString(0)
			age2 = cQ.GetString(1)
			age3 = cQ.GetString(2)
			age4 = cQ.GetString(3)
			age5 = cQ.GetString(4)
		End If
		cQ.Close()
		
		'Insert headings and aging into the table
		Dim iRH As IInsert = QuerySession.Insert(qRH)
		iRH.Into(qRH.RepTitle1, qRH.RepTitle2, qRH.RepTitle3, qRH.RepTitle4, qRH.AgingCode1, qRH.AgingCode2, qRH.AgingCode3, qRH.AgingCode4, qRH.AgingCode5, qRH.RepTitle5)
		iRH.Values(repTitle1, repTitle2, repTitle3, repTitle4, age1, age2, age3, age4, age5, repTitle5)
		QuerySession.Execute(iRH)
		
		'get the guid for the headings
		Dim sRH As ISelect = QueryBuilder.SelectFrom(qRH)
		sRH.TopRows(1)
		sRH.Values(qRH.WC_MxMatterAgedARPHID)
		
		Dim RH As Guid
		RH = CType(QuerySession.ExecuteScalar(sRH), Guid)
		'Update the metric with the reptitle guid
		Dim uQueryNode As IUpdate = QueryBuilder.Update(Me.QueryNode)
		uQueryNode.Into(Me.QueryNode.RepTitle)
		uQueryNode.Values(RH)
		QuerySession.Execute(uQueryNode)
		
		Dim qRH1 As Query.WC_MxMatterAgedARRH = Query.WC_MxMatterAgedARRH.Current
		Dim dRH1 As IDelete = QuerySession.Delete(qRH1)
		QuerySession.Execute(dRH1)
		
		'Set the headings
		Dim repTitle11 As String = MessageMgr(New Guid("491bd272-5de3-4c9e-8b37-c04deaddcc76"), Me.Parameters.WC_MxEffDateRel.Description.Value) 'As of {0}
		Dim repTitle21 As String = MessageMgr(New Guid("e15426d2-4150-4cc1-ba86-8bdcd6878414"), Format(Me.Parameters.BillsThruDate.Value(DateTime.Now), "d MMM yyyy"), _
		Format(Me.Parameters.PaymentsThruDate.Value(DateTime.Now), "d MMM yyyy"), Format(Me.Parameters.AgingDate.Value(DateTime.Now), "d MMM yyyy")) '(Bill thru Date {0}, Payments thru Date {1} and Aging Date {2}) 
		
		Dim repTitle31 As String
		If Me.Parameters.IsNoCurrencyConversion.Value Then
			'' Transaction currency
			repTitle31 = MessageMgr(New Guid("b07de16a-6804-4268-965f-1f21a1d845aa"), "Transaction") 'Currency Type: {0}
		Else
			repTitle31 = MessageMgr(New Guid("ce0422e0-6080-4fa2-a9d4-dd34257e8cd6"), Me.Parameters.CurrencyCode.Value(""), _
			Format(Me.RunParameters.CurrencyAsOfDate.Value(DateTime.Now), "d MMM yyyy"), Me.RunParameters.CurrencyRate.Value) 'Currency: {0} as of {1} (Currency Type: {2})
			'Dim repTitle4 As String
		End If
		
		'set the aging column names
		Dim age11 As String
		Dim age21 As String
		Dim age31 As String
		Dim age41 As String
		Dim age51 As String
		
		Dim sQ1 As ISelect = QueryBuilder.SelectFrom(Me.QueryNode)
		sQ1.TopRows(1)
		sQ1.Values(Me.QueryNode.AgingCode1, Me.QueryNode.AgingCode2, Me.QueryNode.AgingCode3, Me.QueryNode.AgingCode4, Me.QueryNode.AgingCode5)
		Dim cQ1 As ICursor = QuerySession.OpenCursor(sQ)
		If cQ1.Read() Then
			age11 = cQ.GetString(0)
			age21 = cQ.GetString(1)
			age31 = cQ.GetString(2)
			age41 = cQ.GetString(3)
			age51 = cQ.GetString(4)
		End If
		cQ1.Close()
		'Insert headings and aging into the table
		Dim iRH1 As IInsert = QuerySession.Insert(qRH1)
		iRH1.Into(qRH1.RepTitle1, qRH1.RepTitle2, qRH1.RepTitle3, qRH1.AgingCode1, qRH1.AgingCode2, qRH1.AgingCode3, qRH1.AgingCode4, qRH1.AgingCode5)
		iRH1.Values(repTitle11, repTitle21, repTitle31, age11, age21, age31, age41, age51)
		QuerySession.Execute(iRH1)
		
		'get the guid for the headings
		Dim sRH1 As ISelect = QueryBuilder.SelectFrom(qRH1)
		sRH1.TopRows(1)
		sRH1.Values(qRH1.WC_MxMatterAgedARRHID)
		
		Dim RH1 As Guid
		RH1 = CType(QuerySession.ExecuteScalar(sRH1), Guid)
		'Update the metric with the reptitle guid
		Dim uQueryNode1 As IUpdate = QueryBuilder.Update(Me.QueryNode)
		uQueryNode1.Into(Me.QueryNode.RepTitle1)
		uQueryNode1.Values(RH1)
		QuerySession.Execute(uQueryNode1)

		If Me.Framework.QuerySession.InWork Then
			Me.Framework.QuerySession.EndWork()
		End If	
		
		Dim selZeros As IUpdate = Me.QuerySession.Update(Me.QueryNode)
		With selZeros
			.Into(Me.QueryNode.ARFees).Values(Exp.Coalesce(Me.QueryNode.ARFees,0))
			.Into(Me.QueryNode.ARHardCosts).Values(Exp.Coalesce(Me.QueryNode.ARHardCosts,0))
			.Into(Me.QueryNode.ARSoftCosts).Values(Exp.Coalesce(Me.QueryNode.ARSoftCosts,0))
			.Into(Me.QueryNode.ArTax).Values(Exp.Coalesce(Me.QueryNode.ArTax,0))
			.Into(Me.QueryNode.ARInterest).Values(Exp.Coalesce(Me.QueryNode.ARInterest,0))
			.Into(Me.QueryNode.AROnAcct).Values(Exp.Coalesce(Me.QueryNode.AROnAcct,0))
			.Into(Me.QueryNode.AROther).Values(Exp.Coalesce(Me.QueryNode.AROther,0))
			.Into(Me.QueryNode.ARUnallocated).Values(Exp.Coalesce(Me.QueryNode.ARUnallocated,0))
			.Into(Me.QueryNode.ARTotal).Values(Exp.Coalesce(Me.QueryNode.ARTotal,0))
			.Into(Me.QueryNode.ArCosts).Values(Exp.Coalesce(Me.QueryNode.ArCosts,0))
			.Into(Me.QueryNode.ARCharges).Values(Exp.Coalesce(Me.QueryNode.ARCharges,0))
			.Into(Me.QueryNode.ARDoubtFul).Values(Exp.Coalesce(Me.QueryNode.ARDoubtFul,0))
			.Into(Me.QueryNode.Aging1).Values(Exp.Coalesce(Me.QueryNode.Aging1,0))
			.Into(Me.QueryNode.Aging2).Values(Exp.Coalesce(Me.QueryNode.Aging2,0))
			.Into(Me.QueryNode.Aging3).Values(Exp.Coalesce(Me.QueryNode.Aging3,0))
			.Into(Me.QueryNode.Aging4).Values(Exp.Coalesce(Me.QueryNode.Aging4,0))
			.Into(Me.QueryNode.Aging5).Values(Exp.Coalesce(Me.QueryNode.Aging5,0))
			.Into(Me.QueryNode.FeeAging1).Values(Exp.Coalesce(Me.QueryNode.FeeAging1,0))
			.Into(Me.QueryNode.FeeAging2).Values(Exp.Coalesce(Me.QueryNode.FeeAging2,0))
			.Into(Me.QueryNode.FeeAging3).Values(Exp.Coalesce(Me.QueryNode.FeeAging3,0))
			.Into(Me.QueryNode.FeeAging4).Values(Exp.Coalesce(Me.QueryNode.FeeAging4,0))
			.Into(Me.QueryNode.FeeAging5).Values(Exp.Coalesce(Me.QueryNode.FeeAging5,0))
			.Into(Me.QueryNode.HCoAging1).Values(Exp.Coalesce(Me.QueryNode.HCoAging1,0))
			.Into(Me.QueryNode.HCoAging2).Values(Exp.Coalesce(Me.QueryNode.HCoAging2,0))
			.Into(Me.QueryNode.HCoAging3).Values(Exp.Coalesce(Me.QueryNode.HCoAging3,0))
			.Into(Me.QueryNode.HCoAging4).Values(Exp.Coalesce(Me.QueryNode.HCoAging4,0))
			.Into(Me.QueryNode.HCoAging5).Values(Exp.Coalesce(Me.QueryNode.HCoAging5,0))
			.Into(Me.QueryNode.SCoAging1).Values(Exp.Coalesce(Me.QueryNode.SCoAging1,0))
			.Into(Me.QueryNode.SCoAging2).Values(Exp.Coalesce(Me.QueryNode.SCoAging2,0))
			.Into(Me.QueryNode.SCoAging3).Values(Exp.Coalesce(Me.QueryNode.SCoAging3,0))
			.Into(Me.QueryNode.SCoAging4).Values(Exp.Coalesce(Me.QueryNode.SCoAging4,0))
			.Into(Me.QueryNode.SCoAging5).Values(Exp.Coalesce(Me.QueryNode.SCoAging5,0))
			.Into(Me.QueryNode.TaxAging1).Values(Exp.Coalesce(Me.QueryNode.TaxAging1,0))
			.Into(Me.QueryNode.TaxAging2).Values(Exp.Coalesce(Me.QueryNode.TaxAging2,0))
			.Into(Me.QueryNode.TaxAging3).Values(Exp.Coalesce(Me.QueryNode.TaxAging3,0))
			.Into(Me.QueryNode.TaxAging4).Values(Exp.Coalesce(Me.QueryNode.TaxAging4,0))
			.Into(Me.QueryNode.TaxAging5).Values(Exp.Coalesce(Me.QueryNode.TaxAging5,0))
			.Into(Me.QueryNode.IntAging1).Values(Exp.Coalesce(Me.QueryNode.IntAging1,0))
			.Into(Me.QueryNode.IntAging2).Values(Exp.Coalesce(Me.QueryNode.IntAging2,0))
			.Into(Me.QueryNode.IntAging3).Values(Exp.Coalesce(Me.QueryNode.IntAging3,0))
			.Into(Me.QueryNode.IntAging4).Values(Exp.Coalesce(Me.QueryNode.IntAging4,0))
			.Into(Me.QueryNode.IntAging5).Values(Exp.Coalesce(Me.QueryNode.IntAging5,0))
			.Into(Me.QueryNode.BOAAging1).Values(Exp.Coalesce(Me.QueryNode.BOAAging1,0))
			.Into(Me.QueryNode.BOAAging2).Values(Exp.Coalesce(Me.QueryNode.BOAAging2,0))
			.Into(Me.QueryNode.BOAAging3).Values(Exp.Coalesce(Me.QueryNode.BOAAging3,0))
			.Into(Me.QueryNode.BOAAging4).Values(Exp.Coalesce(Me.QueryNode.BOAAging4,0))
			.Into(Me.QueryNode.BOAAging5).Values(Exp.Coalesce(Me.QueryNode.BOAAging5,0))
			.Into(Me.QueryNode.OthAging1).Values(Exp.Coalesce(Me.QueryNode.OthAging1,0))
			.Into(Me.QueryNode.OthAging2).Values(Exp.Coalesce(Me.QueryNode.OthAging2,0))
			.Into(Me.QueryNode.OthAging3).Values(Exp.Coalesce(Me.QueryNode.OthAging3,0))
			.Into(Me.QueryNode.OthAging4).Values(Exp.Coalesce(Me.QueryNode.OthAging4,0))
			.Into(Me.QueryNode.OthAging5).Values(Exp.Coalesce(Me.QueryNode.OthAging5,0))			
		End With
		Me.QuerySession.Execute(selZEros)
		
		Dim selZerosArMaster As ISelect = Me.QuerySession.Select(Me.QueryNode)
		With selZerosArMaster 
			.Values(Me.QueryNode.ArMaster)
			.GroupBy(Me.QueryNode.ArMaster)
			
			.Having(Exp.SUM(Me.QueryNode.ARFees).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ARHardCosts).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ARSoftCosts).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ArTax).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ARInterest).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.AROnAcct).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.AROther).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ARUnallocated).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ARTotal).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ArCosts).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ARCharges).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.ARDoubtFul).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.Aging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.Aging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.Aging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.Aging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.Aging5).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.FeeAging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.FeeAging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.FeeAging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.FeeAging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.FeeAging5).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.HCoAging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.HCoAging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.HCoAging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.HCoAging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.HCoAging5).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.SCoAging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.SCoAging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.SCoAging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.SCoAging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.SCoAging5).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.TaxAging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.TaxAging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.TaxAging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.TaxAging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.TaxAging5).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.IntAging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.IntAging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.IntAging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.IntAging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.IntAging5).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.BOAAging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.BOAAging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.BOAAging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.BOAAging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.BOAAging5).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.OthAging1).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.OthAging2).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.OthAging3).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.OthAging4).IsBetween(0,.5).And( _
					Exp.SUM(Me.QueryNode.OthAging5).IsBetween(0,.5)))))))))))))))))))))))))))))))))))))))))))))))))))).Or( _
					Exp.SUM(Me.QueryNode.ARFees.Plus(Me.QueryNode.ARCosts).Plus(Me.QueryNode.AROther).Plus( _
							Me.QueryNode.ARTotal).Plus(Me.QueryNode.AROnAcct)).IsBetween(0, .5)))
				
		End With
		
		
		'CNA - Delete all the records with ALL ZEROS
		Dim delZeros As IDelete = Me.QuerySession.Delete(Me.QueryNode)
		delZeros.Where(Me.QueryNode.ArMaster.IsIn(selZerosArMaster))
		Me.QuerySession.Execute(delZeros)
		
        ' set complete
        scheduler.Complete("Completed", "")		
		
End Sub

Sub SaveRunParameters()

	' save parameter values
    With Me.RunParameters
            .Description.Value = Me.Parameters.Description.Value	
			.IsUseReportingCurrencies.Value = Me.Parameters.IsUseReportingCurrencies.Value
			.IsNoCurrencyConversion.Value = Me.Parameters.IsNoCurrencyConversion.Value
			If Not (Me.Parameters.IsNoCurrencyConversion.Value Or Me.Parameters.IsUseReportingCurrencies.Value) Then
				Me.logmgr.Info("DO NOT Clear Metric Currency")
	            .CurrencyCode.Value = Me.Parameters.CurrencyCode.Value
			Else
			Me.logmgr.Info("Clear Metric Currency")
				.CurrencyCode.Clear
				.MetricCurrency.Clear
			End If
            .CurrencyType.Value = Me.Parameters.CurrencyType.Value
            .CurrencyCalcDate.Value = Me.Parameters.CurrencyCalcDate.Value
		
			If Me.Parameters.CurrencyAsOfDate.IsNull Then
				If Me.Parameters.CurrencyCalcDate.Value.ToLower = "asof" Or _
					Me.Parameters.CurrencyCalcDate.Value.ToLower = "current" Then
						.CurrencyAsOfDate.Value = Me.Framework.QuerySession.Info.CurrentTime.Today
				End If
			Else
	                .CurrencyAsOfDate.Value = Me.Parameters.CurrencyAsOfDate.Value
			End If
			
            .CurrencyRate.Value = Me.Parameters.CurrencyRate.Value
			.ReportOnDate.Value = Me.Parameters.ReportOnDate.Value
            .AgingCode.Value = Me.Parameters.AgingCode.Value
            .AgingDateOption.Value = Me.Parameters.AgingDateOption.Value
            .AgingDate.Value = Me.Parameters.AgingDate.Value
            .BillsThruDateOption.Value = Me.Parameters.BillsThruDateOption.Value
            .BillsThruDate.Value = Me.Parameters.BillsThruDate.Value
            .PaymentsThruDateOption.Value = Me.Parameters.PaymentsThruDateOption.Value
            .PaymentsThruDate.Value = Me.Parameters.PaymentsThruDate.Value
            .IsIncludeReverse.Value = Me.Parameters.IsIncludeReverse.Value
            .IsIncludeUnallocated.Value = Me.Parameters.IsIncludeUnallocated.Value
            .MatterSelectionCode.Value = Me.Parameters.MatterSelectionCode.Value
            .OverAmount.Value = Me.Parameters.OverAmount.Value
            .ArMatterCode.Value = Me.Parameters.ArMatterCode.Value
            .IsExcludeDoubtful.Value = Me.Parameters.IsExcludeDoubtful.Value
			.IsAgeByDueDate.Value = Me.Parameters.IsAgeByDueDate.Value(False)
            .IsCurrentValues.Value = Me.Parameters.IsCurrentValues.Value
            .IsIncWorkTkpr.Value = Me.Parameters.IsIncWorkTkpr.Value
			.WC_MxEffDate.Value = Me.Parameters.WC_MxEffDate.Value
			.IsFees.Value = Me.Parameters.IsFees.Value(True)
			.IsCosts.Value = Me.Parameters.IsCosts.Value(True)
			.IsCharges.Value = Me.Parameters.IsCharges.Value(True)
			
            If Not Me.Parameters.ReqMatters.IsNull Then
                .ReqMatters.Value = Me.Parameters.ReqMatters.Value
            End If
	    	If Not Me.Parameters.ReqMattDate.IsNull Then
                .ReqMattdate.Value = Me.Parameters.ReqMattDate.Value
            End If
            If Not Me.Parameters.ReqInvoices.IsNull Then
                .ReqInvoices.Value = Me.Parameters.ReqInvoices.Value
            End If
            If Not Me.Parameters.ReqWorkTkpr.IsNull Then
                .ReqWorkTkpr.Value = Me.Parameters.ReqWorkTkpr.Value
            End If
            If Not Me.Parameters.ReqTimeCard.IsNull Then
                .ReqTimeCard.Value = Me.Parameters.ReqTimeCard.Value
            End If
            If Not Me.Parameters.ReqCostCard.IsNull Then
                .ReqCostCard.Value = Me.Parameters.ReqCostCard.Value
            End If
            If Not Me.Parameters.ReqChrgCard.IsNull Then
                .ReqChrgCard.Value = Me.Parameters.ReqChrgCard.Value
            End If
            If Not Me.Parameters.RoundTolerance.IsNull Then
                .RoundTolerance.Value = Me.Parameters.RoundTolerance.Value
            End If
			If Not Me.Parameters.metrictkprsplitlist.isnull Then
				.MetricTkprSplitList.Value = Me.Parameters.MetricTkprSplitList.Value
			End If
     End With	
End Sub

Private Sub InsertIntoMetricTable(ByRef tempOutput As TempOutputDef, ByRef qrySession As ISession)
	
	Dim arm As Query.ARMaster = Query.ARMaster.Current
	Dim selAR As ISelect = QueryBuilder.SelectFrom(tempOutput)
	With selAR
		.Values(arm.InvMaster, _
				tempOutput.Currency, _
				tempOutput.BillTkpr, _
				tempOutput.Matter, _
				tempOutput.ClntDate, _
				tempOutput.MattDate, _
				exp.max(tempOutput.ArMaster), _
				exp.Max(exp.Coalesce(tempOutput.LastPaymentDate, #1/1/1800#)), _
				exp.MAX(exp.Coalesce(tempOutput.LastPaymentNxDate, #1/1/1800#)), _
				tempOutput.AgingBucket, _
				tempOutput.CurrFactor, _
				exp.Sum(tempOutput.ARFees), _
				exp.Sum(tempOutput.ARHardCosts), _
				exp.Sum(tempOutput.ARSoftCosts), _
				exp.Sum(tempOutput.ArCosts), _
				exp.Sum(tempOutput.ARTax), _
				exp.Sum(tempOutput.ARInterest), _
				exp.Sum(tempOutput.AROnAcct), _
				exp.Sum(tempOutput.AROther), _
				exp.Sum(tempOutput.ARCharges), _
				exp.Sum(tempOutput.ARUnallocated), _
				exp.Sum(tempOutput.ARTotal), _
				exp.Sum(tempOutput.ARDoubtFul), _
				tempOutput.OrigInvAmt, _
				exp.Sum(tempOutput.Aging1), _
				exp.Sum(tempOutput.feeAging1), _
				exp.Sum(tempOutput.hcoAging1), _
				exp.Sum(tempOutput.scoAging1), _
				exp.Sum(tempOutput.taxAging1), _
				exp.Sum(tempOutput.intAging1), _
				exp.Sum(tempOutput.boaAging1), _
				exp.Sum(tempOutput.othAging1), _
				exp.Sum(tempOutput.Aging2), _
				exp.Sum(tempOutput.feeAging2), _
				exp.Sum(tempOutput.hcoAging2), _
				exp.Sum(tempOutput.scoAging2), _
				exp.Sum(tempOutput.taxAging2), _
				exp.Sum(tempOutput.intAging2), _
				exp.Sum(tempOutput.boaAging2), _
				exp.Sum(tempOutput.othAging2), _
				exp.Sum(tempOutput.Aging3), _
				exp.Sum(tempOutput.feeAging3), _
				exp.Sum(tempOutput.hcoAging3), _
				exp.Sum(tempOutput.scoAging3), _
				exp.Sum(tempOutput.taxAging3), _
				exp.Sum(tempOutput.intAging3), _
				exp.Sum(tempOutput.boaAging3), _
				exp.Sum(tempOutput.othAging3), _
				exp.Sum(tempOutput.Aging4), _
				exp.Sum(tempOutput.feeAging4), _
				exp.Sum(tempOutput.hcoAging4), _
				exp.Sum(tempOutput.scoAging4), _
				exp.Sum(tempOutput.taxAging4), _
				exp.Sum(tempOutput.intAging4), _
				exp.Sum(tempOutput.boaAging4), _
				exp.Sum(tempOutput.othAging4), _
				exp.Sum(tempOutput.Aging5), _
				exp.Sum(tempOutput.feeAging5), _
				exp.Sum(tempOutput.hcoAging5), _
				exp.Sum(tempOutput.scoAging5), _
				exp.Sum(tempOutput.taxAging5), _
				exp.Sum(tempOutput.intAging5), _
				exp.Sum(tempOutput.boaAging5), _
				exp.Sum(tempOutput.othAging5), _
				tempOutput.IsRounding, _
				tempOutput.CurrencyDate, _
				tempOutput.DaysOld, _
				exp.Max(tempOutput.ChkDate), _
				tempOutput.ARType, _
				exp.SUM(tempOutput.UnappliedBOAFees), _
				exp.SUM(tempOutput.UnappliedBOACosts))
		.innerJoin(tempOutput, arm, tempOutput.ARMaster.IsEqualTo(arm.ARMIndex))		
		.GroupBy(arm.InvMaster, _
				 tempOutput.Currency, _
				 tempOutput.BillTkpr, _
				 tempOutput.Matter, _
				 tempOutput.ClntDate, _
				 tempOutput.MattDate, _
				 tempOutput.AgingBucket, _
				 tempOutput.CurrFactor, _
				 tempOutput.OrigInvAmt, _
				 tempOutput.IsRounding, _
				 tempOutput.CurrencyDate, _
				 tempOutput.DaysOld, _
				 tempOutput.ARType)
	End With

Me.logmgr.Info("InsertIntoMetricTable: " & QuerySession.Translateformatted(selAR))

	With qrySession.Insert(Me.QueryNode).Immediate
		.Into( _
			Me.QueryNode.InvMaster, _
			Me.QueryNode.Currency, _
			Me.QueryNode.BillTkpr, _
			Me.QueryNode.Matter, _
			Me.QueryNode.ClntDate, _
			Me.QueryNode.MattDate, _
			Me.QueryNode.ArMaster, _
			Me.QueryNode.LastPaymentDate, _
			Me.QueryNode.LastPaymentNxDate, _
			Me.QueryNode.AgingBucket, _
			Me.QueryNode.CurrFactor, _
			Me.QueryNode.ARFees, _
			Me.QueryNode.ARHardCosts, _
			Me.QueryNode.ARSoftCosts, _
			Me.QueryNode.ArCosts, _
			Me.QueryNode.ARTax, _
			Me.QueryNode.ARInterest, _
			Me.QueryNode.AROnAcct, _
			Me.QueryNode.AROther, _
			Me.QueryNode.ARCharges, _
			Me.QueryNode.ARUnallocated, _
			Me.QueryNode.ARTotal, _
			Me.QueryNode.ARDoubtFul, _
			Me.QueryNode.OrigInvAmt, _
			Me.QueryNode.Aging1, _
			Me.QueryNode.feeAging1, _
			Me.QueryNode.hcoAging1, _
			Me.QueryNode.scoAging1, _
			Me.QueryNode.taxAging1, _
			Me.QueryNode.intAging1, _
			Me.QueryNode.boaAging1, _
			Me.QueryNode.othAging1, _
			Me.QueryNode.Aging2, _
			Me.QueryNode.feeAging2, _
			Me.QueryNode.hcoAging2, _
			Me.QueryNode.scoAging2, _
			Me.QueryNode.taxAging2, _
			Me.QueryNode.intAging2, _
			Me.QueryNode.boaAging2, _
			Me.QueryNode.othAging2, _
			Me.QueryNode.Aging3, _
			Me.QueryNode.feeAging3, _
			Me.QueryNode.hcoAging3, _
			Me.QueryNode.scoAging3, _
			Me.QueryNode.taxAging3, _
			Me.QueryNode.intAging3, _
			Me.QueryNode.boaAging3, _
			Me.QueryNode.othAging3, _
			Me.QueryNode.Aging4, _
			Me.QueryNode.feeAging4, _
			Me.QueryNode.hcoAging4, _
			Me.QueryNode.scoAging4, _
			Me.QueryNode.taxAging4, _
			Me.QueryNode.intAging4, _
			Me.QueryNode.boaAging4, _
			Me.QueryNode.othAging4, _
			Me.QueryNode.Aging5, _
			Me.QueryNode.feeAging5, _
			Me.QueryNode.hcoAging5, _
			Me.QueryNode.scoAging5, _
			Me.QueryNode.taxAging5, _
			Me.QueryNode.intAging5, _
			Me.QueryNode.boaAging5, _
			Me.QueryNode.othAging5, _
			Me.QueryNode.IsRounding, _
			Me.QueryNode.CurrencyDate, _
			Me.QueryNode.DaysOld, _
			Me.QueryNode.ChkDate, _
			Me.QueryNode.ARType, _
			Me.QueryNode.UnappliedBOAFees, _
			Me.QueryNode.UnappliedBOACosts)
		.From(selAR)
	End With
End Sub

Private Sub GetBOA(ByRef tempOutput As TempOutputDef, ByRef reqBOACurrency As IExpression)
	
	Dim BOABal As New BOABalDef	
	Dim im As Query.invmaster = Query.InvMaster.Current
	Dim qryBOABalances As Query.WC_BOAUnAppliedBalances = Query.WC_BOAUnAppliedBalances.Current
	Dim selBOABal As ISelect = Me.QuerySession.Select(qryBOABalances)
	Dim iUpd As IUpdate = QueryBuilder.Update(tempOutput)
	Dim cb As Query.ChrgBill = Query.ChrgBill.Current
	
	BOABal.CreateTable(Me.QuerySession)
	
	With selBOABal
		'jsc 10/15/2015 - can't show BOA by invoice because it could be applied to a separate invoice.  Needs to be by matter
		'.Values(im.InvIndex)
		.Values(im.LeadMatter)
		.Values(Exp.SUM(qryBOABalances.BOAPaidAmtFees)) 'Unapplied Fees BOA
		.Values(Exp.SUM(qryBOABalances.BOAPaidAmtCosts)) 'Unapplied Costs BOA
		.Values(Exp.SUM(qryBOABalances.BOAPaidAmtFees.Plus(qryBOABalances.BOAPaidAmtCosts))) 'This is unapplied BOA - total
		.Values(Exp.SUM(qryBOABalances.BOAUnPaidAmtFees)) 'Unpaid Fees BOA
		.Values(Exp.SUM(qryBOABalances.BOAUnPaidAmtCosts)) 'Unpaid Costs BOA
		.Values(Exp.SUM(qryBOABalances.BOAUnPaidAmtFees.Plus(qryBOABalances.BOAUnPaidAmtCosts))) 'This is unpaid BOA - total
		.InnerJoin(im, qryBOABalances, qryBOABalances.InvMaster.IsEqualTo(im.InvIndex))
		'FLS:Rob 6th Oct 2015 IR354676 When Use tran currency ticked can not use reqCurrency as it brings in ARDetail
		.Where(qryBOABalances.ToCurrency.IsEqualTo(reqBOACurrency))
		'.Where(qryBOABalances.ToCurrency.IsEqualTo(reqCurrency))
		.Where(qryBOABalances.FromCurrencyType.IsEqualTo(Me.Parameters.CurrencyType.Value))
		.Where(qryBOABalances.ToCurrencyType.IsEqualTo(Me.Parameters.CurrencyType.Value))
		'.GroupBy(im.InvIndex)
		.GroupBy(im.LeadMatter)
	End With
		
	With Me.QuerySession.Insert(BOABal).Immediate
		.Into(BOABal.LeadMatter, BOABal.UnAppliedBOAFees, BOABal.UnAppliedBOACosts, BOABal.UnAppliedBOA, BOABal.UnPaidBOAFees, BOABal.UnPaidBOACosts, BOABal.UnPaidBOA)
		.From(selBOABal)
	End With
	
	With iUpd
		.into(tempOutput.UnappliedBOAFees, tempOutput.UnappliedBOACosts, tempOutput.UnpaidBOAFees, tempOutput.UnpaidBOACosts)
		.Values(BOABal.UnAppliedBOAFees) 'Unapplied Fees BOA
		.Values(BOABal.UnAppliedBOACosts) 'Unapplied Costs BOA
		.Values(BOABal.UnPaidBOAFees) 'Unpaid Fees BOA
		.Values(BOABal.UnPaidBOACosts) 'Unpaid Costs BOA
		'.innerJoin(BOABal, cb, BOABal.LeadMatter.IsEQualTo(cb))
		.innerJoin(BOABal, tempOutput, BOABal.LeadMatter.IsEqualTo(tempOutput.Matter))
	End With
Me.LogMgr.Info("JSC ***GetBOA():" & QuerySession.TranslateFormatted(iUpd))
	QuerySession.Execute(iUpd)
	
End Sub

Private Sub GetDetail(paramObject As NextGen.Application.DataObject.WC_MxARDaysOldByInvoice, ByRef tempOutput As TempOutputDef)

	'Add index to temp output table	
	tempOutput.CreateIndex(Me.Framework.QuerySession)

	'Create temp table for details
	Dim tempDetail As New TempDetailDef
	tempDetail.CreateTable(Me.Framework.QuerySession)

	GetBillRcptDetail(paramObject, tempOutput, tempDetail)

	'Add index to temp detail table	
	tempDetail.CreateIndex(Me.Framework.QuerySession)

	'Summarize and Insert Working Timekeeper detail records into metric
	'Also summarize and inserted offsetting (negated value) records into the tempOutput table
	'GetWorkTkprData(tempOutput, tempDetail)

	'Summarize non-detail, compare to rounding tolerance, and Insert into output table if not within rounding amount
	Dim RoundValue2 As Decimal 
	Dim RoundValue  As IExpression 
	
	RoundValue2 = paramObject.RoundTolerance.Value(1)
	RoundValue = exp.Value(-1).MultBy(RoundValue2)

	'GetNonRoundData(tempOutput, RoundValue, RoundValue2)

	'Create temp table for rounding differences
	Dim tempRound As New TempRoundDef
	tempRound.CreateTable(Me.Framework.QuerySession)

	'Summarize non-detail, compare to rounding tolerance, and Insert rounding rows into temp rounding table if within rounding amount
	GetRoundAmounts(tempOutput, tempRound, RoundValue, RoundValue2)

	'Add index to temp rounding table	
	tempRound.CreateIndex(Me.Framework.QuerySession)

	'Create temp table for metric detail records corresponding to the rounding difference data
	Dim tempRndData As New tempRndDataDef
	tempRndData.CreateTable(Me.Framework.QuerySession)

	'Get working timekeeper detail from metric, in order to allocate rounding amount to the timekeeper
	'with the largest ARTotal.  This info goes into tempRndData.
	'Then join the tempRndData timekeeper info with the tempRound rounding amounts, inserting
	'rounding records into the metric.
	'GetRoundData(tempRound, tempRndData)

End Sub

Private Sub GetBillRcptDetail(ByRef paramObject As NextGen.Application.DataObject.WC_MxARDaysOldByInvoice, _
							  ByRef tempOutput As TempOutputDef, _
							  ByRef tempDetail As TempDetailDef)
		
	Dim qryAR As NextGen.Application.Query.ARDetail = Query.ARDetail.Current
	Dim qryTimeKeeper As NextGen.Application.Query.Timekeeper = Query.Timekeeper.Current
	Dim qryTimeCard As NextGen.Application.Query.TimeCard = Query.TimeCard.Current
	Dim qryTimeBill As NextGen.Application.Query.TimeBill = Query.TimeBill.Current
	Dim qryTimeRcpt As NextGen.Application.Query.TimeRcpt = Query.TimeRcpt.Current
	Dim qryCostCard As NextGen.Application.Query.CostCard = Query.CostCard.Current
	Dim qryCostBill As NextGen.Application.Query.CostBill = Query.CostBill.Current
	Dim qryCostRcpt As NextGen.Application.Query.CostRcpt = Query.CostRcpt.Current
	Dim qryChrgCard As NextGen.Application.Query.ChrgCard = Query.ChrgCard.Current
	Dim qryChrgBill As NextGen.Application.Query.ChrgBill = Query.ChrgBill.Current
	Dim qryChrgRcpt As NextGen.Application.Query.ChrgRcpt = Query.ChrgRcpt.Current
	Dim qryTkprDate As NextGen.Application.Query.TkprDate = query.TkprDate.Current
	Dim qryMattDate As NextGen.Application.Query.MattDate = query.MattDate.Current
	Dim qryClntDate As NextGen.Application.Query.CliDate = query.CliDate.Current

	Dim selDetail As ISelect = Me.Framework.QuerySession.Select(tempOutput)

	Dim mattDateID As IExpression = tempOutput.mattDate
	Dim clntDateID As IExpression = tempOutput.clntDate
	Dim tkprDateID As IExpression = qryTkprDate.TkprDateID
	Dim expWorkDate As IExpression = exp.Null
'IF aging by work date is added, set the expression for each of the 6 select stmts below.
'Also will need to change the section that summarizes and inserts into the metric.
'Be careful not to change the expressions that are used in the negating section.
'Also, can not do the section re rounding and non-rounding as aging buckets will not match up. 

	'TimeBill

		Dim arType As IExpression
		arType = Exp.Value("Fees")
	
		Dim expFee As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.ARFee.IsEqualTo(0), 0)
			.Else(qryTimeBill.BillAmt.MultBy(qryAR.ARFee.DividedBy(qryAR.ARMaster1.ARFee)))
			expFee = .End
		End With

		tkprDateID = qryTkprDate.TkprDateID
		mattDateID = qryMattDate.MattDateID
		clntDateID = qryClntDate.CliDateID	

		selDetail.InnerJoin(qryAR.ARMaster.IsEqualTo(tempOutput.ArMaster))
		selDetail.InnerJoin(qryTimeBill.ARMaster.IsEqualTo(qryAR.ARMaster))
		If Not paramObject.ReqTimeCard.IsNull Then
			selDetail.InnerJoin(qryTimeBill.TimeCard.IsEqualTo(qryTimeCard.TimeIndex))
			selDetail.Where(paramObject.ReqTimeCard.Value)
		End If
		If Not paramObject.ReqWorkTkpr.IsNull Then
			selDetail.InnerJoin(qryTimeBill.TimeCard1.Timekeeper.IsEqualTo(qryTimeKeeper.TkprIndex))
			selDetail.Where(paramObject.ReqWorkTkpr.Value)
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
			selDetail.InnerJoin(qryTimeBill.TimeCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeBill.TimeCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeBill.TimeCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
			selDetail.InnerJoin(qryTimeBill.TimeCard1.OrigTimeIndex1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(qryTimeBill.ARMaster1.GLDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeBill.TimeCard1.OrigTimeIndex1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(qryTimeBill.ARMaster1.GLDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeBill.TimeCard1.OrigTimeIndex1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryTimeBill.ARMaster1.GLDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If			
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then
			selDetail.InnerJoin(qryTimeBill.TkprEffDate.IsEqualTo(qryTkprDate.TkprDateID))
			selDetail.InnerJoin(qryTimeBill.BillMattEffDate.IsEqualTo(qryMattDate.MattDateID))
			selDetail.InnerJoin(qryTimeBill.TimeCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryTimeBill.InvMaster1.InvDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		'Me.NextMessage = "Msg (GetBillRcptDetail)- 3"		
		selDetail.Distinct.Values(tempOutput.ARMaster)
		selDetail.Values( _
			Exp.SUM(expFee), _
			Exp.SUM(expFee), _
			0, 0, 0, 0, 0, 0, _
			qryTimeBill.Timecard1.TransactionType, _
			qryTimeBill.Timecard1.WorkType, _
			qryTimeBill.Timecard1.TimeType, _
			qryTimeBill.Timecard1.Office, _
			qryTimebill.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate, _
			arType)
		selDetail.GroupBy( _
			tempOutput.ARMaster, _
			qryTimeBill.Timecard1.TransactionType, _
			qryTimeBill.Timecard1.WorkType, _
			qryTimeBill.Timecard1.TimeType, _
			qryTimeBill.Timecard1.Office, _
			qryTimebill.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate)
		With Me.Framework.QuerySession.Insert(tempDetail).Immediate
			.Into( _
				tempDetail.ARDIndex, _
				tempDetail.ARTotal, _
				tempDetail.ARFee, _
				tempDetail.ARHCo, _
				tempDetail.ARSCo, _
				tempDetail.ARTax, _
				tempDetail.ARInterest, _
				tempDetail.ARBOA, _
				tempDetail.AROther, _
				tempDetail.TranType, _
				tempDetail.WorkType, _
				tempDetail.TimeType, _
				tempDetail.WorkOffice, _
				tempDetail.BillOffice, _
				tempDetail.WorkTkpr, _
				tempDetail.DetMattDate, _
				tempDetail.DetClntDate, _
				tempDetail.CurrencyDate, _
				tempDetail.DaysOld, _
				tempDetail.BillThruDate, _
				tempDetail.ChkDate, _
				tempDetail.LastBillNxDate, _
				tempDetail.ARType)
			.From(selDetail)
		End With

	'TimeRcpt
		arType = Exp.Value("Fees")
		With Exp.Case
			.When(qryAR.ARMaster1.ARMaster1.ARFee.IsEqualTo(0), 0)
			.Else(qryTimeRcpt.RcptAmt.Negate)
			expFee = .End
		End With
		selDetail = Me.Framework.QuerySession.Select(tempOutput)
		selDetail.InnerJoin(qryAR.ARMaster.IsEqualTo(tempOutput.ArMaster))
		selDetail.InnerJoin(qryTimeRcpt.ARDetail.IsEqualTo(qryAR.ARDIndex))
		If Not paramObject.ReqTimeCard.IsNull Then
			selDetail.InnerJoin(qryTimeRcpt.TimeCard.IsEqualTo(qryTimeCard.TimeIndex))
			selDetail.Where(paramObject.ReqTimeCard.Value)
		End If
		If Not paramObject.ReqWorkTkpr.IsNull Then
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.Timekeeper.IsEqualTo(qryTimeKeeper.TkprIndex))
			selDetail.Where(paramObject.ReqWorkTkpr.Value)
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.OrigTimeIndex1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(qryTimeRcpt.ARMaster1.GLDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.OrigTimeIndex1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(qryTimeRcpt.ARMaster1.GLDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.OrigTimeIndex1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryTimeRcpt.ARMaster1.GLDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If			
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then
			selDetail.InnerJoin(qryTimeRcpt.RcptTkprEffDate.IsEqualTo(qryTkprDate.TkprDateID))
			selDetail.InnerJoin(qryTimeRcpt.BillMattEffDate.IsEqualTo(qryMattDate.MattDateID))
			selDetail.InnerJoin(qryTimeRcpt.TimeCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryTimeRcpt.ARMaster1.RcptMaster1.RcptDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		'Me.NextMessage = "Msg (GetBillRcptDetail)- 4"		
		selDetail.Distinct.Values(tempOutput.ARMaster)
		selDetail.Values( _
			Exp.SUM(expFee), _
			Exp.SUM(expFee), _
			0, 0, 0, 0, 0, 0, _
			qryTimeRcpt.Timecard1.TransactionType, _
			qryTimeRcpt.Timecard1.WorkType, _
			qryTimeRcpt.Timecard1.TimeType, _
			qryTimeRcpt.Timecard1.Office, _
			qryTimeRcpt.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate, _
			arType)
		selDetail.GroupBy( _
			tempOutput.ARMaster, _
			qryTimeRcpt.Timecard1.TransactionType, _
			qryTimeRcpt.Timecard1.WorkType, _
			qryTimeRcpt.Timecard1.TimeType, _
			qryTimeRcpt.Timecard1.Office, _
			qryTimeRcpt.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate)
		With Me.Framework.QuerySession.Insert(tempDetail).Immediate
			.Into( _
				tempDetail.ARDIndex, _
				tempDetail.ARTotal, _
				tempDetail.ARFee, _
				tempDetail.ARHCo, _
				tempDetail.ARSCo, _
				tempDetail.ARTax, _
				tempDetail.ARInterest, _
				tempDetail.ARBOA, _
				tempDetail.AROther, _
				tempDetail.TranType, _
				tempDetail.WorkType, _
				tempDetail.TimeType, _
				tempDetail.WorkOffice, _
				tempDetail.BillOffice, _
				tempDetail.WorkTkpr, _
				tempDetail.DetMattDate, _
				tempDetail.DetClntDate, _
				tempDetail.CurrencyDate, _
				tempDetail.DaysOld, _
				tempDetail.BillThruDate, _
				tempDetail.ChkDate, _
				tempDetail.LastBillNxDate, _
				tempDetail.ARType)
			.From(selDetail)
		End With

	'CostBill
		arType = Exp.Value("Costs")
		Dim expHCo As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.ARHCo.IsEqualTo(0), 0)
			.When(qryCostBill.CostCard1.IsHardCost.IsTrue, qryCostBill.BillAmt.MultBy(qryAR.ARHCo.DividedBy(qryAR.ARMaster1.ARHCo)))
			.Else(0)
			expHCo = .End
		End With	
		Dim expSCo As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.ARSCo.IsEqualTo(0), 0)
			.When(qryCostBill.CostCard1.IsHardCost.IsFalse, qryCostBill.BillAmt.MultBy(qryAR.ARSCo.DividedBy(qryAR.ARMaster1.ARSCo)))
			.Else(0)
			expSCo = .End
		End With
		selDetail = Me.Framework.QuerySession.Select(tempOutput)
		selDetail.InnerJoin(qryAR.ARMaster.IsEqualTo(tempOutput.ArMaster))
		selDetail.InnerJoin(qryCostBill.ARMaster.IsEqualTo(qryAR.ARMaster))
		If Not paramObject.ReqCostCard.IsNull Then
			selDetail.InnerJoin(qryCostBill.CostCard.IsEqualTo(qryCostCard.CostIndex))
			selDetail.Where(paramObject.ReqCostCard.Value)
		End If
		If Not paramObject.ReqWorkTkpr.IsNull Then
			selDetail.InnerJoin(qryCostBill.CostCard1.Timekeeper.IsEqualTo(qryTimeKeeper.TkprIndex))
			selDetail.Where(paramObject.ReqWorkTkpr.Value)
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
			selDetail.InnerJoin(qryCostBill.Costcard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryCostBill.Costcard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryCostBill.Costcard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
			selDetail.InnerJoin(qryCostBill.Costcard1.OrigCostCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(qryCostBill.ARMaster1.GLDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryCostBill.Costcard1.OrigCostCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(qryCostBill.ARMaster1.GLDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryCostBill.Costcard1.OrigCostCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryCostBill.ARMaster1.GLDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If			
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then
			selDetail.InnerJoin(qryCostBill.TkprEffDate.IsEqualTo(qryTkprDate.TkprDateID))
			selDetail.InnerJoin(qryCostBill.BillMattEffDate.IsEqualTo(qryMattDate.MattDateID))
			selDetail.InnerJoin(qryCostBill.CostCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryCostBill.InvMaster1.InvDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If	
		selDetail.Distinct.Values(tempOutput.ARMaster)
		selDetail.Values( _
			Exp.SUM(expHCo.Plus(expSCo)), _
			0, _
			Exp.SUM(expHCo), _
			Exp.SUM(expSCo), _
			0, 0, 0, 0, _
			qryCostBill.Costcard1.TransactionType, _
			qryCostBill.Costcard1.WorkType, _
			qryCostBill.Costcard1.CostType, _
			qryCostBill.Costcard1.Office, _
			qryCostBill.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate, _
			arType)
		selDetail.GroupBy( _
			tempOutput.ARMaster, _
			qryCostBill.Costcard1.TransactionType, _
			qryCostBill.Costcard1.WorkType, _
			qryCostBill.Costcard1.CostType, _
			qryCostBill.Costcard1.Office, _
			qryCostBill.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate)
		With Me.Framework.QuerySession.Insert(tempDetail).Immediate
			.Into( _
				tempDetail.ARDIndex, _
				tempDetail.ARTotal, _
				tempDetail.ARFee, _
				tempDetail.ARHCo, _
				tempDetail.ARSCo, _
				tempDetail.ARTax, _
				tempDetail.ARInterest, _
				tempDetail.ARBOA, _
				tempDetail.AROther, _
				tempDetail.TranType, _
				tempDetail.WorkType, _
				tempDetail.CostType, _
				tempDetail.WorkOffice, _
				tempDetail.BillOffice, _
				tempDetail.WorkTkpr, _
				tempDetail.DetMattDate, _
				tempDetail.DetClntDate, _
				tempDetail.CurrencyDate, _
				tempDetail.DaysOld, _
				tempDetail.BillThruDate, _
				tempDetail.ChkDate, _
				tempDetail.LastBillNxDate, _
				tempDetail.ArType)
			.From(selDetail)
		End With
		arType = Exp.Value("Costs")
		With Exp.Case
			.When(qryAR.ARMaster1.ARMaster1.ARHCo.IsEqualTo(0), 0)
			.When(qryCostRcpt.CostCard1.IsHardCost.IsTrue, qryCostRcpt.RcptAmt.Negate)
			.Else(0)
			expHCo = .End
		End With
		With Exp.Case
			.When(qryAR.ARMaster1.ARMaster1.ARSCo.IsEqualTo(0), 0)
			.When(qryCostRcpt.CostCard1.IsHardCost.IsFalse, qryCostRcpt.RcptAmt.Negate)
			.Else(0)
			expSCo = .End
		End With
		selDetail = Me.Framework.QuerySession.Select(tempOutput)
		selDetail.InnerJoin(qryAR.ARMaster.IsEqualTo(tempOutput.ArMaster))
		selDetail.InnerJoin(qryCostRcpt.ARDetail.IsEqualTo(qryAR.ARDIndex))
		If Not paramObject.ReqCostCard.IsNull Then
			selDetail.InnerJoin(qryCostRcpt.CostCard.IsEqualTo(qryCostCard.CostIndex))
			selDetail.Where(paramObject.ReqCostCard.Value)
		End If
		If Not paramObject.ReqWorkTkpr.IsNull Then
			selDetail.InnerJoin(qryCostRcpt.CostCard1.Timekeeper.IsEqualTo(qryTimeKeeper.TkprIndex))
			selDetail.Where(paramObject.ReqWorkTkpr.Value)
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
			selDetail.InnerJoin(qryCostRcpt.CostCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryCostRcpt.CostCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryCostRcpt.CostCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
			selDetail.InnerJoin(qryCostRcpt.CostCard1.OrigCostCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(qryCostRcpt.ARMaster1.GLDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryCostRcpt.CostCard1.OrigCostCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(qryCostRcpt.ARMaster1.GLDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryCostRcpt.CostCard1.OrigCostCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryCostRcpt.ARMaster1.GLDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If			
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then
			selDetail.InnerJoin(qryCostRcpt.RcptTkprEffDate.IsEqualTo(qryTkprDate.TkprDateID))
			selDetail.InnerJoin(qryCostRcpt.BillMattEffDate.IsEqualTo(qryMattDate.MattDateID))
			selDetail.InnerJoin(qryCostRcpt.CostCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryCostRcpt.ARMaster1.RcptMaster1.RcptDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
	'Me.NextMessage = "Msg (GetBillRcptDetail)- 8"		
		selDetail.Distinct.Values(tempOutput.ARMaster)
		selDetail.Values( _
			Exp.SUM(expHCo.Plus(expSCo)), _
			0, _
			Exp.SUM(expHCo), _
			Exp.SUM(expSCo), _
			0, 0, 0, 0, _
			qryCostRcpt.Costcard1.TransactionType, _
			qryCostRcpt.Costcard1.WorkType, _
			qryCostRcpt.Costcard1.CostType, _
			qryCostRcpt.Costcard1.Office, _
			qryCostRcpt.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate, _
			arType)
		selDetail.GroupBy( _
			tempOutput.ARMaster, _
			qryCostRcpt.Costcard1.TransactionType, _
			qryCostRcpt.Costcard1.WorkType, _
			qryCostRcpt.Costcard1.CostType, _
			qryCostRcpt.Costcard1.Office, _
			qryCostRcpt.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate)
		With Me.Framework.QuerySession.Insert(tempDetail).Immediate
			.Into( _
				tempDetail.ARDIndex, _
				tempDetail.ARTotal, _
				tempDetail.ARFee, _
				tempDetail.ARHCo, _
				tempDetail.ARSCo, _
				tempDetail.ARTax, _
				tempDetail.ARInterest, _
				tempDetail.ARBOA, _
				tempDetail.AROther, _
				tempDetail.TranType, _
				tempDetail.WorkType, _
				tempDetail.CostType, _
				tempDetail.WorkOffice, _
				tempDetail.BillOffice, _
				tempDetail.WorkTkpr, _
				tempDetail.DetMattDate, _
				tempDetail.DetClntDate, _
				tempDetail.CurrencyDate, _
				tempDetail.DaysOld, _
				tempDetail.BillThruDate, _
				tempDetail.ChkDate, _
				tempDetail.LastBillNxDate, _
				tempDetail.ARType)
			.From(selDetail)
		End With
		arType = Exp.Value("Charges")
		Dim expTax As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.ARTax.IsEqualTo(0), 0)
			.When(qryChrgBill.ChrgCard1.ChrgType1.ChrgCatList.IsEqualTo("Tax"), qryChrgBill.BillAmt.MultBy(qryAR.ARTax.DividedBy(qryAR.ARMaster1.ARTax)))
			.Else(0)
			expTax = .End
		End With
		Dim expInterest As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.ARInt.IsEqualTo(0), 0)
			.When(qryChrgBill.ChrgCard1.ChrgType1.ChrgCatList.IsEqualTo("Interest"), qryChrgBill.BillAmt.MultBy(qryAR.ARInt.DividedBy(qryAR.ARMaster1.ARInt)))
			.Else(0)
			expInterest = .End
		End With
		Dim expBOA As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.ARBOA.IsEqualTo(0), 0)
			.When(qryChrgBill.ChrgCard1.ChrgType1.ChrgCatList.IsEqualTo("BOA").And(qryChrgBill.BillAmtBal.IsEqualTo(0.00)), qryChrgBill.BillAmt.MultBy(qryAR.ARBOA.DividedBy(qryAR.ARMaster1.ARBOA)))
			.Else(0)
			expBOA = .End
		End With
		Dim expAppliedBOA As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.ARBOA.IsEqualTo(0), 0)
			.When(qryChrgBill.ChrgCard1.ChrgType1.ChrgCatList.IsEqualTo("BOA").And(qryChrgBill.BillAmtBal.IsGreaterThan(0.00)), qryChrgBill.BillAmt.MultBy(qryAR.ARBOA.DividedBy(qryAR.ARMaster1.ARBOA)))
			.Else(0)
			expAppliedBOA = .End
		End With
		Dim expOther As IExpression
		With Exp.Case
			.When(qryAR.ARMaster1.AROth.IsEqualTo(0), 0)
			.When(qryChrgBill.ChrgCard1.ChrgType1.ChrgCatList.IsEqualTo("Other"), qryChrgBill.BillAmt.MultBy(qryAR.AROth.DividedBy(qryAR.ARMaster1.AROth)))
			.Else(0)
			expOther = .End
		End With
		selDetail = Me.Framework.QuerySession.Select(tempOutput)
		selDetail.InnerJoin(qryAR.ARMaster.IsEqualTo(tempOutput.ArMaster))
		selDetail.InnerJoin(qryAR, qryChrgBill, qryChrgBill.ARMaster.IsEqualTo(qryAR.ARMaster))

		If Not paramObject.ReqChrgCard.IsNull Then
			selDetail.InnerJoin(qryChrgBill.ChrgCard.IsEqualTo(qryChrgCard.ChrgCardIndex))
			selDetail.Where(paramObject.ReqChrgCard.Value)
		End If
		If Not paramObject.ReqWorkTkpr.IsNull Then
			selDetail.InnerJoin(qryChrgBill.ChrgCard1.Timekeeper.IsEqualTo(qryTimeKeeper.TkprIndex))
			selDetail.Where(paramObject.ReqWorkTkpr.Value)
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
			selDetail.InnerJoin(qryChrgBill.Chrgcard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgBill.Chrgcard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgBill.Chrgcard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
			selDetail.InnerJoin(qryChrgBill.Chrgcard1.OrigChrgCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(qryChrgBill.ARMaster1.GLDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgBill.Chrgcard1.OrigChrgCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(qryChrgBill.ARMaster1.GLDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgBill.Chrgcard1.OrigChrgCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryChrgBill.ARMaster1.GLDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If			
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then
			selDetail.InnerJoin(qryChrgBill.TkprEffDate.IsEqualTo(qryTkprDate.TkprDateID))
			selDetail.InnerJoin(qryChrgBill.BillMattEffDate.IsEqualTo(qryMattDate.MattDateID))
			selDetail.InnerJoin(qryChrgBill.ChrgCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryChrgBill.InvMaster1.InvDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
	'Me.NextMessage = "Msg (GetBillRcptDetail)- 10"		
		selDetail.Distinct.Values(tempOutput.ARMaster)
		selDetail.Values( _
			Exp.SUM(expTax.Plus(expInterest).Plus(expBOA).Plus(expOther).Plus(expAppliedBOA)), _
			0, 0, 0, _
			Exp.SUM(expTax), _
			Exp.SUM(expInterest), _
			Exp.SUM(expBOA), _
			Exp.SUM(expOther.Plus(expAppliedBOA)), _
			qryChrgBill.Chrgcard1.TranType, _
			qryChrgBill.Chrgcard1.WorkType, _
			qryChrgBill.Chrgcard1.ChrgType, _
			qryChrgBill.Chrgcard1.Office, _
			qryChrgBill.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate, _
			arType)
		selDetail.GroupBy( _
			tempOutput.ARMaster, _
			qryChrgBill.Chrgcard1.TranType, _
			qryChrgBill.Chrgcard1.WorkType, _
			qryChrgBill.Chrgcard1.ChrgType, _
			qryChrgBill.Chrgcard1.Office, _
			qryChrgBill.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate)
			
		With Me.Framework.QuerySession.Insert(tempDetail).Immediate
			.Into( _
				tempDetail.ARDIndex, _
				tempDetail.ARTotal, _
				tempDetail.ARFee, _
				tempDetail.ARHCo, _
				tempDetail.ARSCo, _
				tempDetail.ARTax, _
				tempDetail.ARInterest, _
				tempDetail.ARBOA, _
				tempDetail.AROther, _
				tempDetail.TranType, _
				tempDetail.WorkType, _
				tempDetail.ChrgType, _
				tempDetail.WorkOffice, _
				tempDetail.BillOffice, _
				tempDetail.WorkTkpr, _
				tempDetail.DetMattDate, _
				tempDetail.DetClntDate, _
				tempDetail.CurrencyDate, _
				tempDetail.DaysOld, _
				tempDetail.BillThruDate, _
				tempDetail.ChkDate, _
				tempDetail.LastBillNxDate, _
				tempDetail.ARType)
			.From(selDetail)
		End With
'Me.NextMessage = "Msg (GetBillRcptDetail)- 10"		
	'ChrgRcpt
Me.LogMgr.Error("FLS:RM:ChrgRcpt")
		'#Added by CNA
		arType = Exp.Value("Charges")
		'#Added by CNA
		With Exp.Case
			.When(qryAR.ARMaster1.ARMaster1.ARTax.IsEqualTo(0), 0)
			.When(qryChrgRcpt.ChrgType1.ChrgCatList.IsEqualTo("Tax"), qryChrgRcpt.RcptAmt.Negate)
			.Else(0)
			expTax = .End
		End With

		With Exp.Case
			.When(qryAR.ARMaster1.ARMaster1.ARInt.IsEqualTo(0), 0)
			.When(qryChrgRcpt.ChrgType1.ChrgCatList.IsEqualTo("Interest"),  qryChrgRcpt.RcptAmt.Negate)
			.Else(0)
			expInterest = .End
		End With

		With Exp.Case
			.When(qryAR.ARMaster1.ARMaster1.ARBOA.IsEqualTo(0), 0)
			.When(qryChrgRcpt.ChrgType1.ChrgCatList.IsEqualTo("BOA"),  qryChrgRcpt.RcptAmt.Negate)
			.Else(0)
			expBOA = .End
		End With

		With Exp.Case
			.When(qryAR.ARMaster1.ARMaster1.AROth.IsEqualTo(0), 0)
			.When(qryChrgRcpt.ChrgType1.ChrgCatList.IsEqualTo("Other"),  qryChrgRcpt.RcptAmt.Negate)
			.Else(0)
			expOther = .End
		End With
		selDetail = Me.Framework.QuerySession.Select(tempOutput)
		selDetail.InnerJoin(tempOutput, qryAR, qryAR.ARMaster.IsEqualTo(tempOutput.ArMaster))
		selDetail.InnerJoin(qryAR, qryChrgRcpt, qryChrgRcpt.ARDetail.IsEqualTo(qryAR.ARDIndex))
		selDetail.InnerJoin(tempOutput, qryChrgBill, tempOutput.ARMaster.IsEqualTo(qryChrgBill.ARMaster))
		
		If Not paramObject.ReqChrgCard.IsNull Then
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard.IsEqualTo(qryChrgCard.ChrgCardIndex))
			selDetail.Where(paramObject.ReqChrgCard.Value)
		End If
		If Not paramObject.ReqWorkTkpr.IsNull Then
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.Timekeeper.IsEqualTo(qryTimeKeeper.TkprIndex))
			selDetail.Where(paramObject.ReqWorkTkpr.Value)
		End If

		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "CURRENT" Then
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(Exp.CurrentDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "TH" Then
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.OrigChrgCard1.Timekeeper.IsEqualTo(qryTkprDate.TimekeeperLkUp))'.And _
			selDetail.Where(qryChrgRcpt.ARMaster1.GLDate.IsBetween(qryTkprDate.NxStartDate, qryTkprDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.OrigChrgCard1.Matter.IsEqualTo(qryMattDate.MatterLkUp))'.And _
			selDetail.Where(qryChrgRcpt.ARMaster1.GLDate.IsBetween(qryMattDate.NxStartDate, qryMattDate.NxEndDate))')
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.OrigChrgCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryChrgRcpt.ARMaster1.GLDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If			
		If Me.Parameters.WC_MxEffDate.Value.ToUpper = "PIT" Then
			selDetail.InnerJoin(qryChrgRcpt.RcptTkprEffDate.IsEqualTo(qryTkprDate.TkprDateID))
			selDetail.InnerJoin(qryChrgRcpt.BillMattEffDate.IsEqualTo(qryMattDate.MattDateID))
			selDetail.InnerJoin(qryChrgRcpt.ChrgCard1.Matter1.Client.IsEqualTo(qryClntDate.ClientLkUp))'.And _
			selDetail.Where(qryChrgRcpt.ARMaster1.RcptMaster1.RcptDate.IsBetween(qryClntDate.NxStartDate, qryClntDate.NxEndDate))')
		End If
		selDetail.Distinct.Values(tempOutput.ARMaster)
		'FLS:Rob SRS143 jira 5813 Sum in wrong place Exp.SUM(expOther.Plus(expAppliedBOA)), _
		'also corrected qryChrgRcpt.ChrgType and added the hint as for some reason OQL thinks it is generating a cartesian, SQL is fine
		'selDetail.Hints.Add(Hint.AllowCartesianProduct())
		selDetail.Values( _
			Exp.SUM(expTax.Plus(expInterest).Plus(expBOA).Plus(expOther).Plus(expAppliedBOA)), _
			0, 0, 0, _
			Exp.SUM(expTax), _
			Exp.SUM(expInterest), _
			Exp.SUM(expBOA), _
			Exp.SUM(expOther.Plus(expAppliedBOA)), _
			qryChrgRcpt.Chrgcard1.TranType, _
			qryChrgRcpt.Chrgcard1.WorkType, _
			qryChrgRcpt.Chrgcard1.ChrgType, _
			qryChrgRcpt.Chrgcard1.Office, _
			qryChrgRcpt.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate, _
			arType)
		selDetail.GroupBy( _
			tempOutput.ARMaster, _
			qryChrgRcpt.Chrgcard1.TranType, _
			qryChrgRcpt.Chrgcard1.WorkType, _
			qryChrgRcpt.Chrgcard1.ChrgType, _
			qryChrgRcpt.Chrgcard1.Office, _
			qryChrgRcpt.InvMaster1.BillingOffice, _
			tkprDateID, _
			mattDateID, _
			clntDateID, _
			tempOutput.CurrencyDate, _
			tempOutput.DaysOld, _
			tempOutput.BillThruDate, _
			tempOutput.ChkDate, _
			tempOutput.LastBillNxDate)

		With Me.Framework.QuerySession.Insert(tempDetail).Immediate
			.Into( _
				tempDetail.ARDIndex, _
				tempDetail.ARTotal, _
				tempDetail.ARFee, _
				tempDetail.ARHCo, _
				tempDetail.ARSCo, _
				tempDetail.ARTax, _
				tempDetail.ARInterest, _
				tempDetail.ARBOA, _
				tempDetail.AROther, _
				tempDetail.TranType, _
				tempDetail.WorkType, _
				tempDetail.ChrgType, _
				tempDetail.WorkOffice, _
				tempDetail.BillOffice, _
				tempDetail.WorkTkpr, _
				tempDetail.DetMattDate, _
				tempDetail.DetClntDate, _
				tempDetail.CurrencyDate, _
				tempDetail.DaysOld, _
				tempDetail.BillThruDate, _
				tempDetail.ChkDate, _
				tempDetail.LastBillNxDate, _
				tempDetail.ARType)
			.From(selDetail)
		End With
		'Me.NextMessage = "Msg (GetBillRcptDetail)- 11"		
End Sub

Private Sub GetWorkTkprData(ByVal tempOutput As TempOutputDef, ByVal tempDetail As TempDetailDef)

	Dim agingColumn(5) As IExpression
	Dim feeAgingColumn(5) As IExpression
	Dim hcoAgingColumn(5) As IExpression
	Dim scoAgingColumn(5) As IExpression
	Dim taxAgingColumn(5) As IExpression
	Dim intAgingColumn(5) As IExpression
	Dim boaAgingColumn(5) As IExpression
	Dim othAgingColumn(5) As IExpression
'Me.NextMessage = "Msg (GetWorkTkprData)- 1"		
	For i As Integer = 1 To 5
		agingColumn(i) = Exp.Value(0)
		feeAgingColumn(i) = Exp.Value(0)
		hcoAgingColumn(i) = Exp.Value(0)
		scoAgingColumn(i) = Exp.Value(0)
		taxAgingColumn(i) = Exp.Value(0)
		intAgingColumn(i) = Exp.Value(0)
		boaAgingColumn(i) = Exp.Value(0)
		othAgingColumn(i) = Exp.Value(0)
				
		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.Aging1.IsNotEqualTo(0)), TempDetail.ARTotal)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.Aging2.IsNotEqualTo(0)), TempDetail.ARTotal)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.Aging3.IsNotEqualTo(0)), TempDetail.ARTotal)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.Aging4.IsNotEqualTo(0)), TempDetail.ARTotal)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.Aging5.IsNotEqualTo(0)), TempDetail.ARTotal)
			.Else(0)	
			agingColumn(i) = .End
		End With

		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.FeeAging1.IsNotEqualTo(0)), TempDetail.ARFee)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.FeeAging2.IsNotEqualTo(0)), TempDetail.ARFee)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.FeeAging3.IsNotEqualTo(0)), TempDetail.ARFee)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.FeeAging4.IsNotEqualTo(0)), TempDetail.ARFee)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.FeeAging5.IsNotEqualTo(0)), TempDetail.ARFee)
			.Else(0)
			feeAgingColumn(i) = .End
		End With

		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.HCoAging1.IsNotEqualTo(0)), TempDetail.ARHCo)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.HCoAging2.IsNotEqualTo(0)), TempDetail.ARHCo)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.HCoAging3.IsNotEqualTo(0)), TempDetail.ARHCo)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.HCoAging4.IsNotEqualTo(0)), TempDetail.ARHCo)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.HCoAging5.IsNotEqualTo(0)), TempDetail.ARHCo)
			.Else(0)
			hcoAgingColumn(i) = .End
		End With

		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.SCoAging1.IsNotEqualTo(0)), TempDetail.ARSCo)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.SCoAging2.IsNotEqualTo(0)), TempDetail.ARSCo)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.SCoAging3.IsNotEqualTo(0)), TempDetail.ARSCo)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.SCoAging4.IsNotEqualTo(0)), TempDetail.ARSCo)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.SCoAging5.IsNotEqualTo(0)), TempDetail.ARSCo)
			.Else(0)
			scoAgingColumn(i) = .End
		End With

		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.TaxAging1.IsNotEqualTo(0)), TempDetail.ARTax)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.TaxAging2.IsNotEqualTo(0)), TempDetail.ARTax)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.TaxAging3.IsNotEqualTo(0)), TempDetail.ARTax)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.TaxAging4.IsNotEqualTo(0)), TempDetail.ARTax)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.TaxAging5.IsNotEqualTo(0)), TempDetail.ARTax)
			.Else(0)
			taxAgingColumn(i) = .End
		End With

		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.IntAging1.IsNotEqualTo(0)), TempDetail.ARInterest)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.IntAging2.IsNotEqualTo(0)), TempDetail.ARInterest)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.IntAging3.IsNotEqualTo(0)), TempDetail.ARInterest)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.IntAging4.IsNotEqualTo(0)), TempDetail.ARInterest)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.IntAging5.IsNotEqualTo(0)), TempDetail.ARInterest)
			.Else(0)
			intAgingColumn(i) = .End
		End With

		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.BOAAging1.IsNotEqualTo(0)), TempDetail.ARBOA)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.BOAAging2.IsNotEqualTo(0)), TempDetail.ARBOA)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.BOAAging3.IsNotEqualTo(0)), TempDetail.ARBOA)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.BOAAging4.IsNotEqualTo(0)), TempDetail.ARBOA)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.BOAAging5.IsNotEqualTo(0)), TempDetail.ARBOA)
			.Else(0)
			boaAgingColumn(i) = .End
		End With

		With Exp.Case
			.When(exp.Value(1).IsEqualTo(i).And(tempOutput.OthAging1.IsNotEqualTo(0)), TempDetail.AROther)
			.When(exp.Value(2).IsEqualTo(i).And(tempOutput.OthAging2.IsNotEqualTo(0)), TempDetail.AROther)
			.When(exp.Value(3).IsEqualTo(i).And(tempOutput.OthAging3.IsNotEqualTo(0)), TempDetail.AROther)
			.When(exp.Value(4).IsEqualTo(i).And(tempOutput.OthAging4.IsNotEqualTo(0)), TempDetail.AROther)
			.When(exp.Value(5).IsEqualTo(i).And(tempOutput.OthAging5.IsNotEqualTo(0)), TempDetail.AROther)
			.Else(0)
			othAgingColumn(i) = .End
		End With
	Next i
'Me.NextMessage = "Msg (GetWorkTkprData)- 2"	

	Dim selTempDetail As ISelect = QueryBuilder.SelectFrom(tempDetail)
	Dim arm As Query.ARMaster  = Query.ARMaster.Current
	With tempDetail
		selTempDetail.InnerJoin(tempDetail.ARDIndex.IsEqualTo(tempOutput.ArMaster))
		selTempDetail.InnerJoin(tempOutput, arm, tempOutput.ARMaster.IsEqualTo(arm.ARMIndex))
		selTempDetail.Values( _
			arm.InvMaster, _
			tempOutput.Currency, _
			tempOutput.BillTkpr, _
			tempOutput.Matter, _
			.DetMattDate, _
			.DetClntDate, _
			exp.Coalesce(exp.Max(tempOutput.LastPaymentDate), #1/1/1800#), _
			exp.Coalesce(exp.Max(tempOutput.LastPaymentNxDate), #1/1/1800#), _
			tempOutput.AgingBucket, _
			tempOutput.CurrFactor, _
			.BillOffice, _
			Exp.Coalesce(exp.SUM(.ARTotal),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM(.ARFee),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM(.ARHCo),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM(.ARSCo),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM((.ARHCo.Plus(.ARSCo)).MultBy(tempOutput.CurrFactor)),0), _
			Exp.Coalesce(exp.SUM(.ARTax),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM(.ARInterest),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM(.ARBOA),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM(.AROther),0).MultBy(tempOutput.CurrFactor), _
			Exp.Coalesce(exp.SUM((.ARTax.Plus(.ARInterest).Plus(.ARBOA).Plus(.AROther)).MultBy(tempOutput.CurrFactor)),0), _
			0, 0, 0)
		
		For i As Integer = 1 To 5
			selTempDetail.Values(Exp.Coalesce(exp.SUM(agingColumn(i)),0), _
				Exp.Coalesce(exp.SUM(feeAgingColumn(i)),0).MultBy(tempOutput.CurrFactor), _
				Exp.Coalesce(exp.SUM(hcoAgingColumn(i)),0).MultBy(tempOutput.CurrFactor), _
				Exp.Coalesce(exp.SUM(scoAgingColumn(i)),0).MultBy(tempOutput.CurrFactor), _
				Exp.Coalesce(exp.SUM(taxAgingColumn(i)),0).MultBy(tempOutput.CurrFactor), _
				Exp.Coalesce(exp.SUM(intAgingColumn(i)),0).MultBy(tempOutput.CurrFactor), _
				Exp.Coalesce(exp.SUM(boaAgingColumn(i)),0).MultBy(tempOutput.CurrFactor), _
				Exp.Coalesce(exp.SUM(othAgingColumn(i)),0).MultBy(tempOutput.CurrFactor))
		Next i
		
		selTempDetail.Values(exp.Max(tempDetail.CurrencyDate), _
							 tempDetail.DaysOld, _
							 tempDetail.BillThruDate, _
							 exp.Max(tempDetail.ChkDate), _
							 exp.Max(tempDetail.LastBillNxDate))
		selTempDetail.GroupBy( _
			arm.InvMaster, _
			tempOutput.Currency, _
			tempOutput.BillTkpr, _
			tempOutput.Matter, _
			.DetMattDate, _
			.DetClntDate, _
			tempOutput.AgingBucket, _
			tempOutput.CurrFactor, _
			.BillOffice, _
			tempDetail.DaysOld, _
			tempDetail.BillThruDate, _
			tempDetail.ChkDate, _
			tempDetail.LastBillNxDate)
	
	End With

	With Me.Framework.QuerySession.Insert(Me.QueryNode).Immediate
		.Into( _
			Me.QueryNode.InvMaster, _
			Me.QueryNode.Currency, _
			Me.QueryNode.BillTkpr, _
			Me.QueryNode.Matter, _
			Me.QueryNode.MattDate, _
			Me.QueryNode.ClntDate, _
			Me.QueryNode.LastPaymentDate, _
			Me.QueryNode.LastPaymentNxDate, _
			Me.QueryNode.AgingBucket, _
			Me.QueryNode.CurrFactor, _
			Me.QueryNode.BillOffice, _
			Me.QueryNode.ARTotal, _
			Me.QueryNode.ARFees, _
			Me.QueryNode.ARHardCosts, _
			Me.QueryNode.ARSoftCosts, _
			Me.QueryNode.ArCosts, _
			Me.QueryNode.ARTax, _
			Me.QueryNode.ARInterest, _
			Me.QueryNode.AROnAcct, _
			Me.QueryNode.AROther, _
			Me.QueryNode.ARCharges, _
			Me.QueryNode.ARUnallocated, _
			Me.QueryNode.ARDoubtFul, _
			Me.QueryNode.IsRounding, _
			Me.QueryNode.Aging1, Me.QueryNode.feeAging1, Me.QueryNode.hcoAging1, Me.QueryNode.scoAging1, _
				Me.QueryNode.taxAging1, Me.QueryNode.intAging1, Me.QueryNode.boaAging1, Me.QueryNode.othAging1, _
			Me.QueryNode.Aging2, Me.QueryNode.feeAging2, Me.QueryNode.hcoAging2, Me.QueryNode.scoAging2, _
				Me.QueryNode.taxAging2, Me.QueryNode.intAging2, Me.QueryNode.boaAging2, Me.QueryNode.othAging2, _
			Me.QueryNode.Aging3, Me.QueryNode.feeAging3, Me.QueryNode.hcoAging3, Me.QueryNode.scoAging3, _
				Me.QueryNode.taxAging3, Me.QueryNode.intAging3, Me.QueryNode.boaAging3, Me.QueryNode.othAging3, _
			Me.QueryNode.Aging4, Me.QueryNode.feeAging4, Me.QueryNode.hcoAging4, Me.QueryNode.scoAging4, _
				Me.QueryNode.taxAging4, Me.QueryNode.intAging4, Me.QueryNode.boaAging4, Me.QueryNode.othAging4, _
			Me.QueryNode.Aging5, Me.QueryNode.feeAging5, Me.QueryNode.hcoAging5, Me.QueryNode.scoAging5, _
				Me.QueryNode.taxAging5, Me.QueryNode.intAging5, Me.QueryNode.boaAging5, Me.QueryNode.othAging5, _
			Me.QueryNode.CurrencyDate, _
			Me.QueryNode.DaysOld, _
			Me.QueryNode.BillThruDate, _
			Me.QueryNode.ChkDate, _
			Me.QueryNode.LastBillNxDate)
			
		.From(selTempDetail)
	End With
'Me.NextMessage = "Msg (GetWorkTkprData)- 4"		
'Negate, Summarize and Insert into temp output table
	selTempDetail = QueryBuilder.SelectFrom(tempDetail)
	With tempDetail
		selTempDetail.InnerJoin(tempDetail.ARDIndex.IsEqualTo(tempOutput.ArMaster))
		selTempDetail.Values( _
			tempOutput.ArMaster, _
			tempOutput.Currency, _
			tempOutput.BillTkpr, _
			tempOutput.Matter, _
			tempOutput.MattDate, _
			tempOutput.ClntDate, _
			tempOutput.LastPaymentDate, _
			tempOutput.LastPaymentNxDate, _
			tempOutput.AgingBucket, _
			tempOutput.CurrFactor, _
			exp.SUM(.ARTotal).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM(.ARFee).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM(.ARHCo).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM(.ARSCo).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM((.ARHCo.Plus(.ARSCo)).MultBy(tempOutput.CurrFactor)).Negate, _
			exp.SUM(.ARTax).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM(.ARInterest).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM(.ARBOA).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM(.AROther).MultBy(tempOutput.CurrFactor).Negate, _
			exp.SUM(.ARTax.Plus(.ARInterest).Plus(.ARBOA).Plus(.AROther)).MultBy(tempOutput.CurrFactor).Negate, _
			0, 0)
'Me.NextMessage = "Msg (GetWorkTkprData)- 5"		
		For i As Integer = 1 To 5
			selTempDetail.Values( _
				exp.SUM(agingColumn(i)).Negate, _
				exp.SUM(feeAgingColumn(i)).MultBy(tempOutput.CurrFactor).Negate, _
				exp.SUM(hcoAgingColumn(i)).MultBy(tempOutput.CurrFactor).Negate, _
				exp.SUM(scoAgingColumn(i)).MultBy(tempOutput.CurrFactor).Negate, _
				exp.SUM(taxAgingColumn(i)).MultBy(tempOutput.CurrFactor).Negate, _
				exp.SUM(intAgingColumn(i)).MultBy(tempOutput.CurrFactor).Negate, _
				exp.SUM(boaAgingColumn(i)).MultBy(tempOutput.CurrFactor).Negate, _
				exp.SUM(othAgingColumn(i)).MultBy(tempOutput.CurrFactor).Negate)
		Next i

		selTempDetail.GroupBy( _
			tempOutput.ArMaster, _
			tempOutput.Currency, _
			tempOutput.BillTkpr, _
			tempOutput.Matter, _
			tempOutput.MattDate, _
			tempOutput.ClntDate, _
			tempOutput.LastPaymentDate, _
			tempOutput.LastPaymentNxDate, _
			tempOutput.AgingBucket, _
			tempOutput.CurrFactor)
	End With
'Me.NextMessage = "Msg (GetWorkTkprData)- 6"		
	With Me.Framework.QuerySession.Insert(tempOutput).Immediate
		.Into( _
			tempOutput.ArMaster, _
			tempOutput.Currency, _
			tempOutput.BillTkpr, _
			tempOutput.Matter, _
			tempOutput.MattDate, _
			tempOutput.ClntDate, _
			tempOutput.LastPaymentDate, _
			tempOutput.LastPaymentNxDate, _
			tempOutput.AgingBucket, _
			tempOutput.CurrFactor, _
			tempOutput.ARTotal, _
			tempOutput.ARFees, _
			tempOutput.ARHardCosts, _
			tempOutput.ARSoftCosts, _
			tempOutput.ArCosts, _
			tempOutput.ARTax, _
			tempOutput.ARInterest, _
			tempOutput.AROnAcct, _
			tempOutput.AROther, _
			tempOutput.ARCharges, _
			tempOutput.ARUnallocated, _
			tempOutput.ARDoubtFul, _
			tempOutput.Aging1, tempOutput.feeAging1, tempOutput.hcoAging1, tempOutput.scoAging1, _
				tempOutput.taxAging1, tempOutput.intAging1, tempOutput.boaAging1, tempOutput.othAging1, _
			tempOutput.Aging2, tempOutput.feeAging2, tempOutput.hcoAging2, tempOutput.scoAging2, _
				tempOutput.taxAging2, tempOutput.intAging2, tempOutput.boaAging2, tempOutput.othAging2, _
			tempOutput.Aging3, tempOutput.feeAging3, tempOutput.hcoAging3, tempOutput.scoAging3, _
				tempOutput.taxAging3, tempOutput.intAging3, tempOutput.boaAging3, tempOutput.othAging3, _
			tempOutput.Aging4, tempOutput.feeAging4, tempOutput.hcoAging4, tempOutput.scoAging4, _
				tempOutput.taxAging4, tempOutput.intAging4, tempOutput.boaAging4, tempOutput.othAging4, _
			tempOutput.Aging5, tempOutput.feeAging5, tempOutput.hcoAging5, tempOutput.scoAging5, _
				tempOutput.taxAging5, tempOutput.intAging5, tempOutput.boaAging5, tempOutput.othAging5) 
		.From(selTempDetail)
	End With
End Sub

Private Sub GetNonRoundData(ByVal tempOutput As TempOutputDef, ByVal RoundValue As IExpression, ByVal RoundValue2 As Decimal)
	
	Dim selOutput As ISelect = QueryBuilder.SelectFrom(tempOutput)
	Dim arm As Query.ARMaster = Query.ARMaster.Current
	With tempOutput
		selOutput.InnerJoin(tempOutput, arm, tempOutput.ARMaster.IsEQualTo(arm.ARMIndex))
		selOutput.Values( _
			.Currency, _
			.BillTkpr, _
			.Matter, _
			.ClntDate, _
			.MattDate, _
			arm.InvMaster, _
			exp.Coalesce(exp.Max(.LastPaymentDate), #1/1/1800#), _
			exp.Coalesce(exp.Max(.LastPaymentNxDate), #1/1/1800#), _
			.AgingBucket, _
			.CurrFactor, _
			Exp.Coalesce(exp.Sum(.ARFees),0), _
			Exp.Coalesce(exp.Sum(.ARHardCosts),0), _
			Exp.Coalesce(exp.Sum(.ARSoftCosts),0), _
			Exp.Coalesce(exp.Sum(.ArCosts),0), _
			Exp.Coalesce(exp.Sum(.ARTax),0), _
			Exp.Coalesce(exp.Sum(.ARInterest),0), _
			Exp.Coalesce(exp.Sum(.AROnAcct),0), _
			Exp.Coalesce(exp.Sum(.AROther),0), _
			Exp.Coalesce(exp.Sum(.ARCharges),0), _
			0, _
			Exp.Coalesce(exp.Sum(.ARTotal),0), _
			0, _
			Exp.Coalesce(exp.Sum(.Aging1),0), Exp.Coalesce(exp.Sum(.Aging2),0), Exp.Coalesce(exp.Sum(.Aging3),0), Exp.Coalesce(exp.Sum(.Aging4),0), Exp.Coalesce(exp.Sum(.Aging5),0), _
			Exp.Coalesce(exp.Sum(.feeAging1),0), Exp.Coalesce(exp.Sum(.feeAging2),0), Exp.Coalesce(exp.Sum(.feeAging3),0), Exp.Coalesce(exp.Sum(.feeAging4),0), Exp.Coalesce(exp.Sum(.feeAging5),0), _
			Exp.Coalesce(exp.Sum(.hcoAging1),0), Exp.Coalesce(exp.Sum(.hcoAging2),0), Exp.Coalesce(exp.Sum(.hcoAging3),0), Exp.Coalesce(exp.Sum(.hcoAging4),0), Exp.Coalesce(exp.Sum(.hcoAging5),0), _
			Exp.Coalesce(exp.Sum(.scoAging1),0), Exp.Coalesce(exp.Sum(.scoAging2),0), Exp.Coalesce(exp.Sum(.scoAging3),0), Exp.Coalesce(exp.Sum(.scoAging4),0), Exp.Coalesce(exp.Sum(.scoAging5),0), _
			Exp.Coalesce(exp.Sum(.taxAging1),0), Exp.Coalesce(exp.Sum(.taxAging2),0), Exp.Coalesce(exp.Sum(.taxAging3),0), Exp.Coalesce(exp.Sum(.taxAging4),0), Exp.Coalesce(exp.Sum(.taxAging5),0), _
			Exp.Coalesce(exp.Sum(.intAging1),0), Exp.Coalesce(exp.Sum(.intAging2),0), Exp.Coalesce(exp.Sum(.intAging3),0), Exp.Coalesce(exp.Sum(.intAging4),0), Exp.Coalesce(exp.Sum(.intAging5),0), _
			Exp.Coalesce(exp.Sum(.boaAging1),0), Exp.Coalesce(exp.Sum(.boaAging2),0), Exp.Coalesce(exp.Sum(.boaAging3),0), Exp.Coalesce(exp.Sum(.boaAging4),0), Exp.Coalesce(exp.Sum(.boaAging5),0), _
			Exp.Coalesce(exp.Sum(.othAging1),0), Exp.Coalesce(exp.Sum(.othAging2),0), Exp.Coalesce(exp.Sum(.othAging3),0), Exp.Coalesce(exp.Sum(.othAging4),0), Exp.Coalesce(exp.Sum(.othAging5),0), _
			0, _
			tempOutput.ARType)
			
		selOutput.GroupBy( _
			.Currency, _
			.BillTkpr, _
			.Matter, _
			.ClntDate, _
			.MattDate, _
			arm.InvMaster, _
			.AgingBucket, _
			.CurrFactor, _
			tempOutput.ARType)

		selOutput.Having( _
			(exp.Sum(.ARFees).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.ARHardCosts).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.ARSoftCosts).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.ArCosts).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.ARTax).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.ARInterest).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.AROnAcct).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.AROther).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.ARCharges).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.ARTotal).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.Aging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.Aging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.Aging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.Aging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.Aging5).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.feeAging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.feeAging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.feeAging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.feeAging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.feeAging5).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.hcoAging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.hcoAging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.hcoAging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.hcoAging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.hcoAging5).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.scoAging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.scoAging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.scoAging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.scoAging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.scoAging5).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.taxAging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.taxAging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.taxAging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.taxAging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.taxAging5).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.intAging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.intAging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.intAging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.intAging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.intAging5).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.boaAging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.boaAging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.boaAging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.boaAging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.boaAging5).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.othAging1).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.othAging2).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.othAging3).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.othAging4).IsNotBetween(RoundValue,RoundValue2)).Or _
			(exp.Sum(.othAging5).IsNotBetween(RoundValue,RoundValue2)))
	End With
			
	With Me.Framework.QuerySession.Insert(Me.QueryNode).Immediate
		.Into( _
			Me.QueryNode.Currency, _
			Me.QueryNode.BillTkpr, _
			Me.QueryNode.Matter, _
			Me.QueryNode.ClntDate, _
			Me.QueryNode.MattDate, _
			Me.QueryNode.InvMaster, _
			Me.QueryNode.LastPaymentDate, _
			Me.QueryNode.LastPaymentNxDate, _
			Me.QueryNode.AgingBucket, _
			Me.QueryNode.CurrFactor, _
			Me.QueryNode.ARFees, _
			Me.QueryNode.ARHardCosts, _
			Me.QueryNode.ARSoftCosts, _
			Me.QueryNode.ArCosts, _
			Me.QueryNode.ARTax, _
			Me.QueryNode.ARInterest, _
			Me.QueryNode.AROnAcct, _
			Me.QueryNode.AROther, _
			Me.QueryNode.ARCharges, _
			Me.QueryNode.ARUnallocated, _
			Me.QueryNode.ARTotal, _
			Me.QueryNode.ARDoubtFul, _
			Me.QueryNode.Aging1, Me.QueryNode.Aging2, Me.QueryNode.Aging3, Me.QueryNode.Aging4, Me.QueryNode.Aging5, _
			Me.QueryNode.feeAging1, Me.QueryNode.feeAging2, Me.QueryNode.feeAging3, Me.QueryNode.feeAging4, Me.QueryNode.feeAging5, _
			Me.QueryNode.hcoAging1, Me.QueryNode.hcoAging2, Me.QueryNode.hcoAging3, Me.QueryNode.hcoAging4, Me.QueryNode.hcoAging5, _
			Me.QueryNode.scoAging1, Me.QueryNode.scoAging2, Me.QueryNode.scoAging3, Me.QueryNode.scoAging4, Me.QueryNode.scoAging5, _
			Me.QueryNode.taxAging1, Me.QueryNode.taxAging2, Me.QueryNode.taxAging3, Me.QueryNode.taxAging4, Me.QueryNode.taxAging5, _
			Me.QueryNode.intAging1, Me.QueryNode.intAging2, Me.QueryNode.intAging3, Me.QueryNode.intAging4, Me.QueryNode.intAging5, _
			Me.QueryNode.boaAging1, Me.QueryNode.boaAging2, Me.QueryNode.boaAging3, Me.QueryNode.boaAging4, Me.QueryNode.boaAging5, _
			Me.QueryNode.othAging1, Me.QueryNode.othAging2, Me.QueryNode.othAging3, Me.QueryNode.othAging4, Me.QueryNode.othAging5, _
			Me.QueryNode.IsRounding, _
			Me.QueryNode.ARType)

		.From(selOutput)
	End With
End Sub

Private Sub GetRoundAmounts(ByVal tempOutput As TempOutputDef, ByVal tempRound As TempRoundDef, ByVal RoundValue As IExpression, ByVal RoundValue2 As Decimal)

	Dim selOutput As ISelect = QueryBuilder.SelectFrom(tempOutput)
	Dim arm As Query.ARMaster = Query.ARMaster.Current
	With tempOutput
		selOutput.InnerJoin(tempOutput, arm, tempOutput.ARMaster.IsEqualTo(arm.ARMIndex))
		selOutput.Values( _
			.Currency, _
			.BillTkpr, _
			.Matter, _
			.ClntDate, _
			.MattDate, _
			arm.InvMaster, _
			.LastPaymentDate, _
			.LastPaymentNxDate, _
			.AgingBucket, _
			.CurrFactor, _
			exp.Sum(.ARFees), _
			exp.Sum(.ARHardCosts), _
			exp.Sum(.ARSoftCosts), _
			exp.Sum(.ArCosts), _
			exp.Sum(.ARTax), _
			exp.Sum(.ARInterest), _
			exp.Sum(.AROnAcct), _
			exp.Sum(.AROther), _
			exp.Sum(.ARCharges), _
			exp.Sum(.ARTotal), _
			exp.Sum(.Aging1), exp.Sum(.Aging2), exp.Sum(.Aging3), exp.Sum(.Aging4), exp.Sum(.Aging5), _
			exp.Sum(.feeAging1), exp.Sum(.feeAging2), exp.Sum(.feeAging3), exp.Sum(.feeAging4), exp.Sum(.feeAging5), _
			exp.Sum(.hcoAging1), exp.Sum(.hcoAging2), exp.Sum(.hcoAging3), exp.Sum(.hcoAging4), exp.Sum(.hcoAging5), _
			exp.Sum(.scoAging1), exp.Sum(.scoAging2), exp.Sum(.scoAging3), exp.Sum(.scoAging4), exp.Sum(.scoAging5), _
			exp.Sum(.taxAging1), exp.Sum(.taxAging2), exp.Sum(.taxAging3), exp.Sum(.taxAging4), exp.Sum(.taxAging5), _
			exp.Sum(.intAging1), exp.Sum(.intAging2), exp.Sum(.intAging3), exp.Sum(.intAging4), exp.Sum(.intAging5), _
			exp.Sum(.boaAging1), exp.Sum(.boaAging2), exp.Sum(.boaAging3), exp.Sum(.boaAging4), exp.Sum(.boaAging5), _
			exp.Sum(.othAging1), exp.Sum(.othAging2), exp.Sum(.othAging3), exp.Sum(.othAging4), exp.Sum(.othAging5), _
			.CurrencyDate, _
			.DaysOld, _
			.BillThruDate, _
			.ChkDate, _
			.LastBillNxDate, _
			.ARType)
			
		selOutput.GroupBy( _
			.Currency, _
			.BillTkpr, _
			.Matter, _
			.ClntDate, _
			.MattDate, _
			arm.InvMaster, _
			.LastPaymentDate, _
			.LastPaymentNxDate, _
			.AgingBucket, _
			.CurrFactor, _
			.CurrencyDate, _
			.DaysOld, _
			.BillThruDate, _
			.ChkDate, _
			.LastBillNxDate, _
			.ARType)
			
		selOutput.Having( _
			(exp.Sum(.ARFees).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.ARHardCosts).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.ARSoftCosts).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.ArCosts).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.ARTax).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.ARInterest).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.AROnAcct).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.AROther).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.ARCharges).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.ARTotal).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.Aging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.Aging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.Aging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.Aging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.Aging5).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.feeAging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.feeAging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.feeAging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.feeAging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.feeAging5).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.hcoAging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.hcoAging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.hcoAging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.hcoAging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.hcoAging5).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.scoAging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.scoAging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.scoAging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.scoAging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.scoAging5).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.taxAging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.taxAging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.taxAging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.taxAging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.taxAging5).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.intAging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.intAging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.intAging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.intAging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.intAging5).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.boaAging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.boaAging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.boaAging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.boaAging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.boaAging5).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.othAging1).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.othAging2).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.othAging3).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.othAging4).IsBetween(RoundValue,RoundValue2)).And _
			(exp.Sum(.othAging5).IsBetween(RoundValue,RoundValue2)).And _
			((exp.Sum(.ARFees).IsNotEqualTo(0)).Or _
			(exp.Sum(.ARHardCosts).IsNotEqualTo(0)).Or _
			(exp.Sum(.ARSoftCosts).IsNotEqualTo(0)).Or _
			(exp.Sum(.ArCosts).IsNotEqualTo(0)).Or _
			(exp.Sum(.ARTax).IsNotEqualTo(0)).Or _
			(exp.Sum(.ARInterest).IsNotEqualTo(0)).Or _
			(exp.Sum(.AROnAcct).IsNotEqualTo(0)).Or _
			(exp.Sum(.AROther).IsNotEqualTo(0)).Or _
			(exp.Sum(.ARCharges).IsNotEqualTo(0)).Or _
			(exp.Sum(.ARTotal).IsNotEqualTo(0)).Or _
			(exp.Sum(.Aging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.Aging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.Aging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.Aging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.Aging5).IsNotEqualTo(0)).Or _
			(exp.Sum(.feeAging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.feeAging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.feeAging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.feeAging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.feeAging5).IsNotEqualTo(0)).Or _
			(exp.Sum(.hcoAging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.hcoAging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.hcoAging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.hcoAging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.hcoAging5).IsNotEqualTo(0)).Or _
			(exp.Sum(.scoAging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.scoAging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.scoAging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.scoAging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.scoAging5).IsNotEqualTo(0)).Or _
			(exp.Sum(.taxAging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.taxAging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.taxAging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.taxAging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.taxAging5).IsNotEqualTo(0)).Or _
			(exp.Sum(.intAging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.intAging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.intAging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.intAging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.intAging5).IsNotEqualTo(0)).Or _
			(exp.Sum(.boaAging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.boaAging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.boaAging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.boaAging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.boaAging5).IsNotEqualTo(0)).Or _
			(exp.Sum(.othAging1).IsNotEqualTo(0)).Or _
			(exp.Sum(.othAging2).IsNotEqualTo(0)).Or _
			(exp.Sum(.othAging3).IsNotEqualTo(0)).Or _
			(exp.Sum(.othAging4).IsNotEqualTo(0)).Or _
			(exp.Sum(.othAging5).IsNotEqualTo(0))))
	End With
			
	With Me.Framework.QuerySession.Insert(tempRound).Immediate
		.Into( _
			tempRound.Currency, _
			tempRound.BillTkpr, _
			tempRound.Matter, _
			tempRound.ClntDate, _
			tempRound.MattDate, _
			tempRound.InvMaster, _
			tempRound.LastPaymentDate, _
			tempRound.LastPaymentNxDate, _
			tempRound.AgingBucket, _
			tempRound.CurrFactor, _
			tempRound.ARFees, _
			tempRound.ARHardCosts, _
			tempRound.ARSoftCosts, _
			tempRound.ArCosts, _
			tempRound.ARTax, _
			tempRound.ARInterest, _
			tempRound.AROnAcct, _
			tempRound.AROther, _
			tempRound.ARCharges, _
			tempRound.ARTotal, _
			tempRound.Aging1, tempRound.Aging2, tempRound.Aging3, tempRound.Aging4, tempRound.Aging5, _
			tempRound.feeAging1, tempRound.feeAging2, tempRound.feeAging3, tempRound.feeAging4, tempRound.feeAging5, _
			tempRound.hcoAging1, tempRound.hcoAging2, tempRound.hcoAging3, tempRound.hcoAging4, tempRound.hcoAging5, _
			tempRound.scoAging1, tempRound.scoAging2, tempRound.scoAging3, tempRound.scoAging4, tempRound.scoAging5, _
			tempRound.taxAging1, tempRound.taxAging2, tempRound.taxAging3, tempRound.taxAging4, tempRound.taxAging5, _
			tempRound.intAging1, tempRound.intAging2, tempRound.intAging3, tempRound.intAging4, tempRound.intAging5, _
			tempRound.boaAging1, tempRound.boaAging2, tempRound.boaAging3, tempRound.boaAging4, tempRound.boaAging5, _
			tempRound.othAging1, tempRound.othAging2, tempRound.othAging3, tempRound.othAging4, tempRound.othAging5, _
			tempRound.CurrencyDate, tempRound.DaysOld, tempRound.BillThruDate, tempRound.ChkDate, tempRound.LastBillNxDate, _
			tempRound.ARType)
		.From(selOutput)
	End With
End Sub

Private Sub GetRoundData(ByVal tempRound As TempRoundDef, ByVal tempRndData As TempRndDataDef)

	Dim selRnd As ISelect = QueryBuilder.SelectFrom(Me.QueryNode)
	Dim arm As Query.ARMaster = Query.ARMaster.Current
	
	selRnd.InnerJoin(Me.QueryNode, arm, Me.QueryNode.InvMaster.IsEqualTo(arm.InvMaster))
	selRnd.InnerJoin(arm, tempRound, arm.ARMIndex.IsEqualTo(tempRound.ARMaster))
	selRnd.Where(tempRound.Currency.IsEqualTo(Me.QueryNode.Currency))
	selRnd.where(Me.QueryNode.WorkTkpr.IsNotNull)
	
	'selRnd.InnerJoin(tempRound.ARMaster.IsEqualTo(arm.ARMIndex).And _
	'				(tempRound.Currency.IsEqualTo(Me.QueryNode.Currency)).And _
	'				(Me.QueryNode.WorkTkpr.IsNotNull))
	selRnd.Values( _
		Me.QueryNode.Currency, _
		tempRound.ARMaster, _
		Me.QueryNode.WorkTkpr, _
		Me.QueryNode.TranType, _
		Me.QueryNode.WorkType, _
		Me.QueryNode.TimeType, _
		Me.QueryNode.CostType, _
		Me.QueryNode.ChrgType, _
		Me.QueryNode.WorkOffice, _
		Me.QueryNode.BillOffice, _
		Me.QueryNode.ARTotal, _
		Me.QueryNode.CurrencyDate, _
		Me.QueryNode.DaysOld, _
		Me.QueryNode.BillThruDate, _
		Me.QueryNode.ChkDate, _
		Me.QueryNode.LastBillNxDate, _
		Me.QueryNode.ARType)
	selRnd.OrderBy(Me.QueryNode.ARTotal.Descending)

	With Me.Framework.QuerySession.Insert(tempRndData).Immediate
		.Into( _
			tempRndData.Currency, _
			tempRndData.ARMaster, _
			tempRndData.WorkTkpr, _
			tempRndData.TranType, _
			tempRndData.WorkType, _
			tempRndData.TimeType, _
			tempRndData.CostType, _
			tempRndData.ChrgType, _
			tempRndData.WorkOffice, _
			tempRndData.BillOffice, _
			tempRndData.ARTotal, _
			tempRndData.CurrencyDate, _
			tempRndData.DaysOld, _
			tempRndData.BillThruDate, _
			tempRndData.ChkDate, _
			tempRndData.LastBillNxDate, _
			tempRndData.ARType)
		.From(selRnd)
	End With
	tempRndData.CreateIndex(Me.Framework.QuerySession)

	Dim selRoundSub As ISelect = QueryBuilder.SelectFrom(tempRndData)
	selRoundSub.Values(exp.MAX(tempRndData.TempIndex))

	Dim tempRound2 As TempRoundDef = CType(tempRound.MakeAlias(), TempRoundDef)

	Dim selRound As ISelect = QueryBuilder.SelectFrom(tempRound2)
	selRound.InnerJoin(tempRound2.ARMaster.IsEqualTo(tempRndData.ARMaster).And _
					  (tempRound2.Currency.IsEqualTo(tempRndData.Currency)))
	selRound.InnerJoin(tempRound2, arm, tempRound2.ARMaster.IsEqualTo(arm.ARMIndex))				
	selRound.Where(tempRndData.TempIndex.IsIn _
			(selRoundSub.Where(tempRndData.ARMaster.IsEqualTo(tempRound2.ARMaster).And _
							  (tempRndData.Currency.IsEqualTo(tempRound2.Currency)))))

	With tempRound
		selRound.Values( _
			.Currency, _
			.BillTkpr, _
			.Matter, _
			.ClntDate, _
			.MattDate, _
			arm.InvMaster, _
			.LastPaymentDate, _
			.LastPaymentNxDate, _
			.AgingBucket, _
			.CurrFactor, _
			tempRndData.WorkTkpr, _
			tempRndData.TranType, _
			tempRndData.WorkType, _
			tempRndData.TimeType, _
			tempRndData.CostType, _
			tempRndData.ChrgType, _
			tempRndData.WorkOffice, _
			tempRndData.BillOffice, _
			Exp.Coalesce(exp.Sum(.ARFees),0), _
			Exp.Coalesce(exp.Sum(.ARHardCosts),0), _
			Exp.Coalesce(exp.Sum(.ARSoftCosts),0), _
			Exp.Coalesce(exp.Sum(.ArCosts),0), _
			Exp.Coalesce(exp.Sum(.ARTax),0), _
			Exp.Coalesce(exp.Sum(.ARInterest),0), _
			Exp.Coalesce(exp.Sum(.AROnAcct),0), _
			Exp.Coalesce(exp.Sum(.AROther),0), _
			Exp.Coalesce(exp.Sum(.ARCharges),0), _
			0, _
			Exp.Coalesce(exp.Sum(.ARTotal),0), _
			0, _
			Exp.Coalesce(exp.Sum(.Aging1),0), Exp.Coalesce(exp.Sum(.Aging2),0), Exp.Coalesce(exp.Sum(.Aging3),0), Exp.Coalesce(exp.Sum(.Aging4),0), Exp.Coalesce(exp.Sum(.Aging5),0), _
			Exp.Coalesce(exp.Sum(.feeAging1),0), Exp.Coalesce(exp.Sum(.feeAging2),0), Exp.Coalesce(exp.Sum(.feeAging3),0), Exp.Coalesce(exp.Sum(.feeAging4),0), Exp.Coalesce(exp.Sum(.feeAging5),0), _
			Exp.Coalesce(exp.Sum(.hcoAging1),0), Exp.Coalesce(exp.Sum(.hcoAging2),0), Exp.Coalesce(exp.Sum(.hcoAging3),0), Exp.Coalesce(exp.Sum(.hcoAging4),0), Exp.Coalesce(exp.Sum(.hcoAging5),0), _
			Exp.Coalesce(exp.Sum(.scoAging1),0), Exp.Coalesce(exp.Sum(.scoAging2),0), Exp.Coalesce(exp.Sum(.scoAging3),0), Exp.Coalesce(exp.Sum(.scoAging4),0), Exp.Coalesce(exp.Sum(.scoAging5),0), _
			Exp.Coalesce(exp.Sum(.taxAging1),0), Exp.Coalesce(exp.Sum(.taxAging2),0), Exp.Coalesce(exp.Sum(.taxAging3),0), Exp.Coalesce(exp.Sum(.taxAging4),0), Exp.Coalesce(exp.Sum(.taxAging5),0), _
			Exp.Coalesce(exp.Sum(.intAging1),0), Exp.Coalesce(exp.Sum(.intAging2),0), Exp.Coalesce(exp.Sum(.intAging3),0), Exp.Coalesce(exp.Sum(.intAging4),0), Exp.Coalesce(exp.Sum(.intAging5),0), _
			Exp.Coalesce(exp.Sum(.boaAging1),0), Exp.Coalesce(exp.Sum(.boaAging2),0), Exp.Coalesce(exp.Sum(.boaAging3),0), Exp.Coalesce(exp.Sum(.boaAging4),0), Exp.Coalesce(exp.Sum(.boaAging5),0), _
			Exp.Coalesce(exp.Sum(.othAging1),0), Exp.Coalesce(exp.Sum(.othAging2),0), Exp.Coalesce(exp.Sum(.othAging3),0), Exp.Coalesce(exp.Sum(.othAging4),0), Exp.Coalesce(exp.Sum(.othAging5),0), _
			"True", _
			tempRndData.CurrencyDate, _
			tempRndData.DaysOld, _
			tempRndData.BillThruDate, _
			tempRndData.ChkDate, _
			tempRndData.LastBillNxDate, _
			tempRndData.ARType)
		selRound.GroupBy( _
			.Currency, _
			.BillTkpr, _
			.Matter, _
			.ClntDate, _
			.MattDate, _
			arm.InvMaster, _
			.LastPaymentDate, _
			.LastPaymentNxDate, _
			.AgingBucket, _
			.CurrFactor, _
			tempRndData.WorkTkpr, _
			tempRndData.TranType, _
			tempRndData.WorkType, _
			tempRndData.TimeType, _
			tempRndData.CostType, _
			tempRndData.ChrgType, _
			tempRndData.WorkOffice, _
			tempRndData.BillOffice, _
			tempRndData.CurrencyDate, _
			tempRndData.DaysOld, _
			tempRndData.BillThruDate, _
			tempRndData.ChkDate, _
			tempRndData.LastBillNxDate, _
			tempRndData.ARType)
			
	End With
			
	With Me.Framework.QuerySession.Insert(Me.QueryNode).Immediate
		.Into( _
			Me.QueryNode.Currency, _
			Me.QueryNode.BillTkpr, _
			Me.QueryNode.Matter, _
			Me.QueryNode.ClntDate, _
			Me.QueryNode.MattDate, _
			Me.QueryNode.InvMaster, _
			Me.QueryNode.LastPaymentDate, _
			Me.QueryNode.LastPaymentNxDate, _
			Me.QueryNode.AgingBucket, _
			Me.QueryNode.CurrFactor, _
			Me.QueryNode.WorkTkpr, _
			Me.QueryNode.TranType, _
			Me.QueryNode.WorkType, _
			Me.QueryNode.TimeType, _
			Me.QueryNode.CostType, _
			Me.QueryNode.ChrgType, _
			Me.QueryNode.WorkOffice, _
			Me.QueryNode.BillOffice, _
			Me.QueryNode.ARFees, _
			Me.QueryNode.ARHardCosts, _
			Me.QueryNode.ARSoftCosts, _
			Me.QueryNode.ArCosts, _
			Me.QueryNode.ARTax, _
			Me.QueryNode.ARInterest, _
			Me.QueryNode.AROnAcct, _
			Me.QueryNode.AROther, _
			Me.QueryNode.ARCharges, _
			Me.QueryNode.ARUnallocated, _
			Me.QueryNode.ARTotal, _
			Me.QueryNode.ARDoubtFul, _
			Me.QueryNode.Aging1, Me.QueryNode.Aging2, Me.QueryNode.Aging3, Me.QueryNode.Aging4, Me.QueryNode.Aging5, _
			Me.QueryNode.feeAging1, Me.QueryNode.feeAging2, Me.QueryNode.feeAging3, Me.QueryNode.feeAging4, Me.QueryNode.feeAging5, _
			Me.QueryNode.hcoAging1, Me.QueryNode.hcoAging2, Me.QueryNode.hcoAging3, Me.QueryNode.hcoAging4, Me.QueryNode.hcoAging5, _
			Me.QueryNode.scoAging1, Me.QueryNode.scoAging2, Me.QueryNode.scoAging3, Me.QueryNode.scoAging4, Me.QueryNode.scoAging5, _
			Me.QueryNode.taxAging1, Me.QueryNode.taxAging2, Me.QueryNode.taxAging3, Me.QueryNode.taxAging4, Me.QueryNode.taxAging5, _
			Me.QueryNode.intAging1, Me.QueryNode.intAging2, Me.QueryNode.intAging3, Me.QueryNode.intAging4, Me.QueryNode.intAging5, _
			Me.QueryNode.boaAging1, Me.QueryNode.boaAging2, Me.QueryNode.boaAging3, Me.QueryNode.boaAging4, Me.QueryNode.boaAging5, _
			Me.QueryNode.othAging1, Me.QueryNode.othAging2, Me.QueryNode.othAging3, Me.QueryNode.othAging4, Me.QueryNode.othAging5, _
			Me.QueryNode.IsRounding, _
			Me.QueryNode.CurrencyDate, _
			Me.QueryNode.DaysOld, _
			Me.QueryNode.BillThruDate, _
			Me.QueryNode.ChkDate, _
			Me.QueryNode.LastBillNxDate, _
			Me.QueryNode.ARType)
			
		.From(selRound)
	End With
End Sub

Public Class openInvoiceDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_openInv")
    End Sub

    Public invIndex As ILeaf = New SimpleLeaf(Me, "invIndex")
    
    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
            .AddLeaf(Me.invIndex, NextGen.Framework.OQL.Type.Integer)
        End With

        qrySession.Execute(tempTable)
    End Sub

	Public Sub CreateIndex(ByRef qrySession As ISession)
		' create index
        Dim tempIndex As ICreateIndex = QueryBuilder.CreateIndex("invMaster", Me)
        tempIndex.AddColumn("invIndex")
		
		qrySession.Execute(tempIndex)
	End Sub
End Class

'' temp table definition to store BOA charge card balances
Public Class chrgBalDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_chrgBal")
    End Sub

    Public ARMaster As ILeaf = New SimpleLeaf(Me, "ARMaster")
	Public chrgBalance As ILeaf = New SimpleLeaf(Me, "chrgBalance")
    
    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
            .AddLeaf(Me.ARMaster, NextGen.Framework.OQL.Type.Integer)
			.AddLeaf(Me.chrgBalance, NextGen.Framework.OQL.Type.Decimal(16,2))
        End With

        qrySession.Execute(tempTable)
    End Sub


End Class

Private Class TempOutputDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_Tempout")
    End Sub

    Public ClntDate As ILeaf = New SimpleLeaf(Me, "ClntDate")
    Public MattDate As ILeaf = New SimpleLeaf(Me, "MattDate")
    Public AgingBucket As ILeaf = New SimpleLeaf(Me, "AgingBucket")
    Public ArMaster As ILeaf = New SimpleLeaf(Me, "ArMaster")
    Public LastPaymentDate As ILeaf = New SimpleLeaf(Me, "LastPaymentDate")
    Public ARFees As ILeaf = New SimpleLeaf(Me, "ARFees")
    Public ARHardCosts As ILeaf = New SimpleLeaf(Me, "ARHardCosts")
    Public ARSoftCosts As ILeaf = New SimpleLeaf(Me, "ARSoftCosts")
    Public ARTax As ILeaf = New SimpleLeaf(Me, "ARTax")
    Public ARInterest As ILeaf = New SimpleLeaf(Me, "ARInterest")
    Public AROnAcct As ILeaf = New SimpleLeaf(Me, "AROnAcct")
    Public AROther As ILeaf = New SimpleLeaf(Me, "AROther")
    Public ARUnallocated As ILeaf = New SimpleLeaf(Me, "ARUnallocated")
    Public ARTotal As ILeaf = New SimpleLeaf(Me, "ARTotal")
    Public ArCosts As ILeaf = New SimpleLeaf(Me, "ArCosts")
    Public ARCharges As ILeaf = New SimpleLeaf(Me, "ARCharges")
	Public BillTkpr As ILeaf = New SimpleLeaf(Me, "BillTkpr")
    Public Matter As ILeaf = New SimpleLeaf(Me, "Matter")
    Public ARDoubtFul As ILeaf = New SimpleLeaf(Me, "ARDoubtFul")
	Public OrigInvAmt As ILeaf = New SimpleLeaf(Me, "OrigInvAmt")
	Public Currency As ILeaf = New SimpleLeaf(Me, "Currency")
    Public Aging1 As ILeaf = New SimpleLeaf(Me, "Aging1")
    Public Aging2 As ILeaf = New SimpleLeaf(Me, "Aging2")
    Public Aging3 As ILeaf = New SimpleLeaf(Me, "Aging3")
    Public Aging4 As ILeaf = New SimpleLeaf(Me, "Aging4")
    Public Aging5 As ILeaf = New SimpleLeaf(Me, "Aging5")
    Public feeAging1 As ILeaf = New SimpleLeaf(Me, "feeAging1")
    Public feeAging2 As ILeaf = New SimpleLeaf(Me, "feeAging2")
    Public feeAging3 As ILeaf = New SimpleLeaf(Me, "feeAging3")
    Public feeAging4 As ILeaf = New SimpleLeaf(Me, "feeAging4")
    Public feeAging5 As ILeaf = New SimpleLeaf(Me, "feeAging5")
    Public hcoAging1 As ILeaf = New SimpleLeaf(Me, "hcoAging1")
    Public hcoAging2 As ILeaf = New SimpleLeaf(Me, "hcoAging2")
    Public hcoAging3 As ILeaf = New SimpleLeaf(Me, "hcoAging3")
    Public hcoAging4 As ILeaf = New SimpleLeaf(Me, "hcoAging4")
    Public hcoAging5 As ILeaf = New SimpleLeaf(Me, "hcoAging5")
    Public scoAging1 As ILeaf = New SimpleLeaf(Me, "scoAging1")
    Public scoAging2 As ILeaf = New SimpleLeaf(Me, "scoAging2")
    Public scoAging3 As ILeaf = New SimpleLeaf(Me, "scoAging3")
    Public scoAging4 As ILeaf = New SimpleLeaf(Me, "scoAging4")
    Public scoAging5 As ILeaf = New SimpleLeaf(Me, "scoAging5")
    Public taxAging1 As ILeaf = New SimpleLeaf(Me, "taxAging1")
    Public taxAging2 As ILeaf = New SimpleLeaf(Me, "taxAging2")
    Public taxAging3 As ILeaf = New SimpleLeaf(Me, "taxAging3")
    Public taxAging4 As ILeaf = New SimpleLeaf(Me, "taxAging4")
    Public taxAging5 As ILeaf = New SimpleLeaf(Me, "taxAging5")
    Public intAging1 As ILeaf = New SimpleLeaf(Me, "intAging1")
    Public intAging2 As ILeaf = New SimpleLeaf(Me, "intAging2")
    Public intAging3 As ILeaf = New SimpleLeaf(Me, "intAging3")
    Public intAging4 As ILeaf = New SimpleLeaf(Me, "intAging4")
    Public intAging5 As ILeaf = New SimpleLeaf(Me, "intAging5")
    Public boaAging1 As ILeaf = New SimpleLeaf(Me, "boaAging1")
    Public boaAging2 As ILeaf = New SimpleLeaf(Me, "boaAging2")
    Public boaAging3 As ILeaf = New SimpleLeaf(Me, "boaAging3")
    Public boaAging4 As ILeaf = New SimpleLeaf(Me, "boaAging4")
    Public boaAging5 As ILeaf = New SimpleLeaf(Me, "boaAging5")
    Public othAging1 As ILeaf = New SimpleLeaf(Me, "othAging1")
    Public othAging2 As ILeaf = New SimpleLeaf(Me, "othAging2")
    Public othAging3 As ILeaf = New SimpleLeaf(Me, "othAging3")
    Public othAging4 As ILeaf = New SimpleLeaf(Me, "othAging4")
    Public othAging5 As ILeaf = New SimpleLeaf(Me, "othAging5")
	Public IsRounding As ILeaf = New SimpleLeaf(Me, "isRounding")
	'# Added by CNA
	Public CurrencyDate As ILeaf = New SimpleLeaf(Me, "CurrencyDate")
	Public DaysOld As ILeaf = New SimpleLeaf(Me, "DaysOld")
	Public BillThruDate As ILeaf = New SimpleLeaf(Me, "BillThruDate")
	Public ChkDate As ILeaf = New SimpleLeaf(Me, "ChkDate")
	Public LastBillNxDate As ILeaf = New SimpleLeaf(Me, "LastBillNxDate")
	Public ARType As ILeaf = New SimpleLeaf(Me, "ARType")
	'# Added by CNA
    Public LastPaymentNxDate As ILeaf = New SimpleLeaf(Me, "LastPaymentNxDate")
    Public CurrFactor As ILeaf = New SimpleLeaf(Me, "CurrFactor")
	'BOA
	Public UnAppliedBOAFees As ILeaf = New SimpleLeaf(Me, "UnAppliedBOAFees")
	Public UnAppliedBOACosts As ILeaf = New SimpleLeaf(Me, "UnAppliedBOACosts")
	Public UnPaidBOAFees As ILeaf = New SimpleLeaf(Me, "UnPaidBOAFees")
	Public UnPaidBOACosts As ILeaf = New SimpleLeaf(Me, "UnPaidBOACosts")
	
    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
			.AddLeaf(Me.ClntDate, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.MattDate, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.AgingBucket, NextGen.Framework.OQL.Type.GUID)
            .AddLeaf(Me.ARMaster, NextGen.Framework.OQL.Type.Integer)
            .AddLeaf(Me.LastPaymentDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ARFees, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARHardCosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARSoftCosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARTax, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARInterest, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.AROnAcct, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.AROther, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARUnallocated, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARTotal, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ArCosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARCharges, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.BillTkpr, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.Matter, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.ARDoubtFul, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.OrigInvAmt, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Currency, NextGen.Framework.OQL.Type.STRING(8))
			.AddLeaf(Me.Aging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			'# Added by CNA
			.AddLeaf(Me.CurrencyDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.DaysOld, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.BillThruDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ChkDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.LastBillNxDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ARType, NextGen.Framework.OQL.Type.STRING(8))
			'# Added by CNA
			.AddLeaf(Me.LastPaymentNxDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.CurrFactor, NextGen.Framework.OQL.Type.DECIMAL(20, 14))
			.AddLeaf(Me.isRounding, Nextgen.Framework.OQL.Type.BOOLEAN)
			'BOA
			.AddLeaf(Me.UnAppliedBOAFees, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.UnAppliedBOACosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.UnpaidBOAFees, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.UnpaidBOACosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
        End With

		qrySession.Execute(tempTable)
	End Sub

	Public Sub CreateIndex(ByRef qrySession As ISession)
		' create index
		Dim tempIndex As ICreateIndex = QueryBuilder.CreateIndex("i_output", Me)
		tempIndex.AddColumns("ARMaster")
		
		qrySession.Execute(tempIndex)
	End Sub
End Class

Private Class TempDetailDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_TempDetail")
    End Sub

    Public ARDIndex As ILeaf = New SimpleLeaf(Me, "ARDIndex")
    Public ARTotal As ILeaf = New SimpleLeaf(Me, "ARTotal")
    Public ARFee As ILeaf = New SimpleLeaf(Me, "ARFee")
    Public ARHCo As ILeaf = New SimpleLeaf(Me, "ARHCo")
    Public ARSCo As ILeaf = New SimpleLeaf(Me, "ARSCo")
    Public ARTax As ILeaf = New SimpleLeaf(Me, "ARTax")
    Public ARInterest As ILeaf = New SimpleLeaf(Me, "ARInterest")
    Public ARBOA As ILeaf = New SimpleLeaf(Me, "ARBOA")
    Public AROther As ILeaf = New SimpleLeaf(Me, "AROther")
    Public WorkTkpr As ILeaf = New SimpleLeaf(Me, "WorkTkpr")
    Public TranType As ILeaf = New SimpleLeaf(Me, "TranType")
    Public WorkType As ILeaf = New SimpleLeaf(Me, "WorkType")
    Public TimeType As ILeaf = New SimpleLeaf(Me, "TimeType")
    Public CostType As ILeaf = New SimpleLeaf(Me, "CostType")
    Public ChrgType As ILeaf = New SimpleLeaf(Me, "ChrgType")
    Public WorkOffice As ILeaf = New SimpleLeaf(Me, "WorkOffice")
    Public BillOffice As ILeaf = New SimpleLeaf(Me, "BillOffice")
    Public DetMattDate As ILeaf = New SimpleLeaf(Me, "DetMattDate")
    Public DetClntDate As ILeaf = New SimpleLeaf(Me, "DetClntDate")
    Public WorkDate As ILeaf = New SimpleLeaf(Me, "WorkDate")
	'#Added by CNA
	Public CurrencyDate As ILeaf = New SimpleLeaf(Me, "CurrencyDate")
	Public DaysOld As ILeaf = New SimpleLeaf(Me, "DaysOld")
	Public BillThruDate As ILeaf = New SimpleLeaf(Me, "BillThruDate")
	Public ChkDate As ILeaf = New SimpleLeaf(Me, "ChkDate")
	Public LastBillNxDate As ILeaf = New SimpleLeaf(Me, "LastBillNxDate")
	Public ARType As ILeaf = New SimpleLeaf(Me, "ARType")
	'#Added by CNA
	
	'RM FLS 11th July 2014 SRS143 Allow grouping by Billing timekeeper office rather than bill office
	Public BillTkprDate As ILeaf = New SimpleLeaf(Me, "BillTkprDate")
    
    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
            .AddLeaf(Me.ARDIndex, NextGen.Framework.OQL.Type.Integer)
			.AddLeaf(Me.ARTotal, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARFee, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARHCo, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARSCo, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARTax, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARInterest, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARBOA, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.AROther, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.WorkTkpr, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.TranType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.WorkType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.TimeType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.CostType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.ChrgType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.WorkOffice, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.BillOffice, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.DetMattDate, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.DetClntDate, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.WorkDate, NextGen.Framework.OQL.Type.DATE)
			
			'# Added by CNA
			.AddLeaf(Me.CurrencyDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.DaysOld, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.BillThruDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ChkDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.LastBillNxDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ARType, NextGen.Framework.OQL.Type.STRING(8))
			'# Added by CNA
			
			.AddLeaf(Me.BillTkprDate, NextGen.Framework.OQL.Type.GUID)
        End With

		qrySession.Execute(tempTable)
	End Sub

	Public Sub CreateIndex(ByRef qrySession As ISession)
		' create index
		Dim tempIndex As ICreateIndex = QueryBuilder.CreateIndex("i_detail", Me)
		tempIndex.AddColumns("ARDIndex")
		
		qrySession.Execute(tempIndex)
	End Sub
End Class

Private Class TempRoundDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_TempRound")
    End Sub

    Public ClntDate As ILeaf = New SimpleLeaf(Me, "ClntDate")
    Public MattDate As ILeaf = New SimpleLeaf(Me, "MattDate")
    Public AgingBucket As ILeaf = New SimpleLeaf(Me, "AgingBucket")
    Public ArMaster As ILeaf = New SimpleLeaf(Me, "ArMaster")
    Public LastPaymentDate As ILeaf = New SimpleLeaf(Me, "LastPaymentDate")
    Public ARFees As ILeaf = New SimpleLeaf(Me, "ARFees")
    Public ARHardCosts As ILeaf = New SimpleLeaf(Me, "ARHardCosts")
    Public ARSoftCosts As ILeaf = New SimpleLeaf(Me, "ARSoftCosts")
    Public ARTax As ILeaf = New SimpleLeaf(Me, "ARTax")
    Public ARInterest As ILeaf = New SimpleLeaf(Me, "ARInterest")
    Public AROnAcct As ILeaf = New SimpleLeaf(Me, "AROnAcct")
    Public AROther As ILeaf = New SimpleLeaf(Me, "AROther")
    Public ARTotal As ILeaf = New SimpleLeaf(Me, "ARTotal")
    Public ArCosts As ILeaf = New SimpleLeaf(Me, "ArCosts")
    Public ARCharges As ILeaf = New SimpleLeaf(Me, "ARCharges")
	Public BillTkpr As ILeaf = New SimpleLeaf(Me, "BillTkpr")
    Public Matter As ILeaf = New SimpleLeaf(Me, "Matter")
	Public Currency As ILeaf = New SimpleLeaf(Me, "Currency")
    Public Aging1 As ILeaf = New SimpleLeaf(Me, "Aging1")
    Public Aging2 As ILeaf = New SimpleLeaf(Me, "Aging2")
    Public Aging3 As ILeaf = New SimpleLeaf(Me, "Aging3")
    Public Aging4 As ILeaf = New SimpleLeaf(Me, "Aging4")
    Public Aging5 As ILeaf = New SimpleLeaf(Me, "Aging5")
    Public feeAging1 As ILeaf = New SimpleLeaf(Me, "feeAging1")
    Public feeAging2 As ILeaf = New SimpleLeaf(Me, "feeAging2")
    Public feeAging3 As ILeaf = New SimpleLeaf(Me, "feeAging3")
    Public feeAging4 As ILeaf = New SimpleLeaf(Me, "feeAging4")
    Public feeAging5 As ILeaf = New SimpleLeaf(Me, "feeAging5")
    Public hcoAging1 As ILeaf = New SimpleLeaf(Me, "hcoAging1")
    Public hcoAging2 As ILeaf = New SimpleLeaf(Me, "hcoAging2")
    Public hcoAging3 As ILeaf = New SimpleLeaf(Me, "hcoAging3")
    Public hcoAging4 As ILeaf = New SimpleLeaf(Me, "hcoAging4")
    Public hcoAging5 As ILeaf = New SimpleLeaf(Me, "hcoAging5")
    Public scoAging1 As ILeaf = New SimpleLeaf(Me, "scoAging1")
    Public scoAging2 As ILeaf = New SimpleLeaf(Me, "scoAging2")
    Public scoAging3 As ILeaf = New SimpleLeaf(Me, "scoAging3")
    Public scoAging4 As ILeaf = New SimpleLeaf(Me, "scoAging4")
    Public scoAging5 As ILeaf = New SimpleLeaf(Me, "scoAging5")
    Public taxAging1 As ILeaf = New SimpleLeaf(Me, "taxAging1")
    Public taxAging2 As ILeaf = New SimpleLeaf(Me, "taxAging2")
    Public taxAging3 As ILeaf = New SimpleLeaf(Me, "taxAging3")
    Public taxAging4 As ILeaf = New SimpleLeaf(Me, "taxAging4")
    Public taxAging5 As ILeaf = New SimpleLeaf(Me, "taxAging5")
    Public intAging1 As ILeaf = New SimpleLeaf(Me, "intAging1")
    Public intAging2 As ILeaf = New SimpleLeaf(Me, "intAging2")
    Public intAging3 As ILeaf = New SimpleLeaf(Me, "intAging3")
    Public intAging4 As ILeaf = New SimpleLeaf(Me, "intAging4")
    Public intAging5 As ILeaf = New SimpleLeaf(Me, "intAging5")
    Public boaAging1 As ILeaf = New SimpleLeaf(Me, "boaAging1")
    Public boaAging2 As ILeaf = New SimpleLeaf(Me, "boaAging2")
    Public boaAging3 As ILeaf = New SimpleLeaf(Me, "boaAging3")
    Public boaAging4 As ILeaf = New SimpleLeaf(Me, "boaAging4")
    Public boaAging5 As ILeaf = New SimpleLeaf(Me, "boaAging5")
    Public othAging1 As ILeaf = New SimpleLeaf(Me, "othAging1")
    Public othAging2 As ILeaf = New SimpleLeaf(Me, "othAging2")
    Public othAging3 As ILeaf = New SimpleLeaf(Me, "othAging3")
    Public othAging4 As ILeaf = New SimpleLeaf(Me, "othAging4")
    Public othAging5 As ILeaf = New SimpleLeaf(Me, "othAging5")
    Public LastPaymentNxDate As ILeaf = New SimpleLeaf(Me, "LastPaymentNxDate")
    Public CurrFactor As ILeaf = New SimpleLeaf(Me, "CurrFactor")
    Public WorkTkpr As ILeaf = New SimpleLeaf(Me, "WorkTkpr")
    Public TranType As ILeaf = New SimpleLeaf(Me, "TranType")
    Public WorkType As ILeaf = New SimpleLeaf(Me, "WorkType")
    Public TimeType As ILeaf = New SimpleLeaf(Me, "TimeType")
    Public CostType As ILeaf = New SimpleLeaf(Me, "CostType")
    Public ChrgType As ILeaf = New SimpleLeaf(Me, "ChrgType")
    Public WorkOffice As ILeaf = New SimpleLeaf(Me, "WorkOffice")
    Public BillOffice As ILeaf = New SimpleLeaf(Me, "BillOffice")
	'#Added by CNA
	Public CurrencyDate As ILeaf = New SimpleLeaf(Me, "CurrencyDate")
	Public DaysOld As ILeaf = New SimpleLeaf(Me, "DaysOld")
	Public BillThruDate As ILeaf = New SimpleLeaf(Me, "BillThruDate")
	Public ChkDate As ILeaf = New SimpleLeaf(Me, "ChkDate")
	Public LastBillNxDate As ILeaf = New SimpleLeaf(Me, "LastBillNxDate")
	Public ARType As ILeaf = New SimpleLeaf(Me, "ARType")
	'#Added by CNA
	Public InvMaster As ILeaf = New SimpleLeaf(Me, "InvMaster")
    

    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
			.AddLeaf(Me.ClntDate, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.MattDate, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.AgingBucket, NextGen.Framework.OQL.Type.GUID)
            .AddLeaf(Me.ARMaster, NextGen.Framework.OQL.Type.Integer)
            .AddLeaf(Me.LastPaymentDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ARFees, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARHardCosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARSoftCosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARTax, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARInterest, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.AROnAcct, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.AROther, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARTotal, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ArCosts, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.ARCharges, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.BillTkpr, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.Matter, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.Currency, NextGen.Framework.OQL.Type.STRING(8))
			.AddLeaf(Me.Aging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.Aging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.feeAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.hcoAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.scoAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.taxAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.intAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.boaAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging1, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging2, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging3, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging4, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.othAging5, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.LastPaymentNxDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.CurrFactor, NextGen.Framework.OQL.Type.DECIMAL(20, 14))
			.AddLeaf(Me.WorkTkpr, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.TranType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.WorkType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.TimeType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.CostType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.ChrgType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.WorkOffice, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.BillOffice, NextGen.Framework.OQL.Type.STRING(16))
			'#Added by CNA
			.AddLeaf(Me.CurrencyDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.DaysOld, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.BillThruDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ChkDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.LastBillNxDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ARType, NextGen.Framework.OQL.Type.STRING(8))
			'#Added by CNA
			.AddLeaf(Me.InvMaster, NextGen.Framework.OQL.Type.INTEGER)
        End With

		qrySession.Execute(tempTable)
	End Sub

	Public Sub CreateIndex(ByRef qrySession As ISession)
		' create index
		Dim tempIndex As ICreateIndex = QueryBuilder.CreateIndex("i_round", Me)
		tempIndex.AddColumns("InvMaster", "ARMaster", "Currency")
		
		qrySession.Execute(tempIndex)
	End Sub
End Class

Private Class TempRndDataDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_TempRndData")
    End Sub

	Public Currency As ILeaf = New SimpleLeaf(Me, "Currency")
    Public ArMaster As ILeaf = New SimpleLeaf(Me, "ArMaster")
    Public WorkTkpr As ILeaf = New SimpleLeaf(Me, "WorkTkpr")
    Public TranType As ILeaf = New SimpleLeaf(Me, "TranType")
    Public WorkType As ILeaf = New SimpleLeaf(Me, "WorkType")
    Public TimeType As ILeaf = New SimpleLeaf(Me, "TimeType")
    Public CostType As ILeaf = New SimpleLeaf(Me, "CostType")
    Public ChrgType As ILeaf = New SimpleLeaf(Me, "ChrgType")
    Public WorkOffice As ILeaf = New SimpleLeaf(Me, "WorkOffice")
    Public BillOffice As ILeaf = New SimpleLeaf(Me, "BillOffice")
    Public ARTotal As ILeaf = New SimpleLeaf(Me, "ARTotal")
    Public TempIndex As ILeaf = New SimpleLeaf(Me, "TempIndex")
	'# Added by CNA
	Public CurrencyDate As ILeaf = New SimpleLeaf(Me, "CurrencyDate")
	Public DaysOld As ILeaf = New SimpleLeaf(Me, "DaysOld")
	Public BillThruDate As ILeaf = New SimpleLeaf(Me, "BillThruDate")
	Public ChkDate As ILeaf = New SimpleLeaf(Me, "ChkDate")
	Public LastBillNxDate As ILeaf = New SimpleLeaf(Me, "LastBillNxDate")
	Public ARType As ILeaf = New SimpleLeaf(Me, "ARType")
	'# Added by CNA
    
    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
			.AddLeaf(Me.Currency, NextGen.Framework.OQL.Type.STRING(8))
            .AddLeaf(Me.ARMaster, NextGen.Framework.OQL.Type.Integer)
			.AddLeaf(Me.WorkTkpr, NextGen.Framework.OQL.Type.GUID)
			.AddLeaf(Me.TranType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.WorkType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.TimeType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.CostType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.ChrgType, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.WorkOffice, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.BillOffice, NextGen.Framework.OQL.Type.STRING(16))
			.AddLeaf(Me.ARTotal, NextGen.Framework.OQL.Type.DECIMAL(16, 2))
			.AddLeaf(Me.TempIndex, NextGen.Framework.OQL.Type.AUTONUMBER)
			'# Added by CNA
			.AddLeaf(Me.CurrencyDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.DaysOld, NextGen.Framework.OQL.Type.INTEGER)
			.AddLeaf(Me.BillThruDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ChkDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.LastBillNxDate, NextGen.Framework.OQL.Type.DATE)
			.AddLeaf(Me.ARType, NextGen.Framework.OQL.Type.STRING(8))
			'# Added by CNA
        End With

		qrySession.Execute(tempTable)
	End Sub

	Public Sub CreateIndex(ByRef qrySession As ISession)
		' create index
		Dim tempIndex As ICreateIndex = QueryBuilder.CreateIndex("i_rnddata", Me)
		tempIndex.AddColumns("ARMaster", "Currency", "TempIndex")
		
		qrySession.Execute(tempIndex)
	End Sub
End Class

Private Function GetExceptionMessage(ByVal ex As Exception, ByVal msgMgr As IMessageMgr) As String
    If TypeOf ex Is ILanguageException Then
        Return CType(ex, ILanguageException).Message(msgmgr)
    Else
        Return ex.Message
    End If
End Function
	
Private Class tmpTimeEndDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_tmpTimeEnd")
    End Sub

    Public InvMaster As ILeaf = New SimpleLeaf(Me, "InvMaster")
	Public TimeEnd As ILeaf = New SimpleLeaf(Me, "TimeEnd")
    
    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
			.AddLeaf(Me.InvMaster, NextGen.Framework.OQL.Type.Integer)
			.AddLeaf(Me.TimeEnd, NextGen.Framework.OQL.Type.DateTime)
        End With

		qrySession.Execute(tempTable)
	End Sub

End Class

Private Class tmpBillThruDef
	Inherits SimpleNode
	Public Sub New()
		MyBase.New("_tmpBillThru")
	End Sub
	
	Public arMaster As ILeaf = New SimpleLeaf(Me, "arMaster")
	Public invNum As ILeaf = New SimpleLeaf(Me, "invNum")
	Public thruDate As ILeaf = New SimpleLeaf(Me, "thruDate")
	
	Public Sub CreateTable(ByRef qrysession As ISession)
		Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)
		
		With tempTable
			.AddLeaf(Me.arMaster, Nextgen.Framework.oQL.Type.Integer)
			.AddLeaf(Me.invNum, NextGen.Framework.OQL.Type.String(30))
			.AddLeaf(Me.thruDate, NextGen.Framework.OQL.Type.Date)
		End With
		
		qrySession.Execute(tempTable)
	End Sub
End Class

Public Class BOABalDef
    Inherits SimpleNode

    Public Sub New()
        MyBase.New("_BOABal")
    End Sub

	Public LeadMatter As ILeaf = New SimpleLeaf(Me, "LeadMatter")
    'Public InvMaster As ILeaf = New SimpleLeaf(Me, "InvMaster")
	Public UnAppliedBOAFees As ILeaf = New SimpleLeaf(Me, "UnAppliedBOAFees")
	Public UnAppliedBOACosts As ILeaf = New SimpleLeaf(Me, "UnAppliedBOACosts")
	Public UnAppliedBOA As ILeaf = New SimpleLeaf(Me, "UnAppliedBOA")
	Public UnPaidBOAFees As ILeaf = New SimpleLeaf(Me, "UnPaidBOAFees")
	Public UnPaidBOACosts As ILeaf = New SimpleLeaf(Me, "UnPaidBOACosts")
	Public UnPaidBOA As ILeaf = New SimpleLeaf(Me, "UnPaidBOA")
    
    Public Sub CreateTable(ByRef qrySession As ISession)
        Dim tempTable As ICreateTable = QueryBuilder.CreateTempTable(Me)

        With tempTable
            '.AddLeaf(Me.InvMaster, NextGen.Framework.OQL.Type.Integer)
			.AddLeaf(Me.LeadMatter, NextGen.Framework.OQL.Type.Integer)
			.AddLeaf(Me.UnAppliedBOAFees, NextGen.Framework.OQL.Type.Decimal(16,2))
			.AddLeaf(Me.UnAppliedBOACosts, NextGen.Framework.OQL.Type.Decimal(16,2))
			.AddLeaf(Me.UnAppliedBOA, NextGen.Framework.OQL.Type.Decimal(16,2))
			.AddLeaf(Me.UnPaidBOAFees, NextGen.Framework.OQL.Type.Decimal(16,2))
			.AddLeaf(Me.UnPaidBOACosts, NextGen.Framework.OQL.Type.Decimal(16,2))
			.AddLeaf(Me.UnPaidBOA, NextGen.Framework.OQL.Type.Decimal(16,2))
        End With

        qrySession.Execute(tempTable)
    End Sub

End Class

	End Class

End Namespace
